// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.cpp"
using namespace std;

int main()
{
    login userLogin;
    string userChoice;
    cout << "\t\t\t_____________________________________________\n\n\n";
    cout << "\t\t\t         Welcome to the NEMO 2023 Login!       \n\n";
    cout << "\t\t\t_________           Menu           __________\n\n";
    cout << "\t | Press 1 to LOGIN                              |" << endl;
    cout << "\t | Press 2 to REGISTER                           |" << endl;
    cout << "\t | Press 3 if you forgot PASSWORD                |" << endl;
    cout << "\t | Press 4 to EXIT                               |" << endl;
    cout << "\n\t\t\t Please Enter your choice: ";
    cin >> userChoice;
    cout << endl;

    if (userChoice == "1")
    {
        userLogin.Login();
        main();
    }
    else if (userChoice == "2")
    {
        userLogin.Registration();
        main();
    }
    else if (userChoice == "3")
    {
        userLogin.ForgotPassword();
        main();
    }
    else if (userChoice == "4")
    {
        cout << "\t\t\t Goodbye! \n\n";
    }
    else
    {
        system("cls");
        cout << "\t\t\t Please select from the options above\n";
        main();
    }
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.h"
using namespace std;

void login::Login()
{
    string count;
    string username, password, id, recordPass, recordSecurity;
    system("cls");
    cout << "\n\t\t\t Please enter the username and password: " << endl;
    cout << "\t\t\t USERNAME: ";
    cin >> username;
    cout << "\t\t\t PASSWORD: ";
    cin >> password;

    string loginHash = password;
    hash<string> mystdhash;
    int loginHashPassword = mystdhash(loginHash);

    ifstream input("data.txt");

    while (input >> id >> recordPass >> recordSecurity)
    {
        if (id == username && stoi(recordPass) == loginHashPassword)
        {
            count = "1";
            system("cls");
        }
    }
    input.close();
    if (count == "1")
    {
        cout << username << "\nLogin successful!\n";
        string choice = "1";
        while (choice != "2")
        {
            cout << "\t\t\t_____________________________________________\n\n\n";
            cout << "\t\t\t         Welcome to the NEMO 2023 Login!         \n\n";
            cout << "\t\t\t_______ Currently Logged In: " << username << " ________\n\n";
            cout << "\t\t\t_________           Menu           __________\n\n";
            cout << "\t | Press 1 to PLAY GAME                              |" << endl;
            cout << "\t | Press 2 to LOGOUT                                 |" << endl;
            cout << "\n\t\t\t Please Enter your choice: ";
            cin >> choice;
            cout << endl;

            if (choice == "1")
            {
                system("cls");
                DrunkGame();
            }
            else if (choice == "2")
            {
                system("cls");
                cout << "Logging out" << endl;
            }
            else
            {
                system("cls");
                cout << "Choice invalid, try again";
            }
        }
    }
    else
    {
        system("cls");
        cout << "\n Username or password is incorrect, please try again or register\n";
    }
}

void login::Registration()
{
    string regUser, regPassword, regId, regPass, securityQuestion, regSecure, regCount;
    system("cls");
    cout << "\n\t\t\t Enter Username: ";
    cin >> regUser;
    cout << "\t\t\t Enter Password: ";
    cin >> regPassword;
    cout << "\t\t\t Security Question: What was your favorite childhood movie?: ";
    cin.ignore();
    getline(cin, securityQuestion);

    string hashing = regPassword;
    hash<string> mystdhash;
    int hashPassword = mystdhash(hashing);

    string secureHashing = securityQuestion;
    hash<string> mystdhash2;
    int securityHash = mystdhash2(secureHashing);

    ifstream input("data.txt");
    input.seekg(0, ios::end);

    if (input.tellg() == 0)
    {
        ofstream f1("data.txt", ios::app);
        f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
        system("cls");
        cout << "\n\t\t\t Registration successful!\n";
        return;
    }
    else
    {
        ifstream input("data.txt");
        while (input >> regId >> regPass >> regSecure)
        {
            if (regUser == regId)
            {
                string decision;
                cout << "\n\t\tUsername already taken.\n";
                cout << "\t\tEnter 1 to enter a new one\n";
                cout << "\t\tEnter 2 to go back to the menu\n";
                cout << "\n\t\tEnter choice: ";
                cin >> decision;

                if (decision == "1")
                {
                    Registration();
                }
                else if (decision == "2")
                {
                    system("cls");
                    cout << "\tReturning to menu\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tInvalid Entry, returning to menu." << endl;
                    return;
                }
            }
            else
            {
                regCount = "1";
            }
        }
        if (regCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
            system("cls");
            cout << "\n\t\t\t Registration successful!\n";
            return;
        }
    }
}

void login::DrunkGame()
{
    srand(time(0));
    const int size = 60;
    cout << "Enter a letter to begin \n ";
    char x;
    cin >> x;
    int position = size / 2;
    while (true)
    {
        cout << "|START|";
        for (int i = 0; i < size; i++)
        {
            if (i == position)
                cout << x;
            else
                cout << " ";
        }
        cout << "|END|" << endl;
        int move = rand() % 3 - 1;
        position = position + move;
        if (position < 1)
        {
            cout << "Guess you were too drunk to make it to the end..." << endl;
            break;
        }
        if (position > size - 1)
        {
            cout << "You might be drunk, but you made it to the end!" << endl;
            break;
        }
        for (int sleep = 0; sleep < 1000000; ++sleep)
            ;
    }
    system("pause");
    system("cls");
}

void login::ForgotPassword()
{
    string forgotChoice, count, secondCount;
    system("cls");
    cout << "\n\t\t\tPress 1 to enter USERNAME\n";
    cout << "\t\t\tPress 2 to go back to MENU\n";
    cout << "\n\t\t\tEnter choice: ";
    cin >> forgotChoice;

    if (forgotChoice == "1")
    {
        string user, userSecurity, forgotId, forgotPass, forgotSecurity;
        int newHashPassword, forgotSecHash;
        system("cls");
        cout << "\n\t\tEnter USERNAME: ";
        cin >> user;
        cout << endl;

        ifstream input("data.txt");
        while (input >> forgotId >> forgotPass >> forgotSecurity)
        {
            if (user == forgotId)
            {
                cout << "\n\t\tUser found\n\t\tSecurity Question: What was your favorite childhood movie?: ";
                cin.ignore();
                getline(cin, userSecurity);
                cout << endl;

                string hashing = userSecurity;
                hash<string> mystdhash;
                forgotSecHash = mystdhash(hashing);

                if (stoi(forgotSecurity) == forgotSecHash)
                {
                    system("cls");
                    string newPass;
                    cout << "\t\tSecurity Question correct\n";
                    cout << "\n\t\tEnter new PASSWORD: ";
                    cin >> newPass;

                    string newPassHash = newPass;
                    hash<string> mystdhash2;
                    newHashPassword = mystdhash2(newPassHash);

                    count = "1";
                    break;
                }
                else
                {
                    string incorrectChoice;
                    system("cls");
                    cout << "\t\tSecurity Question incorrect\n";
                    cout << "\t\tPress 1 to Re-Enter\n\t\tPress 2 to return to MENU\n";
                    cout << "\n\t\tEnter choice: ";
                    cin >> incorrectChoice;

                    if (incorrectChoice == "1")
                    {
                        ForgotPassword();
                    }
                    if (incorrectChoice == "2")
                    {
                        system("cls");
                        cout << "\tReturning to MENU\n";
                        return;
                    }
                    else
                    {
                        system("cls");
                        cout << "\tInvalid answer... Returning to menu\n";
                        return;
                    }
                }
            }
            else
            {
                string newChoice;
                system("cls");
                cout << "\t\tUser not found\n";
                cout << "\t\tPress 1 to Re-Enter USERNAME\n\t\tPress 2 to return to MENU\n";
                cout << "\n\t\tEnter choice: ";
                cin >> newChoice;
                if (newChoice == "1")
                {
                    ForgotPassword();
                }
                else if (newChoice == "2")
                {
                    system("cls");
                    cout << "\tReturning to MENU\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tChoice invalid... Returning to MENU\n";
                    return;
                }
            }
        }
        input.close();
        if (count == "1")
        {
            DeleteLine(user);
            secondCount = "1";
        }
        if (secondCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << user << ' ' << newHashPassword << ' ' << forgotSecHash << endl;
            system("cls");
            cout << "\t\t\t Your password has been updated!\n";
            return;
        }
    }
    else if (forgotChoice == "2")
    {
        system("cls");
        cout << "\tReturning to MENU\n";
        return;
    }
    else
    {
        system("cls");
        cout << "\tChoice invalid... Try again\n";
        ForgotPassword();
    }
}

void login::DeleteLine(string userDelete)
{
    string line;
    ifstream myFile;
    myFile.open("data.txt");
    ofstream temp;
    temp.open("temp.txt");
    while (getline(myFile, line))
    {
        if (line.substr(0, userDelete.size()) != userDelete)
        {
            temp << line << endl;
        }
    }
    myFile.close();
    temp.close();
    remove("data.txt");
    rename("temp.txt", "data.txt");
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#pragma once
#include <string.h>
using namespace std;

class login
{
private:
    void DrunkGame();
    void DeleteLine(string username);

public:
    void Login();
    void Registration();
    void ForgotPassword();
};


// Autor : Nemonet TYP
// Title: Encryption and Decryption project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
using namespace std;

int main()
{
   int i, x;
   char str[100];

   cout << "Please enter a string:\t";
   cin >> str;

   cout << "\nPlease choose following options:\n";
   cout << "1 = Encrypt the string.\n";
   cout << "2 = Decrypt the string.\n";
   cin >> x;

   //using switch case statements
   switch(x)
   {
      //first case for encrypting a string
      case 1:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
            str[i] = str[i] + 2; //the key for encryption is 3 that is added to ASCII value

         cout << "\nEncrypted string: " << str << endl;
         break;

      //second case for decrypting a string
      case 2:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
         str[i] = str[i] - 2; //the key for encryption is 3 that is subtracted to ASCII value

      cout << "\nDecrypted string: " << str << endl;
      break;

      default:
         cout << "\nInvalid Input !!!\n";
   }
   return 0;
}


/*
	project status : 1
 	Date : Oct 11, 2022
	Author : Easter Maxwell
	co-factor : The Young Programmer Nemonet (Nov 16, 2022)
*/

/*'Error --1' is just a random error message*/

//control number output
#include <iomanip>   

//for system operations
#include <windows.h>

#include <iostream>

using namespace std;

void standard_output()
{
	int fahr;
	int order;
	int celsius;
	int lower_value;
	int upper_value;

	cout << '\n';
	cout << "[+]Enter Order value : ";
	cin  >> order;

	cout << '\n';
	cout << "[+]Enter Lower Value : ";
	cin  >> lower_value;

	cout << '\n';
	cout << "[+]Enter Upper Value : ";
	cin  >> upper_value;

	/*enables 'fahr' to start printing from the lowest value*/
	fahr = lower_value;

	cout << '\n';
	cout << "\t\t\t\t\t         ";
	cout << "--- Temperature ---" << '\n';

	cout << '\n';
	cout << "\t\t\t\t\t    "
	     << "+----------------------------+"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "| Fahrenheit       Celsius   |"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "+--------------|-------------+";

	while (fahr <= upper_value)
	{
		/*Formula (Fahrenheit to Celsius)*/
		celsius = 5 * (fahr - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t    ";

		cout << "|     " << fahr << "\t\t " << celsius << "     |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+--------------|-------------+";

		/*increments fahrenheit by the 'order' value*/
		fahr = fahr + order;
	}

}

void user_specific_output()
{
	string option;
	float fahr_input;
	float fahr_value;
	float celsius_input;
	float celsius_value;

	cout << "\t\t\t\t\t       "
		 << "--- Available Options ---" << '\n';

	cout << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press F to convert temperature from Fahrenheit to celsius |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| --------------------------------------------------------- |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press C to convert temperature from Celsius to Fahrenheit |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+";

	cout << "\n\n";
	cout << "[:]Enter Option : ";
	cin  >> option;

	if (option == "C" || option == "c")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Celsius : ";
		cin  >> celsius_input;

		/*Formula (Celsius to Fahrenheit)*/
		fahr_value = (9.0 / 5.0) * celsius_input + 32;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|   Celsius       Fahrenheit |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << celsius_input << "\t   |      " << setprecision(3) << fahr_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";

	}

	else if (option == "F" || option == "f")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Fahrenheit : ";
		cin  >> fahr_input;

		/*Formula (Fahrenheit to Celsius)*/
		celsius_value = 5 * (fahr_input - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|  Fahrenheit       Celsius  |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << fahr_input << "\t   |    " << setprecision(3) << celsius_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

}

int main()
{
	string user_input;

	cout << "\t\t\t\t\t    ";
	cout << "--- TEMPERATURE CALCULATOR ---";
	cout << "\n\n";
	cout<<"\n\t\tDeveloped By:";
    	cout<<" Easter Maxwell (Oct 11, 2022)";
    	cout<<"\n\t\t In Collaboration with:";
    	cout<<" Nemonet (TYP) (Nov 16, 2022)";
    	cout<<"\n\n\n\n";

	cout << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press 0 to display standard  input |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| ---------------------------------- |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press X to display specific output |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\n\n";

	cout << "[:]Enter option : ";
	cin  >> user_input;

	if (user_input == "0" || user_input == "o" || user_input == "O")
	{
		Sleep(500);

		/*display this function*/
		standard_output();
	}

	else if (user_input == "X" || user_input == "x" || user_input == "*")
	{
		Sleep(500);

		/*display this function*/
		user_specific_output();
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

	return 0;

}



#include <iostream>

using namespace std;

//addition
long double add(long double num1, long double num2)
{
    long double result;
    {
        result = num1 + num2;
    }
    return result;
}
//subtraction
long double sub(long double num1a, long double num2a)
{
    long double resulta;
    {
        resulta = num1a - num2a;
    }
    return resulta;
}
//multiplication
long double mltp(long double num1b, long double num2b)
{
    long double resultb;
    {
        resultb = num1b * num2b;
    }
    return resultb;
}
//division
long double dv(long double num1c, long double num2c)
{
    long double resultc;
    {
        resultc = num1c / num2c;
    }
    return resultc;
}
//exponent
long double power(long double base, long double exponent)
{
    long double resultd = 1;
    for(long double i = 0; i < exponent; i++)
    {
       resultd = base * resultd; 
    }
    return resultd;
}

int panel;
long double a;
long double b;

void ctrl_panel()
{
    cout << "Control Panel\n\nOperators: \n\n1.Addition\n2.Subtraction\n3.Multiplication\n4.Division\n5.Exponent\n6.Multiplication Table\n7.Celcius to Farenheit\n8.Farenheit to Celcius\n\n0.Back\n";
    cin >> panel;
    switch(panel)
    {
        case 0:
            return;
            break;
        case 1:
            cout << "Addition\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << add(a, b) << endl << endl;
            break;
        case 2:
            cout << "Subtraction\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << sub(a, b) << endl << endl;
            break;
        case 3:
            cout << "Multiplication\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << mltp(a, b) << endl << endl;
            break;
        case 4:
            cout << "Division\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << dv(a, b) << endl << endl;
            break;
        case 5:
            cout << "Exponent\n\nBase: \n";
            cin >> a;
            cout << "Power: \n";
            cin >> b;
            cout << power(a, b) << endl << endl;
            break;
        case 7:
            cout << "Celcius to Farenheit\n\nTemperature: \n";
            cin >> a;
            cout << a * 1.8 + 32 << "℉" << endl << endl;
            break;
        case 8:
            cout << "Farenheit to Celcius\n\nTemperature: \n";
            cin >> a;
            cout << (a - 32) * 5/9 << "℃" << endl << endl;
            break;
        case 6:
            cout << "Multiplication table\n\nPlease select a number you want to show the table of: \n";
            int num;
            cin >> num;
            int num2 = 0;
            cout << "Range: \n";
            int range;
            cin >> range;
    
            for(int i = 0; i < range; i++)
            {
                num2++;
                cout << num << " x " << num2 << " = " << num * num2 << endl << endl;
            }
            break; 
        }
}

int main()
{
    int choice;
    do
    {
        cout << "Welcone to NemoNet Calculator\n\n1.Enter\n0.Quit\n\n";
        cout << " contact NemoNet on: \n\nGitHub\n";
        cin >> choice;
        
        switch(choice)
        {
            case 1:
                ctrl_panel();
                break;
            case 0:
                return 0;
                break;
        }
    }
    while(choice != 0);
}


// Autor : Nemonet TYP
// Title: Supermarket Billing System project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL



#include<iostream>
#include<windows.h>
#include<conio.h>
#include<fstream>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iomanip>
using namespace std;
//global variable declaration
int k=7,r=0,flag=0;
COORD coord = {0, 0};

void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
struct date
{
    int mm,dd,yy;
};

ofstream fout;
ifstream fin;

class item
{
    int itemno;
    char name[25];
    date d;
public:
    void add()
    {
        cout<<"\n\n\tItem No: ";
        cin>>itemno;
        cout<<"\n\n\tName of the item: ";
        cin>>name;
//gets(name);
        cout<<"\n\n\tManufacturing Date(dd-mm-yy): ";
        cin>>d.mm>>d.dd>>d.yy;
    }
    void show()
    {
        cout<<"\n\tItem No: ";
        cout<<itemno;
        cout<<"\n\n\tName of the item: ";
        cout<<name;
        cout<<"\n\n\tDate : ";
        cout<<d.mm<<"-"<<d.dd<<"-"<<d.yy;
    }
    void report()
    {
        gotoxy(3,k);
        cout<<itemno;
        gotoxy(13,k);
        puts(name);
    }
    int retno()
    {
        return(itemno);

    }

};

class amount: public item
{
    float price,qty,tax,gross,dis,netamt;
public:
    void add();
    void show();
    void report();
    void calculate();
    void pay();
    float retnetamt()
    {
        return(netamt);
    }
} amt;

void amount::add()
{
    item::add();
    cout<<"\n\n\tPrice: ";
    cin>>price;
    cout<<"\n\n\tQuantity: ";
    cin>>qty;
    cout<<"\n\n\tTax percent: ";
    cin>>tax;
    cout<<"\n\n\tDiscount percent: ";
    cin>>dis;
    calculate();
    fout.write((char *)&amt,sizeof(amt));
    fout.close();
}
void amount::calculate()
{
    gross=price+(price*(tax/100));
    netamt=qty*(gross-(gross*(dis/100)));
}
void amount::show()
{
    fin.open("itemstore.dat",ios::binary);
    fin.read((char*)&amt,sizeof(amt));
    item::show();
    cout<<"\n\n\tNet amount: ";
    cout<<netamt;
    fin.close();
}

void amount::report()
{
    item::report();
    gotoxy(23,k);
    cout<<price;
    gotoxy(33,k);
    cout<<qty;
    gotoxy(44,k);
    cout<<tax;
    gotoxy(52,k);
    cout<<dis;
    gotoxy(64,k);
    cout<<netamt;
    k=k+1;
    if(k==50)
    {
        gotoxy(25,50);
        cout<<"PRESS ANY KEY TO CONTINUE...";
        getch();
        k=7;
        system("cls");
        gotoxy(30,3);
        cout<<" ITEM DETAILS ";
        gotoxy(3,5);
        cout<<"NUMBER";
        gotoxy(13,5);
        cout<<"NAME";
        gotoxy(23,5);
        cout<<"PRICE";
        gotoxy(33,5);
        cout<<"QUANTITY";
        gotoxy(44,5);
        cout<<"TAX";
        gotoxy(52,5);
        cout<<"DEDUCTION";
        gotoxy(64,5);
        cout<<"NET AMOUNT";
    }
}

void amount::pay()
{
    show();
    cout<<"\n\n\n\t\t*********************************************";
    cout<<"\n\t\t                 DETAILS                  ";
    cout<<"\n\t\t*********************************************";
    cout<<"\n\n\t\tPRICE                     :"<<price;
    cout<<"\n\n\t\tQUANTITY                  :"<<qty;
    cout<<"\n\t\tTAX PERCENTAGE              :"<<tax;
    cout<<"\n\t\tDISCOUNT PERCENTAGE         :"<<dis;
    cout<<"\n\n\n\t\tNET AMOUNT              :Rs."<<netamt;
    cout<<"\n\t\t*********************************************";
}

int main()
{
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout<<setprecision(2);
    fstream tmp("temp.dat",ios::binary|ios::out);
menu:
    system("cls");
    gotoxy(25,2);
    cout<<"Super Market Billing ";
    gotoxy(25,3);
    cout<<"===========================\n\n";
    cout<<"\n\t\t1.Bill Report\n\n";
    cout<<"\t\t2.Add/Remove/Edit Item\n\n";
    cout<<"\t\t3.Show Item Details\n\n";
    cout<<"\t\t4.Exit\n\n";
    cout<<"\t\tPlease Enter Required Option: ";
    int ch,ff;
    float gtotal;
    cin>>ch;
    switch(ch)
    {
    case 1:
ss:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Details";
        gotoxy(25,3);
        cout<<"================\n\n";
        cout<<"\n\t\t1.All Items\n\n";
        cout<<"\t\t2.Back to Main menu\n\n";
        cout<<"\t\tPlease Enter Required Option: ";
        int cho;
        cin>>cho;
        if(cho==1)
        {
            system("cls");
            gotoxy(30,3);
            cout<<" BILL DETAILS ";
            gotoxy(3,5);
            cout<<"ITEM NO";
            gotoxy(13,5);
            cout<<"NAME";
            gotoxy(23,5);
            cout<<"PRICE";
            gotoxy(33,5);
            cout<<"QUANTITY";
            gotoxy(44,5);
            cout<<"TAX %";
            gotoxy(52,5);
            cout<<"DISCOUNT %";
            gotoxy(64,5);
            cout<<"NET AMOUNT";
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            gtotal=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    amt.report();
                    gtotal+=amt.retnetamt();
                    ff=0;
                }
                if(ff!=0) gtotal=0;
            }
            gotoxy(17,k);
            cout<<"\n\n\n\t\t\tGrand Total="<<gtotal;
            getch();
            fin.close();
        }
        if(cho==2)
        {
            goto menu;
        }
        goto ss;
    case 2:
db:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Editor";
        gotoxy(25,3);
        cout<<"=================\n\n";
        cout<<"\n\t\t1.Add Item Details\n\n";
        cout<<"\t\t2.Edit Item Details\n\n";
        cout<<"\t\t3.Delete Item Details\n\n";
        cout<<"\t\t4.Back to Main Menu ";
        int apc;
        cin>>apc;
        switch(apc)
        {
        case 1:
            fout.open("itemstore.dat",ios::binary|ios::app);
            amt.add();
            cout<<"\n\t\tItem Added Successfully!";
            getch();
            goto db;

        case 2:
            int ino;
            flag=0;
            cout<<"\n\n\tEnter Item Number to be Edited :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            fout.open("itemstore.dat",ios::binary|ios::app);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            r=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    int x=amt.item::retno();
                    if(x==ino)
                    {
                        flag=1;
                        fout.seekp(r*sizeof(amt));
                        system("cls");
                        cout<<"\n\t\tCurrent Details are\n";
                        amt.show();
                        cout<<"\n\n\t\tEnter New Details\n";
                        amt.add();
                        cout<<"\n\t\tItem Details editted";
                    }
                }
                r++;
            }
            if(flag==0)
            {
                cout<<"\n\t\tItem No does not exist...Please Retry!";
                getch();
                goto db;
            }
            fin.close();
            getch();
            goto db;

        case 3:
            flag=0;
            cout<<"\n\n\tEnter Item Number to be deleted :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
//fstream tmp("temp.dat",ios::binary|ios::out);
            fin.seekg(0);
            while(fin.read((char*)&amt, sizeof(amt)))
            {
                int x=amt.item::retno();
                if(x!=ino)
                    tmp.write((char*)&amt,sizeof(amt));
                else
                {
                    flag=1;
                }
            }
            fin.close();
            tmp.close();
            fout.open("itemstore.dat",ios::trunc|ios::binary);
            fout.seekp(0);
            tmp.open("temp.dat",ios::binary|ios::in);
            if(!tmp)
            {
                cout<<"Error in File";
                goto db;
            }
            while(tmp.read((char*)&amt,sizeof(amt)))
                fout.write((char*)&amt,sizeof(amt));
            tmp.close();
            fout.close();
            if(flag==1)
                cout<<"\n\t\tItem Succesfully Deleted";
            else if (flag==0)
                cout<<"\n\t\tItem does not Exist! Please Retry";
            getch();
            goto db;
        case 4:
            goto menu;
        default:
            cout<<"\n\n\t\tWrong Choice!!! Retry";
            getch();
            goto db;
        }
    case 3:
        system("cls");
        flag=0;
        int ino;
        cout<<"\n\n\t\tEnter Item Number :";
        cin>>ino;
        fin.open("itemstore.dat",ios::binary);
        if(!fin)
        {
            cout<<"\n\nFile Not Found...\nProgram Terminated!";
            goto menu;
        }
        fin.seekg(0);
        while(fin.read((char*)&amt,sizeof(amt)))
        {
            int x=amt.item::retno();
            if(x==ino)
            {
                amt.pay();
                flag=1;
                break;
            }
        }
        if(flag==0)
            cout<<"\n\t\tItem does not exist....Please Retry!";
        getch();
        fin.close();
        goto menu;
    case 4:
        system("cls");
        gotoxy(20,20);
        cout<<"ARE YOU SURE, YOU WANT TO EXIT (Y/N)?";
        char yn;
        cin>>yn;
        if((yn=='Y')||(yn=='y'))
        {
            gotoxy(12,20);
            system("cls");
            cout<<"************************** THANKS **************************************";
            getch();
            exit(0);
        }
        else if((yn=='N')||(yn=='n'))
            goto menu;
        else
        {
            goto menu;
        }
    default:
        cout<<"\n\n\t\tWrong Choice....Please Retry!";
        getch();
        goto menu;
    }
    return 0;
}


/*This C++ PROGRAM is developed by NemonET TYP and 
special right is given to TEAM TYP for educational purpose  */
//Don't copy source code without permission


#include <iostream>
#include <stdlib.h>

using namespace std;

void calculateGPA();
void calculateCGPA();
void method();

int main()
{
    system("cls");
    int input;
    cout<<"--------------------------------------------------------------------------"<<endl;
    cout<<"                    GPA & CGPA Calculator (Developed by Nemo)             "<<endl;
    cout<<"--------------------------------------------------------------------------\n"<<endl;
    cout<<"            MENU:"<<endl;
    cout<<"                   1. Calculate GPA (Grade Point Average)"<<endl;
    cout<<"                   2. Calculate CGPA (Cummulative Grade Point Average)"<<endl;
    cout<<"                   3. Method that is applied here for calclating GPA & CGPA"<<endl;
    cout<<"                   4. Exit Application"<<endl;
    cout<<"--------------------------------------------------------------------------"<<endl;
    sub:
    cout<<"Enter your choice: ";
    cin>>input;
    switch(input)
    {
        case 1:
                calculateGPA();
                break;

        case 2:
                calculateCGPA();
                break;
        case 3:
                method();
                break;
        case 4:
                exit(EXIT_SUCCESS);
                break;
        default:
            cout<<"You have entered wrong input.Try again!\n"<<endl;
            goto sub;
            break;
    }
}

void calculateGPA()
{
    int q;
    system("cls");
    cout<<"-------------- GPA Calculating -----------------"<<endl;
    cout<<" How many subject's points do you want to calculate? : ";
    cin>>q;

    float credit [q];
    float point [q];

    cout<<endl;
    for(int i=0;i<q;i++)
    {
        cout<<"Enter the credit for the subject "<<i+1<<": ";
        cin>>credit[i];
        cout<<endl;
        cout<<"Enter the point of the subject "<<i+1<<": ";
        cin>>point[i];
        cout<<"-----------------------------------\n\n"<<endl;
    }

    float sum=0;
    float tot;
    for(int j=0;j<q;j++)
    {
        tot=credit[j]*point[j];
        sum=sum+tot;
    }

    float totCr=0;
    for(int k=0;k<q;k++)
    {
        totCr=totCr+credit[k];
    }

    cout<<"\n\n\nTotal Points: "<<sum<<" . Total Credits: "<<totCr<<" .Total GPA: "<<sum/totCr<<" ."<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
}
void calculateCGPA()
{
    system("cls");
    int l;
    cout<<"-------------- CGPA Calculating -----------------\n\n"<<endl;
    cout<<"How many semester results do you want input? :";
    cin>>l;
    cout<<"\n\n"<<endl;
    float semrs[l];
    int i;

    for(i=0;i<l;i++)
    {
        cout<<" Enter Semester "<<i+1<<" Result(GPA): ";
        cin>>semrs[i];
        cout<<"\n"<<endl;
    }

    float semtot=0;
    for(int j=0;j<l;j++)
    {
        semtot=semtot+semrs[j];
    }

    cout<<"******** Your CGPA is "<<semtot/l<<" **********"<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateCGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }

}

void method()
{
    system("cls");
    cout<<"--------------- Method of Calculating GPA & CGPA ---------------\n\n"<<endl;
    cout<<" GPA= Sum of (Credit*Point) / total of credits \n"<<endl;
    cout<<" CGPA=  Sum of GPA / number of semesters "<<endl;
    cout<<"-----------------------------------------------------------------\n\n"<<endl;

    sub:
    int inmenu;
    cout<<"1. Go Back to Main Menu"<<endl;
    cout<<"2. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                main();
                break;
        case 2:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
};


//DEVELOPED BY Nemonet TYP ‍‍‍‍‍‍‍‍‍‍‍‍

//C++ PROJECT

//START OF THE PROGRAM FOR HOTEL MANAGEMENT

#include<iostream>
#include<conio.h>
#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<dos.h>

using namespace std;

//START OF CLASS



class hotel
{

int room_no;
char name[30];
char address[50];
char phone[10];

public:

void main_menu();		//to display the main menu
void add();			//to book a room
void display(); 		//to display the customer record
void rooms();			//to display alloted rooms
void edit();			//to edit the customer record
int check(int);			//to check room status
void modify(int);		//to modify the record
void delete_rec(int);		//to delete the record
void bill(int);                 //for the bill of a record
     };
    //END OF CLASS



//FOR DISPLAYING MAIN MENU



void hotel::main_menu()
{

int choice;
while(choice!=5)
{

  system("cls");
cout<<"\n\t\t\t\t**************************";
cout<<"\n\t\t\t\t SIMPLE HOTEL MANAGEMENT  ";
cout<<"\n\t\t\t\t      * MAIN MENU *";
cout<<"\n\t\t\t\t**************************";
cout<<"\n\n\n\t\t\t1.Book A Room";
cout<<"\n\t\t\t2.Customer Records";
cout<<"\n\t\t\t3.Rooms Allotted";
cout<<"\n\t\t\t4.Edit Record";
cout<<"\n\t\t\t5.Exit";
cout<<"\n\n\t\t\tEnter Your Choice: ";
cin>>choice;

switch(choice)
{

case 1:	add();
break;

case 2: display();
break;

case 3: rooms();
break;

case 4:	edit();
break;

case 5: break;

default:
{

cout<<"\n\n\t\t\tWrong choice.....!!!";
cout<<"\n\t\t\tPress any key to   continue....!!";
getch();

}

}

}

}


//END OF MENU FUNCTION


//FUNCTION FOR BOOKING OF ROOM


void hotel::add()
{

  system("cls");
int r,flag;
ofstream fout("Record.dat",ios::app);

cout<<"\n Enter Customer Detalis";
cout<<"\n -----------------------";
cout<<"\n\n Room no: ";
cout<<"\n Total no. of Rooms - 50";
cout<<"\n Ordinary Rooms from 1 - 30";
cout<<"\n Luxury Rooms from 31 - 45";
cout<<"\n Royal Rooms from 46 - 50";
cout <<"\n Enter The Room no. you want to stay in :- "<<'\n';
cin>>r;

flag=check(r);

if(flag)
cout<<"\n Sorry..!!!Room is already booked";

else
{

room_no=r;
cout<<" Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone No: ";
cin>>phone;

fout.write((char*)this,sizeof(hotel));
cout<<"\n Room is booked...!!!";

}

cout<<"\n Press any key to continue.....!!";

getch();
fout.close();

}


//END OF BOOKING FUNCTION


//FUNCTION FOR DISPLAYING A PURTICULAR CUSTOMER`S RECORD





void hotel::display()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
int r,flag;

cout<<"\n Enter room No. for a particular customer`s details :- "<<'\n';
cin>>r;

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

  system("cls");
cout<<"\n Customer Details";
cout<<"\n -----------------";
cout<<"\n\n Room no: "<<room_no;
cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Phone no: "<<phone;
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room no. not found or vacant....!!";
cout<<"\n\n Press any key to continue....!!";

getch();
fin.close();
}


//END OF DISPLAY FUNCTION

//FUNCTION TO DISPLAY ALL ROOMS OCCUPIED


void hotel::rooms()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
cout<<"\n\t\t\t    List Of Rooms Allotted";
cout<<"\n\t\t\t    -----------------------";
cout<<"\n\n Room No.\tName\t\tAddress\t\t\t\tPhone No.\n";

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
cout<<"\n\n "<<room_no<<"\t\t"<<name;
cout<<"\t\t"<<address<<"\t\t"<<phone;

}

cout<<"\n\n\n\t\t\tPress any key to continue.....!!";
getch();
fin.close();

}


//FUNCTION FOR EDITING RECORDS AND FOR BILL


void hotel::edit()
{

  system("cls");

int choice,r;
cout<<"\n EDIT MENU";
cout<<"\n ----------";
cout<<"\n\n 1. Modify Customer Record";
cout<<"\n 2. Delete Customer Record";
cout<<"\n 3. Bill Of Customer";
cout<<"\n Enter your choice: ";

cin>>choice;
  system("cls");

cout<<"\n Enter room no: " ;
cin>>r;

switch(choice)
{

case 1:	modify(r);
break;

case 2:	delete_rec(r);
break;

case 3: bill(r);
break;

default: cout<<"\n Wrong Choice.....!!";

}
cout<<"\n Press any key to continue....!!!";

getch();
}


int hotel::check(int r)
{

int flag=0;

ifstream fin("Record.dat",ios::in);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

flag=1;
break;

}

}

fin.close();
return(flag);

}


//FUNCTION TO MODIFY CUSTOMERS RECORD


void hotel::modify(int r)
{

long pos,flag=0;

fstream file("Record.dat",ios::in|ios::out|ios::binary);

while(!file.eof())
{

pos=file.tellg();
file.read((char*)this,sizeof(hotel));

if(room_no==r)
{

cout<<"\n Enter New Details";
cout<<"\n ------------------";
cout<<"\n Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone no: ";
cin>>phone;
file.seekg(pos);
file.write((char*)this,sizeof(hotel));
cout<<"\n Record is modified....!!";
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room No. not found or vacant...!!";
file.close();

}


//END OF MODIFY FUNCTION


//FUNCTION FOR DELETING RECORD


void hotel::delete_rec(int r)
{

int flag=0;
char ch;
ifstream fin("Record.dat",ios::in);
ofstream fout("temp.dat",ios::out);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)

{

cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Pone No: "<<phone;
cout<<"\n\n Do you want to delete this record(y/n): ";
cin>>ch;

if(ch=='n')
fout.write((char*)this,sizeof(hotel));
flag=1;

}

else
fout.write((char*)this,sizeof(hotel));

}

fin.close();
fout.close();

if(flag==0)
cout<<"\n Sorry room No. not found or vacant...!!";

else
{

remove("Record.dat");
rename("temp.dat","Record.dat");

}

}


//END OF DELETE FUNCTION


//FUNCTION FOR CUSTOMER`S BILL

void hotel::bill(int r)
{

hotel h1;
ifstream f1;
 f1.open("record.dat",ios::in|ios::binary);

if(!f1)
 cout<<"cannot open";

 else
 {

  f1.read((char*)&h1,sizeof (hotel));
  while(f1)

  {

  f1.read((char*)&h1,sizeof(hotel));

  }

  if (h1.room_no == r)
  {

  if(h1.room_no>=1&&h1.room_no<=30)
  cout<<"your bill = 2000";

  else if (h1.room_no>=35&&h1.room_no<=45)
  cout<<"your bill = 5000" ;

  else
  cout<<"your bill = 7000";

  }

  else
  { cout<<"room no. not found";}

  }

  f1.close();
  getch();

}

//END OF BILLING FUNCTION

//START OF MAIN PROGARM


int main()
{

hotel h;

  system("cls");

cout<<"\n\t\t\t*****************************";
cout<<"\n\t\t\t* HOTEL MANAGEMENT PROJECT  *";
cout<<"\n\t\t\t*****************************";
cout<<"\n\n\t\tDeveloped By:";
cout<<"\t\t Nemonet";
cout<<"\n\t\t\t\t The Young Programmer (TYP)";
cout<<"\n\n\n\n\n\n\n\t\t\t\t\tPress any key to continue....!!";

getch();

h.main_menu();
return 0;
}

//END OF MAIN PROGRAM





#include <iostream>
using namespace std;
int main()
{
    char str[100];
   
   
    cout<<"Enter some text or numbers and see magic:-"<<endl<<endl;
    cout<<"______________________________________"<<endl<<endl;
    cin.getline(str,100);
    cout<<str;
    cout<<"\n______________________________________"<<endl<<endl;
   
    
    for(int b=0;str[b]!='\0';b++){
        
        switch(str[b])
    {
    case 'a':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'b':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'c':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'd':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'e':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'f':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'g':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'h':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'i':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'j':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'k':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'l':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'm':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'n':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'o':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'p':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'r':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 's':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 't':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'u':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'v':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #    ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'w':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'x':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'A':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'B':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'C':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'D':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'E':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'F':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'G':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'H':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'I':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'J':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'K':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'L':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'M':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'N':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'O':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'P':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'Q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'R':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'S':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 'T':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'U':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'V':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #   ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'W':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'X':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'Y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'Z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
        case '0':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }

    case '1':
        {
        cout<<"\n   #  ";
        cout<<"\n  ##  ";
        cout<<"\n   #  ";
        cout<<"\n   #  ";
        cout<<"\n #####";
        cout<<"\n \n   ";
        break;
        }
    case '2':
        {
        cout<<"\n  ###  ";
        cout<<"\n #   # ";
        cout<<"\n    #  ";
        cout<<"\n  #    ";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '3':
        {
        cout<<"\n ##### ";
        cout<<"\n    #  ";
        cout<<"\n   ##  ";
        cout<<"\n    #  ";
        cout<<"\n#####  ";
        cout<<"\n \n    ";
        break;
        }
    case '4':
        {
        cout<<"\n     # ";
        cout<<"\n   # # ";
        cout<<"\n  #  # ";
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n \n    ";
        break;
        }
    case '5':
        {
        cout<<"\n ######";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n      #";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '6':
        {
        cout<<"\n  #####";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '7':
        {
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n    #  ";
        cout<<"\n   #   ";
        cout<<"\n  #    ";
        cout<<"\n \n    ";
        break;
        }
    case '8':
        {
        cout<<"\n  #####";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '9':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n  ##### ";
        cout<<"\n      # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }
     
   case '.':
        {
        cout<<"\n  ## ";
        cout<<"\n #  # ";
        cout<<"\n  ## ";
        cout<<"\n \n     ";
        break;
        }
    default:
        {
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n \n ";
        break;
        }
    }    
    
    return 0;

    }
  }
 }
}

}
    cout<<"\t______________________________________"<<endl;
    cout << "\n\t       And if you liked it,        " << endl;
    cout << " \t   give a star on GitHub !   " << endl;
    cout << "  \t           Thank you!               " << endl;
    cout<<"\t______________________________________"<<endl<<endl;
}


//created by The Young Programmer 🏅aka NemoNet 🖥

#include <iostream>
using namespace std;
int main()
{
    int attemp = 1,ans,guess=0,_won=0,h=100,l=0;
    srand(time(0));
    ans = rand() % 100;
    cout<<"**** PLEASE READ INSTRUCTION ****"<<endl<<endl;
    cout << "NemoNet will generate"<<endl<<"any random number between 0-100"<<endl;
    cout<<"you have to guess the number"<<endl<<"you have 5 attempts / chanses to guess"<<endl<<endl;
    cout<<"After each wrong guess NemoNet will tell you"<<endl<<"Your guess is HIGH or LOW"<<endl;
    cout<<" BEST OF LUCK"<<endl;
while(attemp <= 5)
{
cout<<endl<<"attempts no. :- "<<attemp<<endl;
cout<<"enter the guess between 0 - 100 "<<endl;
cin>>guess;
if(guess < 0 || guess > 100){
  cout<<"INVALID GUESS!!"<<endl;
  continue;
}
else if(guess == ans){
   cout<<"CONGRATULATIONS YOU WON!! your guess "<<guess<<" is correct"<<endl;
   _won = 1;
   break;
   }
else if(guess < ans){
  cout<<"*** Your guess "<<guess<<" * LOW * "<<endl;
  l = guess;
}
else{
  cout<<"*** Your guess "<<guess<<"  * HIGH * "<<endl;
  h = guess;
}
cout<<"*Number is between "<<l<<" ---to---> "<<h<<endl;
attemp++;
}//loop end
cout<<"\n";
if(_won){
  cout<<"THANKS FOR PLAYING!! PLESE GIVE A STAR"<<endl;
}
else{
  cout<<"Sorry you lost! correct answer is: "<<ans<<endl<<"please play again and give A STAR"<<endl;
}
cout<<"\n\n";
cout<<"You can Contact NemoNet for more programming Games :-) \n";
cout<<"https://github.com/The-Young-Programmer";
}


/*-------------------------------------------------------------------------

          GUI Calculator

Programmer           : Nemonet TYP


Software Details
====================
Developed in   : C++
Compiler used  : CodeBlocks
OS             : Windows OS


License   : Protected (Please give the credit of programming to author.)


-------------------------------------------------------------------------------------*/



#include <iostream.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <string.h>
#include <dos.h>

// Window
#define TITLEBARHEIGHT 21
#define BORDERWIDTH 1


#define ADD 1
#define SUBTRACT 2
#define MULTIPLY 3
#define DIVIDE 4

/*--------------------- Global Data ---------------------*/

int ButtonId;
enum bool{false,true};
enum BUTTON{MOUSE_NORMAL = 0,MOUSE_LBUTTON=1,MOUSE_RBUTTON=2,MOUSE_MBUTTON=4};
enum BUTTON_STATUS
{
   BUTTON_STATUS_NORMAL,
   BUTTON_STATUS_DOWN
};

/*------------------------------------------------------
       Mouse Class
------------------------------------------------------*/
class Mouse

{
  private:

   int MouseXpos, MouseYpos;
   BUTTON MouseBtn;
   union REGS in,out;

  public:

   int InstallMouse();
   int ShowMouse();
   int HideMouse();
   void GetMouseStatus();
   BUTTON GetButton();
   int GetPosX();
   int GetPosY();
   void SetMousePosi(int &xpos, int &ypos);
   int MouseInside(int x1, int y1, int x2, int y2);
   void RestrictMousePtr(int x1, int y1, int x2, int y2);

};


 int Mouse::InstallMouse()
 {

  in.x.ax = 0;
  int86(51,&in,&out);
  return out.x.ax;

 }
 int Mouse::ShowMouse()
 {

  in.x.ax = 1;
  int86(51,&in,&out);
  return 1;

 }
 int Mouse::HideMouse()
 {

  in.x.ax = 2;
  int86(51,&in,&out);
  return 1;

 }
 void Mouse::GetMouseStatus()
 {

  in.x.ax = 3;
  int86(51,&in,&out);
  MouseXpos = out.x.cx;
  MouseYpos = out.x.dx;
  MouseBtn = out.x.bx;

 }
 BUTTON Mouse::GetButton()
 {
  return MouseBtn;
 }

 int Mouse::GetPosX()
 {
  return MouseXpos;
 }

 int Mouse::GetPosY()
 {
  return MouseYpos;
 }

 void Mouse::SetMousePosi(int &xpos, int &ypos)
 {
  in.x.ax = 4;
  in.x.cx = xpos;
  in.x.dx = ypos;
  int86(51,&in,&out);
 }
 int Mouse::MouseInside(int x1, int y1, int x2, int y2)
 {
  int x_pos, y_pos;
  in.x.ax = 3;
  int86(51,&in,&out);
  x_pos = out.x.cx;
  y_pos = out.x.dx;

  if(x_pos >= x1 && y_pos >= y1 && x_pos <= x2 && y_pos <= y2)
   return 1;
  else
   return 0;

 }
 void Mouse::RestrictMousePtr(int x1, int y1, int x2, int y2)
 {

  in.x.ax = 7;
  in.x.cx = x1;
  in.x.dx = x2;
  int86(51,&in,&out);

  in.x.ax = 8;
  in.x.cx = y1;
  in.x.dx = y2;
  int86(51,&in,&out);

 }


/*------------------------------------------------------
       End of Mouse Class
------------------------------------------------------*/


/*------------------------------------------------------
       TextBox Class
------------------------------------------------------*/

class TextBox
{

 private:

 int Alignment;

 int Left,Top,Width,Height;
 char Caption[50];

 public:

 TextBox(int left, int top, int width, int height, char caption[],int Align);
 void Draw();
 void SetText(char text[]);
 char *GetText();
 void Clear();
};

 TextBox::TextBox(int left, int top, int width, int height, char caption[],int Align)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  Alignment = Align;
    }


    void TextBox::Draw()
   {
  setfillstyle(SOLID_FILL,WHITE);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(DARKGRAY);
  rectangle(Left,Top,Left+Width,Top+Height);

  setcolor(BLACK);

  settextjustify(Alignment,TOP_TEXT);
  if(Alignment==LEFT_TEXT)
   outtextxy(Left+2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   if(Alignment==RIGHT_TEXT)
    outtextxy(Left+Width-2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   outtextxy(Left+(Width/2),Top+1+((Height/2)-(textheight(Caption)/2)),Caption);


   }


 void TextBox::SetText(char text[])
 {
  if (Left + textwidth(Caption) <= Left + Width - textwidth(" "))
  {
   strcat(Caption,text);
   Draw();
  }
 }

 char *TextBox::GetText()
 {
  return Caption;
 }

 void TextBox::Clear()
 {
  strcpy(Caption,"");
  Draw();
 }


/*------------------------------------------------------
       End of TextBox Class
------------------------------------------------------*/

/*-------------------Mouse Object---------------------*/

static Mouse mouse;

/*------------------------------------------------------
       Button Class
------------------------------------------------------*/

class Button
{

 private:

 int Left,Top,Width,Height,ID;
 char Caption[50];
 BUTTON_STATUS btnStatus;
 void MouseDown();
 void MouseUp();
 bool State;

 public:

 Button(int left, int top, int width, int height, char caption[], int Id);
 void Draw();
 void EnableClickHandler();

};

 Button::Button(int left, int top, int width, int height, char caption[], int Id)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  ID = Id;
  btnStatus = BUTTON_STATUS_NORMAL;
  State = false;
    }


   void Button::Draw()
   {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left+Width,Top,Left+Width,Top+Height);
  line(Left,Top+Height,Left+Width,Top+Height);

  settextjustify(LEFT_TEXT,TOP_TEXT);
  setcolor(BLACK);
  outtextxy(Left + (Width/2) - textwidth(Caption)/2 + 1,
  Top + (Height/2) - textheight(Caption)/2 + 1, Caption);

   }

   void Button::MouseDown()
   {




    mouse.HideMouse();

    setcolor(BLACK);
    line(Left,Top,Left+Width,Top);
    line(Left,Top,Left,Top+Height);

    setcolor(WHITE);
    line(Left+Width,Top,Left+Width,Top+Height);
    line(Left,Top+Height,Left+Width,Top+Height);

    mouse.ShowMouse();




   }

   void Button::MouseUp()
   {



     mouse.HideMouse();

     setcolor(WHITE);
     line(Left,Top,Left+Width,Top);
     line(Left,Top,Left,Top+Height);

     setcolor(BLACK);
     line(Left+Width,Top,Left+Width,Top+Height);
     line(Left,Top+Height,Left+Width,Top+Height);

     mouse.ShowMouse();

   }

   void Button::EnableClickHandler()
   {

  if(State)
  {
   ButtonId = 0;
   State = false;
   return;
  }

  if( mouse.MouseInside(Left,Top,Left+Width,Top+Height) == 1)
  {

   if( mouse.GetButton() == MOUSE_LBUTTON)
   {
    MouseDown();
    btnStatus = BUTTON_STATUS_DOWN;
   }

   else if(btnStatus == BUTTON_STATUS_DOWN &&  mouse.GetButton() == MOUSE_NORMAL)
   {
    MouseUp();
    ButtonId = ID;
    btnStatus = BUTTON_STATUS_NORMAL;
    State = true;

   }

  }

 }

/*------------------------------------------------------
                     End of Button Class
------------------------------------------------------*/

/*------------------------------------------------------
                     Window Class
------------------------------------------------------*/

class Window
{

 private:

 int Left,Top,Width,Height;
 char Caption[50];
 Button *CloseBtn;
 public:

 Window(int left, int top, int width, int height, char caption[]);
 void JCLogo();
 void Draw();
 void EnableClickHandler();
};


 Window::Window(int left, int top, int width, int height, char caption[])
 {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
 }
 void Window::JCLogo()
 {
    /*********** Logo ************/

  setcolor(3);
  setfillstyle(SOLID_FILL,3);
  fillellipse(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-1,TITLEBARHEIGHT/2-1);
  setcolor(15);
  setfillstyle(SOLID_FILL,15);
  circle(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-3);
  settextstyle(SMALL_FONT,0,0);
  outtextxy(Left+6,Top+4,"JC");
  settextstyle(0,0,0);
 }
 void Window::Draw()
 {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left,Top+Height,Left+Width,Top+Height);
  line(Left+Width,Top,Left+Width,Top+Height);

  setfillstyle(SOLID_FILL,BLUE);
  bar(Left+BORDERWIDTH,Top+BORDERWIDTH,
  Left+Width-(BORDERWIDTH*2),Top+TITLEBARHEIGHT);

  setcolor(WHITE);
  settextjustify(LEFT_TEXT,TOP_TEXT);
  outtextxy(Left+(BORDERWIDTH*2)+TITLEBARHEIGHT+2,Top+(BORDERWIDTH*2)+(TITLEBARHEIGHT/2)-(textheight(Caption)/2),Caption);
  CloseBtn = new Button(Left+Width-TITLEBARHEIGHT-1, Top+2,TITLEBARHEIGHT-2, TITLEBARHEIGHT-2, "X", 9809);
  CloseBtn->Draw();

  JCLogo();

 }
 void Window::EnableClickHandler()
 {
  CloseBtn->EnableClickHandler();
  if (ButtonId == 9809)
  exit(0);

 }


/*------------------------------------------------------
       End of Window Class
------------------------------------------------------*/


/*------------------------------------------------------
       Main Function
------------------------------------------------------*/

void main()
{
 int gd=DETECT,gm,ch,errorcode;
 double opr1 = 0,opr2 = 0,result = 0,d=0;
 int Operation=0;
 double temp;
 char *chr,str[30];
 int len;
 int x = 160,y = 130;
 int w = 50, h = 40;
 char deci[]={"."};

 char btn[][3]={"AC","/","X","<-","7","8","9","-",
 "4","5","6","+","1","2","3","=","0",".","+/-"};


  // initialize graphics and local variables
  initgraph(&gd,&gm,"c://turboc3//bgi");

  // read result of initialization
  errorcode = graphresult();

  if (errorcode != grOk)// an error occurred
  {
   cout<<"Graphics error :: "<<grapherrormsg(errorcode);
   cout <<"\n press any key to halt: ";
   getch();
   exit(1);// terminate with an error code
  }

 mouse.InstallMouse();

 /* Drawing a Calculator Window */

 Window *pWindow = new Window(150,50,265,340,"Calculator");
 pWindow->Draw();

 /* Drawing Textbox */

 TextBox *pTextBox = new TextBox(160,80,243,30,"",RIGHT_TEXT);
 pTextBox->Draw();

 /* Drawing Buttons */

 Button *pButton[19];
 for (int i = 0;i<19;i++)
 {
    if(i == 15)
  h = 90;
    else
  h=40;
    pButton[i] = new Button(x,y,w,h,btn[i],i+1);
    pButton[i]->Draw();
    x = x+65;
    if(i == 3 || i == 7 || i==11 || i== 15)
    {
      y = y+50;
      x = 160;
    }
 }

 while(1){

   mouse.ShowMouse(); // To show mouse
   mouse.GetMouseStatus(); // To get position of mouse

  // Enabling click event on close button in window
  pWindow->EnableClickHandler();
  // Enabling click event on buttons
  for(int k = 0;k<19;k++)
  pButton[k]->EnableClickHandler();


  switch(ButtonId)
  {
    case 1: //AC
      pTextBox->Clear();
      d = 0;
      opr1=0;
      opr2=0;
      result = 0;
      Operation = 0;

    break;
    case 2: //Divide
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = DIVIDE;
      d = 0;

    break;
    case 3: //Multiply
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = MULTIPLY;
      d=0;

    break;
    case 4: //Backspace
      strcpy(chr,pTextBox->GetText());
      len=strlen(chr);
      if(chr[len-2] == deci[0])
      {
         chr[len-1]=0;
         chr[len-2]=0;
      }
      else
         chr[len-1] = 0;
      pTextBox->Clear();
      pTextBox->SetText(chr);

    break;
    case 5: //7
      pTextBox->SetText("7");

    break;
    case 6: //8
      pTextBox->SetText("8");

    break;
    case 7: //9
      pTextBox->SetText("9");

    break;
    case 8: // Subtraction
      opr1 = atoi(pTextBox->GetText());
      pTextBox->Clear();
      Operation = SUBTRACT;
      d=0;

    break;
    case 9: //4
      pTextBox->SetText("4");

    break;
    case 10: //5
      pTextBox->SetText("5");

    break;
    case 11: //6
      pTextBox->SetText("6");

    break;
    case 12: //Addition
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = ADD;
      d=0;

    break;
    case 13: //1
      pTextBox->SetText("1");

    break;
    case 14: //2
      pTextBox->SetText("2");

    break;
    case 15: //3
      pTextBox->SetText("3");

    break;
    case 16: // Equal(=)
      opr2 = atof(pTextBox->GetText());

      switch(Operation)
      {
   case ADD:
   result = opr1+opr2;
   break;
   case SUBTRACT:
   result = opr1-opr2;
   break;
   case MULTIPLY:
   result = opr1*opr2;
   break;
   case DIVIDE:
   result = opr1/opr2;
   break;
      }

      pTextBox->Clear();
      pTextBox->SetText(gcvt(result,10,str));
      opr1=0;
      opr2=0;
      result = 0;
      Operation=0;

    break;
    case 17: //0
      pTextBox->SetText("0");

    break;
    case 18: // Decimal(.)
      if(d == 0)
      {
       d = 1;
       pTextBox->SetText(".");
      }

    break;
    case 19: //Plus & Minus (+/-)



   temp = atof(pTextBox->GetText());
   temp = temp* -1;
   pTextBox->Clear();
   pTextBox->SetText(gcvt(temp,10,str));


    break;
  }


       while(kbhit()){
  ch = getch();
  if (ch == 27)  //ESC key pressed
  exit(0);
    } }

}




#include <stdio.h> 
#include <stdlib.h> 


void enter_string(char* message, char* s, size_t s_size) 
{
  printf("%s", message);
  fgets(s, s_size, stdin);   
}

int get_score(char* s) 
{
  char *end;
  for (end = s; *end != '\0'; ++end);
  --end;

  if (end == s) 
  {
      printf("wrong Input\n");
      return -1;
  }

  int score = 0;
  char c;
  for(char* p = s; p != end; ++p)
  {
    c = *p;
    if(c == ' ') continue;

    c &= ~0x20;

    if(c >= 'A' && c <= 'Z')
    {
      score += c - '@';
    }  
    else
    {
      printf("wrong Input\n");
      return -1;
    }
  }
  return score * 5 / (end - s);
}

int main()
{
  int p,s1,s2;
  char name[1000];

  while(1)
  {
    do 
    {
      enter_string("Enter The First Name: ", name, sizeof(name));
      s1 = get_score(name);
    } while (s1 == -1);

    do 
    {
      enter_string("Enter The Second Name: ", name, sizeof(name));
      s2 = get_score(name);
    } while (s2 == -1);

    if(s2 > s1)
    {
      p = (s1 * 100) / s2;
    }
    else
    {
      p = (s2 * 100) / s1;
    }

    printf("The love Percentage is : %d %% \n",p);
    printf("\n pls Follow me  🌟 if you like this code 😊\n");
  } 
  return 0;
}


/* created by NemoNet aka The Young Programmer 🏅
in collaboration with tigertv 🐯 
pls kindly follow me on github OR
give me a star 🌟  */


//Arcade Spaceship Game
 /*
 * © 2021 Junwoo Yeom 
 * © 2022 Nemonet TYP
 */
 #define MAX_COL 120
 #define MAX_ROW 30
 #include <Windows.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 #include <math.h>
 #include <conio.h>
 struct Ship_Location {//player
 int health; // current health
 int x;
 int y;
 }ship;

 const int max_health = 3;
 int score = 0; // current score
 int max_score = 0;//highest score
 int** background; // save object position obstacle item
 int bottom_size = 5;//Size occupied by the bottom display window
 int level = 1; // level

 int bottom_explain = 0; //temp variable

 void init(); //initialization function
 void gotoxy(int x, int y); // function to move coordinates
 void color(int code);//color change function

 void ship_move(); // make the player ship move
 void obstacle(int difficulty); //Function to save the missile's position
 void cure(int dif); // Function to store the health recovery item position
 void object_down(); //Function to move missiles and items
 void print_game(); // Function to print the game screen
 void bottom(); // Function to display bottom health, score, and highest score

 void clearbottom();
 void reset_arr_1(int* arr, int size, int value);//1 dimensional array initialization function
 void reset_arr_2(int** arr, int row, int column, int value); // 2D array initialization function
 void print_arr(); // function for debug
 int gameover(); // screen when game is over
 void load(); //Load the all-time high score
 void save(); // Save the highest score
 void mainmenu(); // main menu function

 int main(void) {
 int delay = 20;
 mainmenu();
 do {//do ~ while statement to confirm whether to continue the game
 init(); // initial setting
 delay = 20;
 while (ship.health >= 1) {

 ship_move(); // move the ship

 obstacle(level);//assign and move
 cure(2);
 object_down();

 print_game();
 score++;
 level = score / 100 + 1; // Level related expressions so that every 100 points rise by one level

 {
 if (score >= max_score) {//specify max score
 max_score = score;
 }
 if (20 - score / 100 > 0) { // Decrease the delay
 delay = 20 - score / 100;
 }
 else { // If less than 0, change to delay 1
 delay = 1;
 }
 Sleep(delay); // speed control
 }
 }
 save();
 system("cls");
 } while (gameover() == 1);

 return 0;
 }

 void mainmenu() {
 system("mode con:cols=100 lines=20");
 system("title main menu");
 gotoxy(50 - 13, 15);
 color(7);
 printf("Press any key to start the game");
 while (1) {
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 color(14);
 printf("★Dodge Missile★\n");

 Sleep(100);
 color(3);
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 printf("★Dodge Missile★\n");
 Sleep(100);
 if (_kbhit()) break; //check if key is pressed
 }
 }

 void init() {
 load(); //Load the highest score
 score = 0; // Initialize score
 srand(time(NULL)); // set random seed according to time
 background = (int**)malloc(sizeof(int*) * MAX_ROW);//background row (save objects in the background except player spaceship)
 for (int i = 0; i < MAX_ROW; i++) {
 background[i] = (int*)malloc(sizeof(int) * MAX_COL); // background column
 }

 ship.health = max_health;//set the ship's initial health
 reset_arr_2(background, MAX_ROW, MAX_COL, 0); // reset to 0
 ship.x = (MAX_COL - bottom_size) / 2; // Initial x-coordinate of the ship
 ship.y = MAX_ROW / 2;//Set the initial y-coordinate of the ship

 char* temp[30];
 sprintf_s(temp, sizeof(temp), "mode con:cols=%d lines=%d", MAX_COL, MAX_ROW); // Function to print string format
 system(temp);//Set window size
 system("title avoid missile");


 gotoxy(0, MAX_ROW - 5);//underscore
 color(7);
 for (int i = 0; i < MAX_COL; i++) {
 printf("─");
 }
 bottom();
 clearbottom();
 }
 void ship_move() {
 if (GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(0x41)) { // left or a key
 if (ship.x > 0) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Delete the previous afterimage
 ship.x--;//move to the left

 }
 }
 if (GetAsyncKeyState(VK_RIGHT) || GetAsyncKeyState(0x44)) { // right or d key
 if (ship.x < MAX_COL - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.x++;
 }
 }
 if (GetAsyncKeyState(VK_UP) || GetAsyncKeyState(0x57)) { // up or w key
 if (ship.y > 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.y--;
 }
 }
 if (GetAsyncKeyState(VK_DOWN) || GetAsyncKeyState(0x53)) { // up or s-key
 if (ship.y < MAX_ROW - bottom_size - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Clear previous afterimage
 ship.y++;
 }
 }
 gotoxy(ship.x, ship.y);
 color(11);
 printf("A");
 color(7);
 }

 void obstacle(int dif) {
 if (100 / dif > 0) { // Since it is not divisible by 0
 if (score % (100 / dif) == 0) { // more and more obstacles
 background[0][ship.x] = -1; // an obstacle that reduces health by -1
 }
 }
 else {
 background[0][ship.x] = -1;
 }
 }
 void cure(int dif) {
 static int prv_dif = 0; // keep the original shape even when the function is off
 int random = 0; // obstacle location
 if (level != prv_dif) {//every time the level changes
 for (int i = 0; i < dif; i++) {
 random = rand() % MAX_COL;
 if (background[0][random] == 0) {
 background[0][random] = 1; // cure
 }
 else i--;
 }
 }
 prv_dif = level;
 }
 void object_down() {

 /* Problem occurs when moving from row to column
 If you read one line and go down, the object will be on the next line as well.
 By the time the for statement is finished, it will eventually go down all at once.
 */

 // So, use the method of descending one row at a time
 int* temp;
 for (int i = MAX_ROW - 1; i >= 1; i--) { // all background objects down
 reset_arr_1(background[MAX_ROW - 1], MAX_COL, 0); // Initialize the last line to 0
 temp = background[i ​​- 1];
 background[i ​​- 1] = background[i];
 background[i] = temp;
 }

 if (background[ship.y][ship.x] != 0) {//if missile and ship collide or eat health recovery item
 gotoxy(ship.x, ship.y - 1);//Go to the y-coordinate one space above and delete the missile
 printf(" ");

 ship.health += background[ship.y][ship.x];//Recover health or take damage.
 background[ship.y][ship.x] = 0;//Delete the object at that location from the array.
 }

 }

 void print_game() {
 gotoxy(0, 0); // move to position 0, 0
 for (int i = 0; i < MAX_ROW - bottom_size; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] < 0) {/missile if less than 0 heal if greater than 0
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" ");//Delete the previous position of the missile
 }
 gotoxy(j, i);
 printf("M");//missile
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//delete previous position of missile
 }

 }
 else if (background[i][j] > 0) {
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" "); // delete previous position
 }
 gotoxy(j, i);
 color(12);
 printf("+");//HealPack
 color(7);
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//Delete previous missile position
 }
 }
 }
 }

 bottom();
 }
 void bottom() {
 static int prev_health = 0; // place to store previous health
 static int prev_level = 0;

 if (prev_health != ship.health) {// Only when health information is updated, delete the display at the bottom and update
 clearbottom();
 }prev_health = ship.health;

 if (prev_level != level) {//only when the level information is updated
 gotoxy(0, MAX_ROW - 4);
 printf("level %d", level);
 }

 if (bottom_explain <= 1) {
 printf(" (Move with the arrow keys, avoid the white color. Red is the healing potion.)");
 }bottom_explain++;


 gotoxy(0, MAX_ROW - 2);
 printf("Health: ");
 color(4); // dark red
 for (int i = 0; i < ship.health; i++) {
 printf("♥");
 }
 for (int i = 0; i < max_health - ship.health; i++) {
 printf("♡");
 }


 color(7); // white
 int a = 0;
 if (ship.health - max_health > 0) {
 a = ship.health - max_health;
 }
 else a = 0;
 gotoxy(20 + a * 2, MAX_ROW - 2);
 printf("Score: ");
 color(14); // light yellow
 printf("%d", score);

 gotoxy(40 + a * 2, MAX_ROW - 2);
 color(7); // white
 printf("Highest score: ");
 color(14); // light yellow

 printf("%d", max_score);
 color(7); // white


 }

 int gameover() {
 int i = 0;
 while (1) {
 color(12);
 printf(" _____ _____ _\n");
 printf("| __ \\ | _ | | |\n");
 printf("| | \\/ __ _ _ __ ___ ___ | | |__ __ ___ _ __ | |\n");
 printf("| | __ / _` || '_ ` _ \\ / _ \\ | | |\\ \\ / / / _ \\| '__| | |\n");
 printf("| |_\\ \\| (_| || | | | | | __/ \\ \\_/ / \\ V / | __/| | |_|\n");
 printf(" \\____/ \\__,_||_| |_| |_| \\___| \\___/ \\_/ \\___||_| (_)\n");
 printf("\n");
 color(7);
 printf("Current score: ");
 color(14);
 printf("%d\n", score);
 color(7);
 printf("Highest score: ");
 color(14);
 printf("%d\n", max_score);
 color(7);

 printf("\nDo you want to do this again?\n");
 printf("1. Yes\n");
 printf("2. no\n");
 system("pause");
 printf("\nInput:");

 if (scanf_s("%d", &i) == 0) {
 rewind(stdin);
 i = 0;
 printf("Character input is not allowed.\n");
 Sleep(1000);
 }
 else if (!(i >= 1 && i <= 2)) { // If any number other than 1 and 2
 i = 0;
 printf("Please enter a number between 1 and 2.\n");
 Sleep(1000);
 }
 else {
 break;
 }
 system("cls");
 }
 return i;
 }


 void color(int code) {
 SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), code); // Function defined in windows.h, standard output handle, set color to number
 }
 void gotoxy(int x, int y) {
 COORD Pos; // Coordinate structure
 Pos.X = x;
 Pos.Y = y;
 SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos); // Function defined in windows.h, standard output handle, coordinates as a structure
 }

 void clearbottom() {
 gotoxy(0, MAX_ROW - 4);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 gotoxy(0, MAX_ROW - 2);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 }
 void reset_arr_2(int** arr, int row, int column, int value) {
 for (int i = 0; i < row; i++) {
 for (int j = 0; j < column; j++) {
 arr[i][j] = value;
 }
 }
 }
 void reset_arr_1(int* arr, int size, int value) {
 for (int i = 0; i < size; i++) {
 arr[i] = value;
 }
 }
 void load() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "a+");//read and append mode
 if (fp != NULL) {
 fscanf_s(fp, "%d", &max_score);
 fclose(fp);
 }
 else printf("\nFailed to read file\n");
 }
 void save() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "w");
 if (fp != NULL) {
 fprintf(fp, "%d\n", max_score); // Save the highest score
 fclose(fp);
 }
 else printf("\nFailed to write file\n");
 }
 void print_arr() {//for debug
 printf("--------------------------------------");
 for (int i = 0; i < MAX_ROW; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] != 0) {
 printf("%d", background[i][j]);
 }
 else {
 printf(" ");
 }
 }
 printf("\n");
 }
 }


// Autor : Nemonet TYP
// Title: Tic Tac Toe Game project in C
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <windows.h>

int board[10] = {2,2,2,2,2,2,2,2,2,2};
int turn = 1,flag = 0;
int player,comp;

void menu();
void go(int n);
void start_game();
void check_draw();
void draw_board();
void player_first();
void put_X_O(char ch,int pos);
COORD coord= {0,0}; // this is global variable
//center of axis is set to the top left cornor of the screen
void gotoxy(int x,int y)
{
    coord.X=x;
    coord.Y=y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}

void main()
{
    system("cls");
    menu();
    getch();

}

void menu()
{
    int choice;
    system("cls");
    printf("\n--------MENU--------");
    printf("\n1 : Play with X");
    printf("\n2 : Play with O");
    printf("\n3 : Exit");
    printf("\nEnter your choice:>");
    scanf("%d",&choice);
    turn = 1;
    switch (choice)
    {
    case 1:
        player = 1;
        comp = 0;
        player_first();
        break;
    case 2:
        player = 0;
        comp = 1;
        start_game();
        break;
    case 3:
        exit(1);
    default:
        menu();
    }
}

int make2()
{
    if(board[5] == 2)
        return 5;
    if(board[2] == 2)
        return 2;
    if(board[4] == 2)
        return 4;
    if(board[6] == 2)
        return 6;
    if(board[8] == 2)
        return 8;
    return 0;
}

int make4()
{
    if(board[1] == 2)
        return 1;
    if(board[3] == 2)
        return 3;
    if(board[7] == 2)
        return 7;
    if(board[9] == 2)
        return 9;
    return 0;
}

int posswin(int p)
{
// p==1 then X   p==0  then  O
    int i;
    int check_val,pos;

    if(p == 1)
        check_val = 18;
    else
        check_val = 50;

    i = 1;
    while(i<=9)//row check
    {
        if(board[i] * board[i+1] * board[i+2] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+1] == 2)
                return i+1;
            if(board[i+2] == 2)
                return i+2;
        }
        i+=3;
    }

    i = 1;
    while(i<=3)//column check
    {
        if(board[i] * board[i+3] * board[i+6] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+3] == 2)
                return i+3;
            if(board[i+6] == 2)
                return i+6;
        }
        i++;
    }

    if(board[1] * board[5] * board[9] == check_val)
    {
        if(board[1] == 2)
            return 1;
        if(board[5] == 2)
            return 5;
        if(board[9] == 2)
            return 9;
    }

    if(board[3] * board[5] * board[7] == check_val)
    {
        if(board[3] == 2)
            return 3;
        if(board[5] == 2)
            return 5;
        if(board[7] == 2)
            return 7;
    }
    return 0;
}

void go(int n)
{
    if(turn % 2)
        board[n] = 3;
    else
        board[n] = 5;
    turn++;
}

void player_first()
{
    int pos;

    check_draw();
    draw_board();
    gotoxy(30,18);
    printf("Your Turn :> ");
    scanf("%d",&pos);

    if(board[pos] != 2)
        player_first();

    if(pos == posswin(player))
    {
        go(pos);
        draw_board();
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Player Wins");
        getch();
        exit(0);
    }

    go(pos);
    draw_board();
    start_game();
}

void start_game()
{
// p==1 then X   p==0  then  O
    if(posswin(comp))
    {
        go(posswin(comp));
        flag = 1;
    }
    else if(posswin(player))
        go(posswin(player));
    else if(make2())
        go(make2());
    else
        go(make4());
    draw_board();

    if(flag)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Computer wins");
        getch();
    }
    else
        player_first();
}

void check_draw()
{
    if(turn > 9)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Game Draw");
        getch();
        exit(0);
    }
}

void draw_board()
{
    int j;

    for(j=9; j<17; j++)
    {
        gotoxy(35,j);
        printf("|       |");
    }
    gotoxy(28,11);
    printf("-----------------------");
    gotoxy(28,14);
    printf("-----------------------");

    for(j=1; j<10; j++)
    {
        if(board[j] == 3)
            put_X_O('X',j);
        else if(board[j] == 5)
            put_X_O('O',j);
    }
}

void put_X_O(char ch,int pos)
{
    int m;
    int x = 31, y = 10;

    m = pos;

    if(m > 3)
    {
        while(m > 3)
        {
            y += 3;
            m -= 3;
        }
    }
    if(pos % 3 == 0)
        x += 16;
    else
    {
        pos %= 3;
        pos--;
        while(pos)
        {
            x+=8;
            pos--;
        }
    }
    gotoxy(x,y);
    printf("%c",ch);
}


/*-------------------------------------------------------------------------

          GUI Scientific Calculator 

Programmer     : Nemonet
                 The Young Programmer 💻


Software Details
====================
Developed in   : C
Compiler used  : Turbo C++ 3.0
Date           : 20/05/2022 -- 31/05/2022

Licence   : MIT Licence
(Please give the credit of programming to author.)


NOTE:


---------------------------------------------------------------------------*/






//Please change BGI directory accouding to your TC Directory
//By default it is "E:\tc\bgi"

#include <stdio.h>
#include <conio.h>
#include <process.h>
#include <dos.h>
#include <stdlib.h>
#include <iostream.h>
#include <graphics.h>
#include <math.h>
#include <string.h>

float * mem;
int X = 0, Y = 0;
int row = 17, col = 5;
char dummy;
char flag = 'd', flagp = '0';
char bflag = 'u', bflagp = 'u';
int mflag = 0;
char ch, ch1, ch2;
int sflag = 0;
int midx, midy;
#define UNCLICKED 0
#define CLICKED 1
#define PI 3.14159

char str1[] = {
  "Nemo TYP Roll# CIS 34"
};
char str2[] = {
  "Nemonet TYP Roll# CIS 50"
};

void typeit(int x, int y, int spacing, char string[]) {
  char temp[2];
  for (int i = 0; i < strlen(string); i++) {
    delay(100);
    temp[0] = string[i];
    temp[1] = '\0';
    outtextxy(x + (i + 1) * spacing, y, temp);
  } //endfor

}
void front() {
  int x, y, h;
  for (x = 0; x <= 100; x++) {
    settextjustify(CENTER_TEXT, CENTER_TEXT);
    setcolor(1);
    settextstyle(1, 0, 4);
    setusercharsize(x, 6, x, 3);
    setcolor(14);
    moveto(310, 135);
    outtext("..");
    setcolor(6);
    moveto(310, 130);
    outtext("I I");
    if (x < 50)
      delay(30);
    else
      delay(20);
  }
  for (y = 0; y <= 100; y++) {
    setcolor(0);
    settextstyle(1, 0, 4);
    setusercharsize(y, 6, y, 3);
    moveto(310, 135);
    outtext("..");
    moveto(310, 130);
    outtext("I I");
    if (y > 20) {
      settextstyle(7, 0, 3);
      setusercharsize(y - 20, 35, y - 20, 30);
      setcolor(9);
      outtext("CALCULATOR");
      setcolor(2);
      outtext("___________");
      delay(15);
      if (y < 100) {
        settextstyle(7, 0, 3);
        setusercharsize(y - 20, 35, y - 20, 30);
        setcolor(0);
        outtext("CALCULATOR");
      }
    }
  }
  //delay(1000);
  settextstyle(3, 0, 2);
  delay(50);
  outtextxy(midx - 200, midy, "Group Members:-");
  //x=10,y=10;
  setcolor(6);
  settextstyle(4, 0, 4);
  typeit(midx - 200, midy + 50, 15, str1);
  typeit(midx - 200, midy + 75, 15, str2);
  getch();
  //closegraph();

}

char input();
double add(double, double, char);
double angle_conv(double);
void basecng(double, double);

//***********************************************************
// *
// THIS FUNCTION DRAWS THE BUTTONS OF THE CALCULATOR *
// *
//***********************************************************

void button_3d(int x1, int y1, int x2, int y2, int check, char * text, int color) {
  int up, low;
  setfillstyle(1, 7);
  bar(x1, y1, x2, y2);
  if (check == 0) //Unclicked
    up = 15, low = 8;
  else
    up = 8, low = 15; //Clicked
  setcolor(low);
  line(x2, y1, x2, y2);
  line(x2 - 1, y1, x2 - 1, y2);
  line(x1, y2, x2, y2);
  line(x1 + 1, y2 - 1, x2, y2 - 1);

  setcolor(up);
  line(x1, y1, x2, y1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1, y1, x1, y2);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  setcolor(color);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  outtextxy(x1 + (x2 - x1) / 2, (y1 + (y2 - y1) / 2) - 2, text);

}
//********************************************************************
// *
// This function makes the opening screen *
// *
//********************************************************************

void frontpage(void) {
  int mx, my;

  mx = (getmaxx() / 2);
  my = (getmaxy() / 2);

  //SET baqckground color
  setfillstyle(9, 1);
  bar(0, 0, getmaxx(), getmaxy());

  //DRAW a bar, and make it look like a 3d bar
  setfillstyle(1, 7);
  bar(50, 20, 600, 400);

  //DRAW lines for the top and left side
  setcolor(15);
  line(50, 20, 600, 20);
  line(51, 21, 599, 21);
  line(50, 20, 50, 400);
  line(51, 21, 51, 399);

  //DRAW lines for the bottom and right side
  setcolor(8);
  line(600, 20, 600, 400);
  line(599, 21, 599, 400);
  line(50, 400, 600, 400);
  line(51, 399, 600, 399);

  //DRAW two 3D bars for the left and right side

  setfillstyle(9, 8);
  bar(70, 40, 100, 380);
  //getch();
  bar(545, 40, 575, 380);
  setcolor(8);
  rectangle(70, 40, 100, 380);
  rectangle(545, 40, 575, 380);
  setcolor(15);
  line(100, 40, 100, 380);
  line(70, 380, 100, 380);
  line(575, 40, 575, 380);
  line(545, 380, 575, 380);

  //DRAW two 3D divider lines on both sides
  setcolor(8);
  line(110, 40, 110, 380);
  line(535, 40, 535, 380);
  setcolor(15);
  line(111, 40, 111, 380);
  line(536, 40, 536, 380);

  //PRINT 3D text CALENDAR 
  settextstyle(1, 0, 4);
  settextjustify(1, 1);
  setcolor(15);
  outtextxy(mx + 2, my - 46, "MY CALCULATOR");
  setcolor(7);
  outtextxy(mx + 1, my - 45, "MY CALCULATOR");
  setcolor(8);
  outtextxy(mx + 2, my - 44, "MY CALCULATOR");

  //PRINT 3D text 
  setcolor(15);
  outtextxy(mx, my + 10, "2022");
  setcolor(7);
  outtextxy(mx + 1, my + 11, "2022");
  setcolor(8);
  outtextxy(mx + 2, my + 12, "2022");

  //PRINT copyright notice
  settextstyle(2, 0, 5);
  setcolor(1);
  outtextxy(mx + 1, my + 85, "@ 2022 by TYP 💻");

  getch(); //PAUSE for a while
}

//********************************************************************
// *
// This function makes the claculating screen *
// *
//********************************************************************

void screen(int x1, int y1, int x2, int y2) {
  setlinestyle(0, 0, 1);
  setfillstyle(SOLID_FILL, 8);
  bar(x1, y1, x2, y2);
  setfillstyle(SOLID_FILL, BLACK);
  bar(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(15);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1 + 2, y1 + 2, x1 + 2, y2 - 2);
  line(x1 + 2, y1 + 2, x2 - 2, y1 + 2);
  setcolor(8);
  line(x1 + 1, y2 - 1, x2 - 1, y2 - 1);
  line(x2 - 1, y1 + 1, x2 - 1, y2 - 1);
  line(x1 + 2, y2 - 2, x2 - 2, y2 - 2);
  line(x2 - 2, y1 + 2, x2 - 2, y2 - 2);

}

//***********************************************************************
// *
// Mouse Related Functions *
// *
//***********************************************************************

void init_mouse() {
  union REGS iregs, oregs;

  iregs.x.ax = 0;
  int86(0x33, & iregs, & oregs);

  if (oregs.x.ax == 0) {
    cleardevice();
    printf("mouse not installed\n");
    getch();
    exit(1);
  }
  iregs.x.ax = 1;
  int86(0x33, & iregs, & oregs);
}
//*************************************************************

void mouse() {
  int button, x1, y1;
  union REGS iregs, oregs;

  iregs.x.ax = 3;
  int86(0x33, & iregs, & oregs);

  button = oregs.x.bx & 3;
  x1 = oregs.x.cx;
  y1 = oregs.x.dx;

  if (oregs.x.bx & 1) {
    X = x1;
    Y = y1;
  }

  if (button == 3)
    exit(0);
}

//*************************************************************

void hide_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 2;
  int86(0x33, & ioRegs, & ioRegs);
}

//*************************************************************
void show_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 1;
  int86(0x33, & ioRegs, & ioRegs);
}

/*************************************************************/void remove_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 0;
  int86(0x33, & ioRegs, & ioRegs);
}

//************************************************************************
// *
// THIS FUNCTION DRAWS THE CALCULATOR ON THE SCREEN *
// *
//************************************************************************
void structure() {
  init_mouse();
  setbkcolor(0);
  cleardevice();
  hide_mouse();
  //**********************************************************
  // Buttons Making

  front();
  frontpage();
  settextstyle(2, 0, 4);
  button_3d(50, 20, 600, 400, UNCLICKED, "", 1); // main box
  screen(100, 50, 545, 120); // screen

  setfillstyle(1, 8);
  bar(52, 22, 598, 42);
  button_3d(575, 23, 595, 40, UNCLICKED, "x", 0);
  setcolor(0);
  outtextxy(120, 30, "CALCULATOR v1.0");
  button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15); // box of decimal
  button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0); // box of octal
  button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0); // box of hexal
  button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0); // box of binary

  button_3d(350, 205, 380, 225, UNCLICKED, "7", 0); // Box Of 7
  button_3d(390, 205, 420, 225, UNCLICKED, "8", 0); // Box Of 8
  button_3d(430, 205, 460, 225, UNCLICKED, "9", 0); // Box Of 9

  button_3d(350, 230, 380, 250, UNCLICKED, "4", 0); // Box Of 4
  button_3d(390, 230, 420, 250, UNCLICKED, "5", 0); // Box Of 5
  button_3d(430, 230, 460, 250, UNCLICKED, "6", 0); // Box Of 6

  button_3d(480, 230, 510, 250, UNCLICKED, "*", 0); // Box Of *
  button_3d(515, 230, 545, 250, UNCLICKED, "/", 0); // Box Of \
  button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4); //Box Of AllClear (AC)
  button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4); //Box Of Clear (C)

  button_3d(350, 255, 380, 275, UNCLICKED, "1", 0); // Box Of 1
  button_3d(390, 255, 420, 275, UNCLICKED, "2", 0); // Box Of 2
  button_3d(430, 255, 460, 275, UNCLICKED, "3", 0); // Box Of 3

  button_3d(350, 280, 380, 300, UNCLICKED, "0", 0); // Box Of Zero (0)
  button_3d(390, 280, 420, 300, UNCLICKED, ".", 0); // Box Of Period (.)
  button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0); // Box Of PhiFunction

  button_3d(480, 255, 510, 275, UNCLICKED, "-", 0); // Box Of -
  button_3d(515, 255, 545, 275, UNCLICKED, "+", 0); // Box Of +
  button_3d(350, 305, 460, 325, UNCLICKED, "=", 0); // Box Of Equality
  button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE); // Box Of shift

  button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0); //Box of x^n
  button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0); //box of 1/x

  button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0); // Box OfSin Function
  button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0); // Box Of CosFunction
  button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0); // Box Of Tan Function

  button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0); // Box Of sin^-1
  button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0); // Box Of cos^-1
  button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0); // Box Of tan^-1

  button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0); // Box Of ln
  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(BLUE);
  settextstyle(2, 0, 4);
  outtextxy(125, 290, "e");
  outtextxy(185, 290, "10^x");
  outtextxy(245, 290, "x^3");
  button_3d(160, 300, 210, 325, UNCLICKED, "log", 0); // Box Of log
  button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0); // Box Of x^2

  button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
  button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
  button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
  button_3d(480, 350, 545, 370, UNCLICKED, "Off", 4);

  button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
  button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
  button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);

}
//********************************************************
// *
// Main starts *
// *
//********************************************************
void main() {
  clrscr();

  double y = 0, z = 0, pnt, pnt1 = 0, x = 0, r = 0;

  int gdriver = DETECT, gmode, errorcode;
  int i;
  initgraph( & gdriver, & gmode, "C:\\TURBOC3\\BGI");
  midx = getmaxx() / 2;
  midy = getmaxy() / 2;
  structure();
  gotoxy(row, col);
  printf("\t\t\t\t\t");
  gotoxy(row, col);
  printf("0");
  mem = (float * ) malloc(y * sizeof(float));
  while (ch != 27 && ch1 != 27) //While Escape is not pressed
  { //and if base is not 10
    pnt1 = 0; //no doubleing point entered Yet
    ch2 = '0';
    // for(int a=0;ch!=27;a++)//a indicates whether a no. has been entered or not
    while (ch2 != 27)
    //a=0 means that no no. has been entered yet
    {
      if (bflagp != 'u') {
        //gotoxy(row,col);
        dummy = input();
 if (dummy != 'o') {
          gotoxy(row, col);
          printf("The trail version does not support this feature");
          input();
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          // ch='0';
        }
        y = 0;
        z = 0;
        ch = '0';
        gotoxy(row, col);
        printf("\t\t\t\t\t\t");
        gotoxy(row, col);
        printf("0");

        // bflagp='u';
      }

      ch = input();
      if (ch == '>' || ch == '<' || ch == '?') {
        sflag = 0;
        if (ch == '>') //M+
          *
          mem += y;
        if (ch == '<') //M-
          *
          mem -= y;
        if (ch == '?') //MR
        {
          y = * mem;
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          gotoxy(row, col);
          printf("%g", y);
        }
        if ( * mem == 0)
          mflag = 0;
        if ( * mem != 0)
          mflag = 1;
      }
      if (mflag == 0) {
        gotoxy(row, 7);

        printf(" ");

      }
      if (mflag != 0) {
        gotoxy(row, 7);

        printf("M");
      }
      gotoxy(row, col);

      if (ch == 'a') {
        sflag = 0;
        y = 0;
        gotoxy(row, col);
        printf("\t\t\t\t\t");
        gotoxy(row, col);
 printf("0");
      }

      if (ch == 'o')
      //for clearing the screen of the CALCULATOR
      {
        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }

      if (ch == 'q') {
        sflag = 0;
        y = sqrt(y);
 gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == 'm') {
        sflag = 0;
        y = 1 / y;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == '+' || ch == '-' || ch == '/' || ch == '\\' || ch == '=' || ch == '*') {
        sflag = 0;
        break;
      }
      if (ch == '.') //case for a decimal point
      {
        sflag = 0;
 if (pnt1 == 0) //ie no decimal has been entered yet
        {
          gotoxy(row, col);
          printf("\t\t\t\t "); // double
          gotoxy(row, col);
          printf("%g.", y);
          pnt1 = .1; //ie one decimal point no has been entered
          continue; //go back to the begining and get the next number
        } else //decimal point has alredy been entered and thus no change in the screen
        {
          sflag = 0;
          continue; //go back to the begining
        }
      } //out of the '.' condition

      if (pnt1 != 0) //ie we have a doubleing point
      {
        sflag = 0;
        if (ch <= '9' && ch >= '0') //input integer
        {
   // printf("%c",ch);
          x = (double) ch; //type cast the character into double to perforn further operations
          x -= 48; //since character digit indoubleing -48 gives the corresponding ASCII
          x = x * pnt1; //make it a decimal
          y = x + y; //add it in result
          pnt1 *= .1; //shift to the second doubleing point
          gotoxy(row, col);
          printf("%g", y);
          gotoxy(row, col);
          continue; //back to the top
        }
      }
      //if no decimal point number then proceed

      if (ch <= '9' && ch >= '0') {
        sflag = 0;
        x = (double) ch; //typecast to double
        x -= 48; //get corresponding ASCII
        y = (y * 10) + x; //add to right of result
        gotoxy(row, col); //go back to start of the calc screen
 printf("\t\t\t\t "); //clear the screen
        gotoxy(row, col);
        printf("%g", y); //print the number
      }
      if (ch == 'u' || ch == 'v' || ch == 'w' || ch == 'x') {
        sflag = 0;
        if (bflagp == bflag && bflag == 'u')
          continue;
        else
          basecng(y, pnt1);
      }
      if (ch == 'd' || ch == 'r' || ch == 'g') {
        sflag = 0;
        y = angle_conv(y);
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
        // gotoxy(row,col);
        // printf("%g",y);
 // continue;
      }
      if (ch == 's' || ch == 'c' || ch == 't' || ch == 'i' || ch == 'j' || ch == 'k' || ch == 'n' || ch == 'l' || ch == 'p' || ch == 'h')
      //ie the user opted for a function
      {
        if (ch == 's' || ch == 'c' || ch == 't') //sin /cos/tan
        {
          sflag = 0;
          if (flag != 'r') {
            flagp = flag;
            flag = 'r';
            y = angle_conv(y);
            flag = flagp;
          }
          // gotoxy(row,col);
          // printf("%g",y);getch();
          switch (ch) {

          case 's':
            y = sin(y);
     break;
          case 'c':
            y = cos(y);
            break;
          case 't':
            y = tan(y);
            break;
          }
        }
        if (ch == 'i' || ch == 'j' || ch == 'k') {
          sflag = 0;
          if (flag != 'r') {
            // flagp=flag;
            flagp = 'r';
            //y=angle_conv(y);
          }
          switch (ch) {
          case 'i':
            y = asin(y);
            break;
   case 'j':
            y = acos(y);
            break;
          case 'k':
            y = atan(y);
            break;
          }
          if (flag != 'r')
            y = angle_conv(y);
        } else if (ch == 'n') {
          if (sflag == 1) {
            y = exp(y);
            sflag = 0;
          } else
            y = log(y); //ln
        } else if (ch == 'l') {
          if (sflag == 1) {
            y = pow(10, y);
            sflag = 0;
          } else
     y = log10(y); //log
        } else if (ch == 'p') {
          if (sflag == 1) {
            y = pow(y, 3);
            sflag = 0;
          } else
            y = pow(y, 2); //square
        } else if (ch == 'h') {
          sflag = 0;
          y = PI; //pi
        }

        gotoxy(row, col);
        printf("\t\t\t\t "); //Clear the screen
        gotoxy(row, col);
        printf("%g", y);
      } //else condition

    } //out of second condition ie we now have the first no. or function or operater

    for (; ch != 27 && ch1 != '=' && ch != '=';) //ie the characters input are not ESCAPE or Equal to

    {
      pnt1 = 0;
      z = 0;
      if (ch == 'o' || ch1 == 'o') // For Clear The Screen
      {

        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        // gotoxy(col,row);
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }
      for (; ch1 != 27;) {
 gotoxy(row, col);
        // printf("%g",z);
        // z=0;
        ch1 = input();

        if (ch1 == '>' || ch1 == '<' || ch1 == '?') {
          if (ch1 == '>') //M+
            *
            mem += z;
          if (ch1 == '<') //M-
            *
            mem -= z;
          if (ch1 == '?') //MR
          {
            z = * mem;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
          }
   if ( * mem == 0)
            mflag = 0;
          if ( * mem != 0)
            mflag = 1;
        }
        if (mflag == 0) {
          gotoxy(row, 7);
          printf(" ");
        }
        if (mflag != 0) {
          gotoxy(row, 7);
          printf("M");
        }
        gotoxy(row, col);

        if (ch1 == 'a') {
          z = 0;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
        }

        if (ch == 'o' || ch1 == 'o') // For Clear The Screen
        {
          y = 0;
          z = 0;
          gotoxy(row, col);
          //cout<<" ";
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
          gotoxy(row, col);
          break;
        }
        if (ch1 == 'q') {
          z = sqrt(z);
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }
        if (ch1 == 'm') {
          z = 1 / z;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }

        if (ch1 == '.') {
          if (pnt1 == 0) {
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            //cout<<z<<".";
            printf("%g.", z);
            pnt1 = .1;
            continue;
          } else {
            continue;
          }
        }
        if (pnt1 != 0) {
          if (ch1 <= '9' && ch1 >= '0') {
            // printf("%c",ch1);
            x = (double) ch1;
            x -= 48;
            x = x * pnt1;
            z = x + z;
            pnt1 = pnt1 * .1;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            continue;
          }
        }

        if (ch1 == '+' || ch1 == '-' || ch1 == '*' || ch1 == '/' || ch1 == '=')
          break;
        if (ch1 >= '0' && ch1 <= '9') {
          x = (double) ch1;
          x = x - 48;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          z = (z * 10) + x;
          printf("%g", z);
        }
        if (ch == 'u')
          if (ch == 'd' || ch == 'r' || ch == 'g') {
            z = angle_conv(z);
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            // continue;
          }
        if (ch1 == 's' || ch1 == 'c' || ch1 == 't' || ch1 == 'i' || ch1 == 'j' || ch1 == 'k' || ch1 == 'n' || ch1 == 'l' || ch1 == 'p' || ch1 == 'h')
        //ie the user opted for a function
        {
          if (ch1 == 's' || ch1 == 'c' || ch1 == 't') //sin
          {
            if (flag != 'r') {
              flagp = flag;
              flag = 'r';
              angle_conv(z);
              flag = flagp;
            }
            switch (ch1) {
            case 's':
              z = sin(z);
              break;
            case 'c':
              z = cos(z);
              break;
            case 't':
              z = tan(z);
              break;
            }
          }
          if (ch1 == 'i' || ch1 == 'j' || ch1 == 'k') {
            if (flag != 'r') {
              flagp = 'r';
            }
            switch (ch1) {
            case 'i':
              z = asin(z);
              break;
            case 'j':
              z = acos(z);
              break;
            case 'k':
              z = atan(z);
              break;
            }
            z = angle_conv(z);
          } else if (ch1 == 'l') {
            z = log10(z); //log
          } else if (ch1 == 'p') {
            z = pow(z, 2); //square
          } else if (ch1 == 'h') {
            z = PI; //pi
          }

          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
          gotoxy(row, col);
        }
      }

      if (ch1 == '+' || ch1 == '-' || ch1 == '=') {
        y = add(y, z, ch);
        if (ch2 != '0') {
          y = add(r, y, ch2);
          ch2 = '0';
        }
      } else {
        if (ch == '*' || ch == '/')
          y = add(y, z, ch);
        else {
          ch2 = ch;
          r = y;
          y = z;
        }
      }
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("%g", y);
      ch = ch1;
      ch1 = '0';
      if (ch == '=' || ch1 == '=')
        break;
    }
    if (ch == 'o' || ch1 == 'o') // For Clear The Screen
    {
      y = 0;
      z = 0;
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("0");
      gotoxy(row, col);
      continue;
    }
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%g", y);
    z = 0;
  }

  // getch();
  closegraph();
  remove_mouse();
  exit(0);

}

//************************************************************
// *
// This function gets the user's Input *
// *
//************************************************************

char input() {
  X = 0;
  Y = 0;
  char ch;
  show_mouse();
  if (bflag != 'u') {
    button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
    button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
    button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
    button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
    bflag = 'u';
  }
  do {
    mouse();
    if (X >= 350 && X <= 380 && Y >= 205 && Y <= 225) // Condition For 7
    {
      hide_mouse();
      button_3d(350, 205, 380, 225, CLICKED, "7", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 205, 380, 225, UNCLICKED, "7", 0);
      show_mouse();
      ch = '7';
      return ch;
    }

    //**********************************************

    if (X >= 390 && X <= 420 && Y >= 205 && Y <= 225) // Condition For 8
    {

      hide_mouse();
      button_3d(390, 205, 420, 225, CLICKED, "8", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 205, 420, 225, UNCLICKED, "8", 0);
      show_mouse();
      ch = '8';
      return ch;
    }

    //*****************************************

    if (X >= 430 && X <= 460 && Y >= 205 && Y <= 225) // Condition For 9
    {
      hide_mouse();
      button_3d(430, 205, 460, 225, CLICKED, "9", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 205, 460, 225, UNCLICKED, "9", 0);
      show_mouse();
      ch = '9';
      return ch;
    }

    //***********************************

    if (X >= 350 && X <= 380 && Y >= 230 && Y <= 250) // Condition For 4
    {
      hide_mouse();
      button_3d(350, 230, 380, 250, CLICKED, "4", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 230, 380, 250, UNCLICKED, "4", 0);
      show_mouse();
      ch = '4';
      return ch;
    }

    //***********************************

    if (X >= 390 && X <= 420 && Y >= 230 && Y <= 250) // Condition For 5
    {
      hide_mouse();
      button_3d(390, 230, 420, 250, CLICKED, "5", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 230, 420, 250, UNCLICKED, "5", 0);
      show_mouse();
      ch = '5';
      return ch;
    }

    //***********************************

    if (X >= 430 && X <= 460 && Y >= 230 && Y <= 250) // Condition For 6
    {
      hide_mouse();
      button_3d(430, 230, 460, 250, CLICKED, "6", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 230, 460, 250, UNCLICKED, "6", 0);
      show_mouse();
      ch = '6';
      return ch;
    }

    //***********************************

    if (X >= 480 && X <= 510 && Y >= 230 && Y <= 250) // Condition For *
    {
      hide_mouse();
      button_3d(480, 230, 510, 250, CLICKED, "*", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 230, 510, 250, UNCLICKED, "*", 0);
      show_mouse();
      ch = '*';
      return ch;
    }
    //***********************************

    if (X >= 515 && X <= 545 && Y >= 230 && Y <= 250) // Condition For /
    {
      hide_mouse();
      button_3d(515, 230, 545, 250, CLICKED, "/", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 230, 545, 250, UNCLICKED, "/", 0);
      show_mouse();
      ch = '/';
      return ch;
    }

    //***********************************
    int a, b;
    if (X >= 350 && X <= 380 && Y >= 255 && Y <= 275) // Condition For 1
    {
      hide_mouse();
      button_3d(350, 255, 380, 275, CLICKED, "1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 255, 380, 275, UNCLICKED, "1", 0);
      show_mouse();
      ch = '1';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 255 && Y <= 275) // Condition For 2
    {
      hide_mouse();
      button_3d(390, 255, 420, 275, CLICKED, "2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 255, 420, 275, UNCLICKED, "2", 0);
      show_mouse();
      ch = '2';
      return ch;
    }

    // *************************************

    if (X >= 430 && X <= 460 && Y >= 255 && Y <= 275) // Condition For 3
    {
      hide_mouse();
      button_3d(430, 255, 460, 275, CLICKED, "3", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 255, 460, 275, UNCLICKED, "3", 0);
      show_mouse();
      ch = '3';
      return ch;
    }

    // *************************************

    if (X >= 350 && X <= 380 && Y >= 280 && Y <= 300) // Condition For 0
    {
      hide_mouse();
      button_3d(350, 280, 380, 300, CLICKED, "0", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 280, 380, 300, UNCLICKED, "0", 0);
      show_mouse();
      ch = '0';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 280 && Y <= 300) // Condition For .
    {
      hide_mouse();
      button_3d(390, 280, 420, 300, CLICKED, ".", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 280, 420, 300, UNCLICKED, ".", 0);
      show_mouse();
      ch = '.';
      return ch;
    }

    //**********************************************

    if (X >= 430 && X <= 460 && Y >= 280 && Y <= 300) // Condition For pi
    {
      hide_mouse();
      button_3d(430, 280, 460, 300, CLICKED, "pi", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0);
      show_mouse();
      ch = 'h';
      return ch;
    }

    //***********************************************

    if (X >= 480 && X <= 510 && Y >= 255 && Y <= 275) // Condition For -
    {
      hide_mouse();
      button_3d(480, 255, 510, 275, CLICKED, "-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 255, 510, 275, UNCLICKED, "-", 0);
      show_mouse();
      ch = '-';
      return ch;
    }

    //**************************************************

    if (X >= 515 && X <= 545 && Y >= 255 && Y <= 275) // Condition For +
    {
      hide_mouse();
      button_3d(515, 255, 545, 275, CLICKED, "+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 255, 545, 275, UNCLICKED, "+", 0);
      show_mouse();
      ch = '+';
      return ch;
    }

    //*****************************************************

    if (X >= 350 && X <= 460 && Y >= 305 && Y <= 325) // Condition For =
    {
      hide_mouse();
      button_3d(350, 305, 460, 325, CLICKED, "=", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 305, 460, 325, UNCLICKED, "=", 0);
      show_mouse();
      ch = '=';
      return ch;
    }

    //*****************************************************

    if (X >= 480 && X <= 545 && Y >= 305 && Y <= 325) // Condition For shift
    {
      hide_mouse();
      button_3d(480, 305, 545, 325, CLICKED, "shift", BLUE);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE);
      show_mouse();
      ch = '~';
      sflag = 1;
      return ch;
    }

    //*************************************

    if (X >= 480 && X <= 510 && Y >= 205 && Y <= 225) // Condition For AC
    {
      hide_mouse();
      button_3d(480, 205, 510, 225, CLICKED, "AC", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4);
      show_mouse();
      ch = 'o';
      return ch;
    }
    /********************C*/    if (X >= 515 && X <= 545 && Y >= 205 && Y <= 225) // Condition For C
    {
      hide_mouse();
      button_3d(515, 205, 545, 225, CLICKED, "CE", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4);
      show_mouse();
      ch = 'a';
      return ch;
    }

    // ****************************************

    if (X >= 100 && X <= 150 && Y >= 205 && Y <= 230) // Condition For Sin
    {
      hide_mouse();
      button_3d(100, 205, 150, 230, CLICKED, "Sin", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0);
      show_mouse();
      ch = 's';
      return ch;
    }

    //***********************************

    if (X >= 160 && X <= 210 && Y >= 205 && Y <= 230) // Condition For Cos
    {
      hide_mouse();
      button_3d(160, 205, 210, 230, CLICKED, "Cos", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0);
      show_mouse();
      ch = 'c';
      return ch;
    }

    //***********************************

    if (X >= 515 && X <= 545 && Y >= 280 && Y <= 300) //inverse
    {
      hide_mouse();
      button_3d(515, 280, 545, 300, CLICKED, "inv", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0);
      show_mouse();
      ch = 'm';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 205 && Y <= 230) // Condition For Tan
    {
      hide_mouse();
      button_3d(220, 205, 270, 230, CLICKED, "Tan", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0);
      show_mouse();
      ch = 't';
      return ch;
    }

    //*********************************** */
    if (X >= 100 && X <= 150 && Y >= 250 && Y <= 275) // Condition For sin^-1
    {
      hide_mouse();
      button_3d(100, 250, 150, 275, CLICKED, "sin^-1", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0);
      show_mouse();
      ch = 'i';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 250 && Y <= 275) // Condition For cos^-1
    {
      hide_mouse();
      button_3d(160, 250, 210, 275, CLICKED, "cos^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0);
      show_mouse();
      ch = 'j';
      return ch;
    }
    //**************************

    if (X >= 430 && X <= 460 && Y >= 350 && Y <= 370) // Condition For MR
    {
      hide_mouse();
      button_3d(430, 350, 460, 370, CLICKED, "MR", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);
      show_mouse();
      ch = '?';
      return ch;
    }
    if (X >= 390 && X <= 420 && Y >= 350 && Y <= 370) // Condition For M-
    {
      hide_mouse();
      button_3d(390, 350, 420, 370, CLICKED, "M-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
      show_mouse();
      ch = '<';
      return ch;
    }
    if (X >= 350 && X <= 380 && Y >= 350 && Y <= 370) // Condition For M+
    {
      hide_mouse();
      button_3d(350, 350, 380, 370, CLICKED, "M+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
      show_mouse();
      ch = '>';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 250 && Y <= 275) // Condition For tan^-1
    {
      hide_mouse();
      button_3d(220, 250, 270, 275, CLICKED, "tan^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0);
      show_mouse();
      ch = 'k';
      return ch;
    }
    //**************************

    if (X >= 100 && X <= 150 && Y >= 300 && Y <= 325) // Condition For ln
    {
      hide_mouse();
      button_3d(100, 300, 150, 325, CLICKED, "ln", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0);
      show_mouse();
      ch = 'n';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 300 && Y <= 325) // Condition For log
    {
      hide_mouse();
      button_3d(160, 300, 210, 325, CLICKED, "log", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(160, 300, 210, 325, UNCLICKED, "log", 0);
      show_mouse();
      ch = 'l';
      return ch;
    }
    //**************************

    if (X >= 220 && X <= 270 && Y >= 300 && Y <= 325) // Condition For X^2
    {
      hide_mouse();
      button_3d(220, 300, 270, 325, CLICKED, "x^2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0);
      show_mouse();
      ch = 'p';
      return ch;
    }
    if (X >= 100 && X <= 150 && Y >= 350 && Y <= 370) // Condition For deg
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, CLICKED, "deg", 15);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
      show_mouse();
      ch = 'd';
      flagp = flag;
      flag = ch;
      return ch;
    } 
//**************************
    if (X >= 160 && X <= 210 && Y >= 350 && Y <= 370) // Condition For rad
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, CLICKED, "rad", 15);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 15);
      show_mouse();
      ch = 'r';
      flagp = flag;
      flag = ch;

      return ch;
    }
    if (X >= 220 && X <= 270 && Y >= 350 && Y <= 370) // Condition For gra
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, CLICKED, "gra", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 15);
      show_mouse();
      ch = 'g';
      flagp = flag;
      flag = ch;
      return ch;

    }
    if ((X >= 480 && X <= 545 && Y >= 350 && Y <= 370) || (X >= 575 && X <= 595 && Y >= 23 && Y <= 40)) //OFF
    {
      free(mem);
      exit(0);
    }
    if (X >= 108 && X <= 208 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, CLICKED, "DEC", 15);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
      show_mouse();
      ch = 'u';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 218 && X <= 318 && Y >= 140 && Y <= 160) // Condition For oct
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, CLICKED, "OCT", 15);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 15);
      show_mouse();
      ch = 'v';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 328 && X <= 428 && Y >= 140 && Y <= 160) // Condition For hex
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, CLICKED, "HEX", 15);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 15);
      show_mouse();
      ch = 'w';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 438 && X <= 538 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, CLICKED, "BIN", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 15);
      show_mouse();
      ch = 'x';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 480 && X <= 510 && Y >= 280 && Y <= 300) {
      hide_mouse();
      button_3d(480, 280, 510, 300, CLICKED, "sqrt", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0);
      show_mouse();
      ch = 'q';
      return ch;
    }

  } while (kbhit() == 0);
  ch = getch();
  return ch;
}

//***********************************************
// *
// This function performs the Calculations *
// *
//***********************************************
double add(double x, double y, char ch) {
  switch (ch) {
  case '+':
    y = x + y;
    break;
  case '-':
    y = x - y;
    break;
  case '*':
    y = x * y;
    break;
  case '/':
    y = x / y;
  }
  return y;
}

double angle_conv(double no) {
  if (flagp == 'd') {
    if (flag == 'r') {
      no = no * PI / 180;
    }
    if (flag == 'g') {
      no = no * 1.1111111;
    }
  } else if (flagp == 'r') {
    if (flag == 'd') {
      no = no * 180 / PI;
    }
    if (flag == 'g') {
      no = no * 180 / PI * 1.1111111;
    }
  } else if (flagp == 'g') {
    if (flag == 'r') {
      no = no / (180 * 1.1111111) * PI;
    }
    if (flag == 'd') {
      no = no / 1.1111111;
    }
  }
  return (no);
}

void basecng(double y, double pnt1) {
  char str[17];
  if (pnt1 != 0) {
    gotoxy(row, col);
    printf("The trial version does not support this feature");
    getch();
    bflag = 'u';
    bflagp = '0';
    main();
  }
  if (bflagp != 'u') {
    gotoxy(row, col);
    printf("The trial version does not support this feature ");
    getch();
    bflagp = '0';
    bflag = 'u';
    main();
  }
  switch (bflag) {
  case 'v':
    itoa(y, str, 8);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    break;

  case 'w':
    itoa(y, str, 16);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    // getch();
    break;

  case 'x':
    itoa(y, str, 2);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    // getch();
    bflagp = '0';
    break;
  }
  bflag = 'u';
}
 




// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.cpp"
using namespace std;

int main()
{
    login userLogin;
    string userChoice;
    cout << "\t\t\t_____________________________________________\n\n\n";
    cout << "\t\t\t         Welcome to the NEMO 2023 Login!       \n\n";
    cout << "\t\t\t_________           Menu           __________\n\n";
    cout << "\t | Press 1 to LOGIN                              |" << endl;
    cout << "\t | Press 2 to REGISTER                           |" << endl;
    cout << "\t | Press 3 if you forgot PASSWORD                |" << endl;
    cout << "\t | Press 4 to EXIT                               |" << endl;
    cout << "\n\t\t\t Please Enter your choice: ";
    cin >> userChoice;
    cout << endl;

    if (userChoice == "1")
    {
        userLogin.Login();
        main();
    }
    else if (userChoice == "2")
    {
        userLogin.Registration();
        main();
    }
    else if (userChoice == "3")
    {
        userLogin.ForgotPassword();
        main();
    }
    else if (userChoice == "4")
    {
        cout << "\t\t\t Goodbye! \n\n";
    }
    else
    {
        system("cls");
        cout << "\t\t\t Please select from the options above\n";
        main();
    }
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.h"
using namespace std;

void login::Login()
{
    string count;
    string username, password, id, recordPass, recordSecurity;
    system("cls");
    cout << "\n\t\t\t Please enter the username and password: " << endl;
    cout << "\t\t\t USERNAME: ";
    cin >> username;
    cout << "\t\t\t PASSWORD: ";
    cin >> password;

    string loginHash = password;
    hash<string> mystdhash;
    int loginHashPassword = mystdhash(loginHash);

    ifstream input("data.txt");

    while (input >> id >> recordPass >> recordSecurity)
    {
        if (id == username && stoi(recordPass) == loginHashPassword)
        {
            count = "1";
            system("cls");
        }
    }
    input.close();
    if (count == "1")
    {
        cout << username << "\nLogin successful!\n";
        string choice = "1";
        while (choice != "2")
        {
            cout << "\t\t\t_____________________________________________\n\n\n";
            cout << "\t\t\t         Welcome to the NEMO 2023 Login!         \n\n";
            cout << "\t\t\t_______ Currently Logged In: " << username << " ________\n\n";
            cout << "\t\t\t_________           Menu           __________\n\n";
            cout << "\t | Press 1 to PLAY GAME                              |" << endl;
            cout << "\t | Press 2 to LOGOUT                                 |" << endl;
            cout << "\n\t\t\t Please Enter your choice: ";
            cin >> choice;
            cout << endl;

            if (choice == "1")
            {
                system("cls");
                DrunkGame();
            }
            else if (choice == "2")
            {
                system("cls");
                cout << "Logging out" << endl;
            }
            else
            {
                system("cls");
                cout << "Choice invalid, try again";
            }
        }
    }
    else
    {
        system("cls");
        cout << "\n Username or password is incorrect, please try again or register\n";
    }
}

void login::Registration()
{
    string regUser, regPassword, regId, regPass, securityQuestion, regSecure, regCount;
    system("cls");
    cout << "\n\t\t\t Enter Username: ";
    cin >> regUser;
    cout << "\t\t\t Enter Password: ";
    cin >> regPassword;
    cout << "\t\t\t Security Question: What was your favorite childhood movie?: ";
    cin.ignore();
    getline(cin, securityQuestion);

    string hashing = regPassword;
    hash<string> mystdhash;
    int hashPassword = mystdhash(hashing);

    string secureHashing = securityQuestion;
    hash<string> mystdhash2;
    int securityHash = mystdhash2(secureHashing);

    ifstream input("data.txt");
    input.seekg(0, ios::end);

    if (input.tellg() == 0)
    {
        ofstream f1("data.txt", ios::app);
        f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
        system("cls");
        cout << "\n\t\t\t Registration successful!\n";
        return;
    }
    else
    {
        ifstream input("data.txt");
        while (input >> regId >> regPass >> regSecure)
        {
            if (regUser == regId)
            {
                string decision;
                cout << "\n\t\tUsername already taken.\n";
                cout << "\t\tEnter 1 to enter a new one\n";
                cout << "\t\tEnter 2 to go back to the menu\n";
                cout << "\n\t\tEnter choice: ";
                cin >> decision;

                if (decision == "1")
                {
                    Registration();
                }
                else if (decision == "2")
                {
                    system("cls");
                    cout << "\tReturning to menu\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tInvalid Entry, returning to menu." << endl;
                    return;
                }
            }
            else
            {
                regCount = "1";
            }
        }
        if (regCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
            system("cls");
            cout << "\n\t\t\t Registration successful!\n";
            return;
        }
    }
}

void login::DrunkGame()
{
    srand(time(0));
    const int size = 60;
    cout << "Enter a letter to begin \n ";
    char x;
    cin >> x;
    int position = size / 2;
    while (true)
    {
        cout << "|START|";
        for (int i = 0; i < size; i++)
        {
            if (i == position)
                cout << x;
            else
                cout << " ";
        }
        cout << "|END|" << endl;
        int move = rand() % 3 - 1;
        position = position + move;
        if (position < 1)
        {
            cout << "Guess you were too drunk to make it to the end..." << endl;
            break;
        }
        if (position > size - 1)
        {
            cout << "You might be drunk, but you made it to the end!" << endl;
            break;
        }
        for (int sleep = 0; sleep < 1000000; ++sleep)
            ;
    }
    system("pause");
    system("cls");
}

void login::ForgotPassword()
{
    string forgotChoice, count, secondCount;
    system("cls");
    cout << "\n\t\t\tPress 1 to enter USERNAME\n";
    cout << "\t\t\tPress 2 to go back to MENU\n";
    cout << "\n\t\t\tEnter choice: ";
    cin >> forgotChoice;

    if (forgotChoice == "1")
    {
        string user, userSecurity, forgotId, forgotPass, forgotSecurity;
        int newHashPassword, forgotSecHash;
        system("cls");
        cout << "\n\t\tEnter USERNAME: ";
        cin >> user;
        cout << endl;

        ifstream input("data.txt");
        while (input >> forgotId >> forgotPass >> forgotSecurity)
        {
            if (user == forgotId)
            {
                cout << "\n\t\tUser found\n\t\tSecurity Question: What was your favorite childhood movie?: ";
                cin.ignore();
                getline(cin, userSecurity);
                cout << endl;

                string hashing = userSecurity;
                hash<string> mystdhash;
                forgotSecHash = mystdhash(hashing);

                if (stoi(forgotSecurity) == forgotSecHash)
                {
                    system("cls");
                    string newPass;
                    cout << "\t\tSecurity Question correct\n";
                    cout << "\n\t\tEnter new PASSWORD: ";
                    cin >> newPass;

                    string newPassHash = newPass;
                    hash<string> mystdhash2;
                    newHashPassword = mystdhash2(newPassHash);

                    count = "1";
                    break;
                }
                else
                {
                    string incorrectChoice;
                    system("cls");
                    cout << "\t\tSecurity Question incorrect\n";
                    cout << "\t\tPress 1 to Re-Enter\n\t\tPress 2 to return to MENU\n";
                    cout << "\n\t\tEnter choice: ";
                    cin >> incorrectChoice;

                    if (incorrectChoice == "1")
                    {
                        ForgotPassword();
                    }
                    if (incorrectChoice == "2")
                    {
                        system("cls");
                        cout << "\tReturning to MENU\n";
                        return;
                    }
                    else
                    {
                        system("cls");
                        cout << "\tInvalid answer... Returning to menu\n";
                        return;
                    }
                }
            }
            else
            {
                string newChoice;
                system("cls");
                cout << "\t\tUser not found\n";
                cout << "\t\tPress 1 to Re-Enter USERNAME\n\t\tPress 2 to return to MENU\n";
                cout << "\n\t\tEnter choice: ";
                cin >> newChoice;
                if (newChoice == "1")
                {
                    ForgotPassword();
                }
                else if (newChoice == "2")
                {
                    system("cls");
                    cout << "\tReturning to MENU\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tChoice invalid... Returning to MENU\n";
                    return;
                }
            }
        }
        input.close();
        if (count == "1")
        {
            DeleteLine(user);
            secondCount = "1";
        }
        if (secondCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << user << ' ' << newHashPassword << ' ' << forgotSecHash << endl;
            system("cls");
            cout << "\t\t\t Your password has been updated!\n";
            return;
        }
    }
    else if (forgotChoice == "2")
    {
        system("cls");
        cout << "\tReturning to MENU\n";
        return;
    }
    else
    {
        system("cls");
        cout << "\tChoice invalid... Try again\n";
        ForgotPassword();
    }
}

void login::DeleteLine(string userDelete)
{
    string line;
    ifstream myFile;
    myFile.open("data.txt");
    ofstream temp;
    temp.open("temp.txt");
    while (getline(myFile, line))
    {
        if (line.substr(0, userDelete.size()) != userDelete)
        {
            temp << line << endl;
        }
    }
    myFile.close();
    temp.close();
    remove("data.txt");
    rename("temp.txt", "data.txt");
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#pragma once
#include <string.h>
using namespace std;

class login
{
private:
    void DrunkGame();
    void DeleteLine(string username);

public:
    void Login();
    void Registration();
    void ForgotPassword();
};


// Autor : Nemonet TYP
// Title: Encryption and Decryption project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
using namespace std;

int main()
{
   int i, x;
   char str[100];

   cout << "Please enter a string:\t";
   cin >> str;

   cout << "\nPlease choose following options:\n";
   cout << "1 = Encrypt the string.\n";
   cout << "2 = Decrypt the string.\n";
   cin >> x;

   //using switch case statements
   switch(x)
   {
      //first case for encrypting a string
      case 1:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
            str[i] = str[i] + 2; //the key for encryption is 3 that is added to ASCII value

         cout << "\nEncrypted string: " << str << endl;
         break;

      //second case for decrypting a string
      case 2:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
         str[i] = str[i] - 2; //the key for encryption is 3 that is subtracted to ASCII value

      cout << "\nDecrypted string: " << str << endl;
      break;

      default:
         cout << "\nInvalid Input !!!\n";
   }
   return 0;
}


/*
	project status : 1
 	Date : Oct 11, 2022
	Author : Easter Maxwell
	co-factor : The Young Programmer Nemonet (Nov 16, 2022)
*/

/*'Error --1' is just a random error message*/

//control number output
#include <iomanip>   

//for system operations
#include <windows.h>

#include <iostream>

using namespace std;

void standard_output()
{
	int fahr;
	int order;
	int celsius;
	int lower_value;
	int upper_value;

	cout << '\n';
	cout << "[+]Enter Order value : ";
	cin  >> order;

	cout << '\n';
	cout << "[+]Enter Lower Value : ";
	cin  >> lower_value;

	cout << '\n';
	cout << "[+]Enter Upper Value : ";
	cin  >> upper_value;

	/*enables 'fahr' to start printing from the lowest value*/
	fahr = lower_value;

	cout << '\n';
	cout << "\t\t\t\t\t         ";
	cout << "--- Temperature ---" << '\n';

	cout << '\n';
	cout << "\t\t\t\t\t    "
	     << "+----------------------------+"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "| Fahrenheit       Celsius   |"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "+--------------|-------------+";

	while (fahr <= upper_value)
	{
		/*Formula (Fahrenheit to Celsius)*/
		celsius = 5 * (fahr - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t    ";

		cout << "|     " << fahr << "\t\t " << celsius << "     |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+--------------|-------------+";

		/*increments fahrenheit by the 'order' value*/
		fahr = fahr + order;
	}

}

void user_specific_output()
{
	string option;
	float fahr_input;
	float fahr_value;
	float celsius_input;
	float celsius_value;

	cout << "\t\t\t\t\t       "
		 << "--- Available Options ---" << '\n';

	cout << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press F to convert temperature from Fahrenheit to celsius |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| --------------------------------------------------------- |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press C to convert temperature from Celsius to Fahrenheit |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+";

	cout << "\n\n";
	cout << "[:]Enter Option : ";
	cin  >> option;

	if (option == "C" || option == "c")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Celsius : ";
		cin  >> celsius_input;

		/*Formula (Celsius to Fahrenheit)*/
		fahr_value = (9.0 / 5.0) * celsius_input + 32;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|   Celsius       Fahrenheit |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << celsius_input << "\t   |      " << setprecision(3) << fahr_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";

	}

	else if (option == "F" || option == "f")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Fahrenheit : ";
		cin  >> fahr_input;

		/*Formula (Fahrenheit to Celsius)*/
		celsius_value = 5 * (fahr_input - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|  Fahrenheit       Celsius  |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << fahr_input << "\t   |    " << setprecision(3) << celsius_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

}

int main()
{
	string user_input;

	cout << "\t\t\t\t\t    ";
	cout << "--- TEMPERATURE CALCULATOR ---";
	cout << "\n\n";
	cout<<"\n\t\tDeveloped By:";
    	cout<<" Easter Maxwell (Oct 11, 2022)";
    	cout<<"\n\t\t In Collaboration with:";
    	cout<<" Nemonet (TYP) (Nov 16, 2022)";
    	cout<<"\n\n\n\n";

	cout << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press 0 to display standard  input |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| ---------------------------------- |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press X to display specific output |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\n\n";

	cout << "[:]Enter option : ";
	cin  >> user_input;

	if (user_input == "0" || user_input == "o" || user_input == "O")
	{
		Sleep(500);

		/*display this function*/
		standard_output();
	}

	else if (user_input == "X" || user_input == "x" || user_input == "*")
	{
		Sleep(500);

		/*display this function*/
		user_specific_output();
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

	return 0;

}



#include <iostream>

using namespace std;

//addition
long double add(long double num1, long double num2)
{
    long double result;
    {
        result = num1 + num2;
    }
    return result;
}
//subtraction
long double sub(long double num1a, long double num2a)
{
    long double resulta;
    {
        resulta = num1a - num2a;
    }
    return resulta;
}
//multiplication
long double mltp(long double num1b, long double num2b)
{
    long double resultb;
    {
        resultb = num1b * num2b;
    }
    return resultb;
}
//division
long double dv(long double num1c, long double num2c)
{
    long double resultc;
    {
        resultc = num1c / num2c;
    }
    return resultc;
}
//exponent
long double power(long double base, long double exponent)
{
    long double resultd = 1;
    for(long double i = 0; i < exponent; i++)
    {
       resultd = base * resultd; 
    }
    return resultd;
}

int panel;
long double a;
long double b;

void ctrl_panel()
{
    cout << "Control Panel\n\nOperators: \n\n1.Addition\n2.Subtraction\n3.Multiplication\n4.Division\n5.Exponent\n6.Multiplication Table\n7.Celcius to Farenheit\n8.Farenheit to Celcius\n\n0.Back\n";
    cin >> panel;
    switch(panel)
    {
        case 0:
            return;
            break;
        case 1:
            cout << "Addition\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << add(a, b) << endl << endl;
            break;
        case 2:
            cout << "Subtraction\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << sub(a, b) << endl << endl;
            break;
        case 3:
            cout << "Multiplication\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << mltp(a, b) << endl << endl;
            break;
        case 4:
            cout << "Division\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << dv(a, b) << endl << endl;
            break;
        case 5:
            cout << "Exponent\n\nBase: \n";
            cin >> a;
            cout << "Power: \n";
            cin >> b;
            cout << power(a, b) << endl << endl;
            break;
        case 7:
            cout << "Celcius to Farenheit\n\nTemperature: \n";
            cin >> a;
            cout << a * 1.8 + 32 << "℉" << endl << endl;
            break;
        case 8:
            cout << "Farenheit to Celcius\n\nTemperature: \n";
            cin >> a;
            cout << (a - 32) * 5/9 << "℃" << endl << endl;
            break;
        case 6:
            cout << "Multiplication table\n\nPlease select a number you want to show the table of: \n";
            int num;
            cin >> num;
            int num2 = 0;
            cout << "Range: \n";
            int range;
            cin >> range;
    
            for(int i = 0; i < range; i++)
            {
                num2++;
                cout << num << " x " << num2 << " = " << num * num2 << endl << endl;
            }
            break; 
        }
}

int main()
{
    int choice;
    do
    {
        cout << "Welcone to NemoNet Calculator\n\n1.Enter\n0.Quit\n\n";
        cout << " contact NemoNet on: \n\nGitHub\n";
        cin >> choice;
        
        switch(choice)
        {
            case 1:
                ctrl_panel();
                break;
            case 0:
                return 0;
                break;
        }
    }
    while(choice != 0);
}


// Autor : Nemonet TYP
// Title: Supermarket Billing System project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL



#include<iostream>
#include<windows.h>
#include<conio.h>
#include<fstream>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iomanip>
using namespace std;
//global variable declaration
int k=7,r=0,flag=0;
COORD coord = {0, 0};

void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
struct date
{
    int mm,dd,yy;
};

ofstream fout;
ifstream fin;

class item
{
    int itemno;
    char name[25];
    date d;
public:
    void add()
    {
        cout<<"\n\n\tItem No: ";
        cin>>itemno;
        cout<<"\n\n\tName of the item: ";
        cin>>name;
//gets(name);
        cout<<"\n\n\tManufacturing Date(dd-mm-yy): ";
        cin>>d.mm>>d.dd>>d.yy;
    }
    void show()
    {
        cout<<"\n\tItem No: ";
        cout<<itemno;
        cout<<"\n\n\tName of the item: ";
        cout<<name;
        cout<<"\n\n\tDate : ";
        cout<<d.mm<<"-"<<d.dd<<"-"<<d.yy;
    }
    void report()
    {
        gotoxy(3,k);
        cout<<itemno;
        gotoxy(13,k);
        puts(name);
    }
    int retno()
    {
        return(itemno);

    }

};

class amount: public item
{
    float price,qty,tax,gross,dis,netamt;
public:
    void add();
    void show();
    void report();
    void calculate();
    void pay();
    float retnetamt()
    {
        return(netamt);
    }
} amt;

void amount::add()
{
    item::add();
    cout<<"\n\n\tPrice: ";
    cin>>price;
    cout<<"\n\n\tQuantity: ";
    cin>>qty;
    cout<<"\n\n\tTax percent: ";
    cin>>tax;
    cout<<"\n\n\tDiscount percent: ";
    cin>>dis;
    calculate();
    fout.write((char *)&amt,sizeof(amt));
    fout.close();
}
void amount::calculate()
{
    gross=price+(price*(tax/100));
    netamt=qty*(gross-(gross*(dis/100)));
}
void amount::show()
{
    fin.open("itemstore.dat",ios::binary);
    fin.read((char*)&amt,sizeof(amt));
    item::show();
    cout<<"\n\n\tNet amount: ";
    cout<<netamt;
    fin.close();
}

void amount::report()
{
    item::report();
    gotoxy(23,k);
    cout<<price;
    gotoxy(33,k);
    cout<<qty;
    gotoxy(44,k);
    cout<<tax;
    gotoxy(52,k);
    cout<<dis;
    gotoxy(64,k);
    cout<<netamt;
    k=k+1;
    if(k==50)
    {
        gotoxy(25,50);
        cout<<"PRESS ANY KEY TO CONTINUE...";
        getch();
        k=7;
        system("cls");
        gotoxy(30,3);
        cout<<" ITEM DETAILS ";
        gotoxy(3,5);
        cout<<"NUMBER";
        gotoxy(13,5);
        cout<<"NAME";
        gotoxy(23,5);
        cout<<"PRICE";
        gotoxy(33,5);
        cout<<"QUANTITY";
        gotoxy(44,5);
        cout<<"TAX";
        gotoxy(52,5);
        cout<<"DEDUCTION";
        gotoxy(64,5);
        cout<<"NET AMOUNT";
    }
}

void amount::pay()
{
    show();
    cout<<"\n\n\n\t\t*********************************************";
    cout<<"\n\t\t                 DETAILS                  ";
    cout<<"\n\t\t*********************************************";
    cout<<"\n\n\t\tPRICE                     :"<<price;
    cout<<"\n\n\t\tQUANTITY                  :"<<qty;
    cout<<"\n\t\tTAX PERCENTAGE              :"<<tax;
    cout<<"\n\t\tDISCOUNT PERCENTAGE         :"<<dis;
    cout<<"\n\n\n\t\tNET AMOUNT              :Rs."<<netamt;
    cout<<"\n\t\t*********************************************";
}

int main()
{
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout<<setprecision(2);
    fstream tmp("temp.dat",ios::binary|ios::out);
menu:
    system("cls");
    gotoxy(25,2);
    cout<<"Super Market Billing ";
    gotoxy(25,3);
    cout<<"===========================\n\n";
    cout<<"\n\t\t1.Bill Report\n\n";
    cout<<"\t\t2.Add/Remove/Edit Item\n\n";
    cout<<"\t\t3.Show Item Details\n\n";
    cout<<"\t\t4.Exit\n\n";
    cout<<"\t\tPlease Enter Required Option: ";
    int ch,ff;
    float gtotal;
    cin>>ch;
    switch(ch)
    {
    case 1:
ss:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Details";
        gotoxy(25,3);
        cout<<"================\n\n";
        cout<<"\n\t\t1.All Items\n\n";
        cout<<"\t\t2.Back to Main menu\n\n";
        cout<<"\t\tPlease Enter Required Option: ";
        int cho;
        cin>>cho;
        if(cho==1)
        {
            system("cls");
            gotoxy(30,3);
            cout<<" BILL DETAILS ";
            gotoxy(3,5);
            cout<<"ITEM NO";
            gotoxy(13,5);
            cout<<"NAME";
            gotoxy(23,5);
            cout<<"PRICE";
            gotoxy(33,5);
            cout<<"QUANTITY";
            gotoxy(44,5);
            cout<<"TAX %";
            gotoxy(52,5);
            cout<<"DISCOUNT %";
            gotoxy(64,5);
            cout<<"NET AMOUNT";
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            gtotal=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    amt.report();
                    gtotal+=amt.retnetamt();
                    ff=0;
                }
                if(ff!=0) gtotal=0;
            }
            gotoxy(17,k);
            cout<<"\n\n\n\t\t\tGrand Total="<<gtotal;
            getch();
            fin.close();
        }
        if(cho==2)
        {
            goto menu;
        }
        goto ss;
    case 2:
db:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Editor";
        gotoxy(25,3);
        cout<<"=================\n\n";
        cout<<"\n\t\t1.Add Item Details\n\n";
        cout<<"\t\t2.Edit Item Details\n\n";
        cout<<"\t\t3.Delete Item Details\n\n";
        cout<<"\t\t4.Back to Main Menu ";
        int apc;
        cin>>apc;
        switch(apc)
        {
        case 1:
            fout.open("itemstore.dat",ios::binary|ios::app);
            amt.add();
            cout<<"\n\t\tItem Added Successfully!";
            getch();
            goto db;

        case 2:
            int ino;
            flag=0;
            cout<<"\n\n\tEnter Item Number to be Edited :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            fout.open("itemstore.dat",ios::binary|ios::app);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            r=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    int x=amt.item::retno();
                    if(x==ino)
                    {
                        flag=1;
                        fout.seekp(r*sizeof(amt));
                        system("cls");
                        cout<<"\n\t\tCurrent Details are\n";
                        amt.show();
                        cout<<"\n\n\t\tEnter New Details\n";
                        amt.add();
                        cout<<"\n\t\tItem Details editted";
                    }
                }
                r++;
            }
            if(flag==0)
            {
                cout<<"\n\t\tItem No does not exist...Please Retry!";
                getch();
                goto db;
            }
            fin.close();
            getch();
            goto db;

        case 3:
            flag=0;
            cout<<"\n\n\tEnter Item Number to be deleted :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
//fstream tmp("temp.dat",ios::binary|ios::out);
            fin.seekg(0);
            while(fin.read((char*)&amt, sizeof(amt)))
            {
                int x=amt.item::retno();
                if(x!=ino)
                    tmp.write((char*)&amt,sizeof(amt));
                else
                {
                    flag=1;
                }
            }
            fin.close();
            tmp.close();
            fout.open("itemstore.dat",ios::trunc|ios::binary);
            fout.seekp(0);
            tmp.open("temp.dat",ios::binary|ios::in);
            if(!tmp)
            {
                cout<<"Error in File";
                goto db;
            }
            while(tmp.read((char*)&amt,sizeof(amt)))
                fout.write((char*)&amt,sizeof(amt));
            tmp.close();
            fout.close();
            if(flag==1)
                cout<<"\n\t\tItem Succesfully Deleted";
            else if (flag==0)
                cout<<"\n\t\tItem does not Exist! Please Retry";
            getch();
            goto db;
        case 4:
            goto menu;
        default:
            cout<<"\n\n\t\tWrong Choice!!! Retry";
            getch();
            goto db;
        }
    case 3:
        system("cls");
        flag=0;
        int ino;
        cout<<"\n\n\t\tEnter Item Number :";
        cin>>ino;
        fin.open("itemstore.dat",ios::binary);
        if(!fin)
        {
            cout<<"\n\nFile Not Found...\nProgram Terminated!";
            goto menu;
        }
        fin.seekg(0);
        while(fin.read((char*)&amt,sizeof(amt)))
        {
            int x=amt.item::retno();
            if(x==ino)
            {
                amt.pay();
                flag=1;
                break;
            }
        }
        if(flag==0)
            cout<<"\n\t\tItem does not exist....Please Retry!";
        getch();
        fin.close();
        goto menu;
    case 4:
        system("cls");
        gotoxy(20,20);
        cout<<"ARE YOU SURE, YOU WANT TO EXIT (Y/N)?";
        char yn;
        cin>>yn;
        if((yn=='Y')||(yn=='y'))
        {
            gotoxy(12,20);
            system("cls");
            cout<<"************************** THANKS **************************************";
            getch();
            exit(0);
        }
        else if((yn=='N')||(yn=='n'))
            goto menu;
        else
        {
            goto menu;
        }
    default:
        cout<<"\n\n\t\tWrong Choice....Please Retry!";
        getch();
        goto menu;
    }
    return 0;
}


/*This C++ PROGRAM is developed by NemonET TYP and 
special right is given to TEAM TYP for educational purpose  */
//Don't copy source code without permission


#include <iostream>
#include <stdlib.h>

using namespace std;

void calculateGPA();
void calculateCGPA();
void method();

int main()
{
    system("cls");
    int input;
    cout<<"--------------------------------------------------------------------------"<<endl;
    cout<<"                    GPA & CGPA Calculator (Developed by Nemo)             "<<endl;
    cout<<"--------------------------------------------------------------------------\n"<<endl;
    cout<<"            MENU:"<<endl;
    cout<<"                   1. Calculate GPA (Grade Point Average)"<<endl;
    cout<<"                   2. Calculate CGPA (Cummulative Grade Point Average)"<<endl;
    cout<<"                   3. Method that is applied here for calclating GPA & CGPA"<<endl;
    cout<<"                   4. Exit Application"<<endl;
    cout<<"--------------------------------------------------------------------------"<<endl;
    sub:
    cout<<"Enter your choice: ";
    cin>>input;
    switch(input)
    {
        case 1:
                calculateGPA();
                break;

        case 2:
                calculateCGPA();
                break;
        case 3:
                method();
                break;
        case 4:
                exit(EXIT_SUCCESS);
                break;
        default:
            cout<<"You have entered wrong input.Try again!\n"<<endl;
            goto sub;
            break;
    }
}

void calculateGPA()
{
    int q;
    system("cls");
    cout<<"-------------- GPA Calculating -----------------"<<endl;
    cout<<" How many subject's points do you want to calculate? : ";
    cin>>q;

    float credit [q];
    float point [q];

    cout<<endl;
    for(int i=0;i<q;i++)
    {
        cout<<"Enter the credit for the subject "<<i+1<<": ";
        cin>>credit[i];
        cout<<endl;
        cout<<"Enter the point of the subject "<<i+1<<": ";
        cin>>point[i];
        cout<<"-----------------------------------\n\n"<<endl;
    }

    float sum=0;
    float tot;
    for(int j=0;j<q;j++)
    {
        tot=credit[j]*point[j];
        sum=sum+tot;
    }

    float totCr=0;
    for(int k=0;k<q;k++)
    {
        totCr=totCr+credit[k];
    }

    cout<<"\n\n\nTotal Points: "<<sum<<" . Total Credits: "<<totCr<<" .Total GPA: "<<sum/totCr<<" ."<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
}
void calculateCGPA()
{
    system("cls");
    int l;
    cout<<"-------------- CGPA Calculating -----------------\n\n"<<endl;
    cout<<"How many semester results do you want input? :";
    cin>>l;
    cout<<"\n\n"<<endl;
    float semrs[l];
    int i;

    for(i=0;i<l;i++)
    {
        cout<<" Enter Semester "<<i+1<<" Result(GPA): ";
        cin>>semrs[i];
        cout<<"\n"<<endl;
    }

    float semtot=0;
    for(int j=0;j<l;j++)
    {
        semtot=semtot+semrs[j];
    }

    cout<<"******** Your CGPA is "<<semtot/l<<" **********"<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateCGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }

}

void method()
{
    system("cls");
    cout<<"--------------- Method of Calculating GPA & CGPA ---------------\n\n"<<endl;
    cout<<" GPA= Sum of (Credit*Point) / total of credits \n"<<endl;
    cout<<" CGPA=  Sum of GPA / number of semesters "<<endl;
    cout<<"-----------------------------------------------------------------\n\n"<<endl;

    sub:
    int inmenu;
    cout<<"1. Go Back to Main Menu"<<endl;
    cout<<"2. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                main();
                break;
        case 2:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
};


//DEVELOPED BY Nemonet TYP ‍‍‍‍‍‍‍‍‍‍‍‍

//C++ PROJECT

//START OF THE PROGRAM FOR HOTEL MANAGEMENT

#include<iostream>
#include<conio.h>
#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<dos.h>

using namespace std;

//START OF CLASS



class hotel
{

int room_no;
char name[30];
char address[50];
char phone[10];

public:

void main_menu();		//to display the main menu
void add();			//to book a room
void display(); 		//to display the customer record
void rooms();			//to display alloted rooms
void edit();			//to edit the customer record
int check(int);			//to check room status
void modify(int);		//to modify the record
void delete_rec(int);		//to delete the record
void bill(int);                 //for the bill of a record
     };
    //END OF CLASS



//FOR DISPLAYING MAIN MENU



void hotel::main_menu()
{

int choice;
while(choice!=5)
{

  system("cls");
cout<<"\n\t\t\t\t**************************";
cout<<"\n\t\t\t\t SIMPLE HOTEL MANAGEMENT  ";
cout<<"\n\t\t\t\t      * MAIN MENU *";
cout<<"\n\t\t\t\t**************************";
cout<<"\n\n\n\t\t\t1.Book A Room";
cout<<"\n\t\t\t2.Customer Records";
cout<<"\n\t\t\t3.Rooms Allotted";
cout<<"\n\t\t\t4.Edit Record";
cout<<"\n\t\t\t5.Exit";
cout<<"\n\n\t\t\tEnter Your Choice: ";
cin>>choice;

switch(choice)
{

case 1:	add();
break;

case 2: display();
break;

case 3: rooms();
break;

case 4:	edit();
break;

case 5: break;

default:
{

cout<<"\n\n\t\t\tWrong choice.....!!!";
cout<<"\n\t\t\tPress any key to   continue....!!";
getch();

}

}

}

}


//END OF MENU FUNCTION


//FUNCTION FOR BOOKING OF ROOM


void hotel::add()
{

  system("cls");
int r,flag;
ofstream fout("Record.dat",ios::app);

cout<<"\n Enter Customer Detalis";
cout<<"\n -----------------------";
cout<<"\n\n Room no: ";
cout<<"\n Total no. of Rooms - 50";
cout<<"\n Ordinary Rooms from 1 - 30";
cout<<"\n Luxury Rooms from 31 - 45";
cout<<"\n Royal Rooms from 46 - 50";
cout <<"\n Enter The Room no. you want to stay in :- "<<'\n';
cin>>r;

flag=check(r);

if(flag)
cout<<"\n Sorry..!!!Room is already booked";

else
{

room_no=r;
cout<<" Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone No: ";
cin>>phone;

fout.write((char*)this,sizeof(hotel));
cout<<"\n Room is booked...!!!";

}

cout<<"\n Press any key to continue.....!!";

getch();
fout.close();

}


//END OF BOOKING FUNCTION


//FUNCTION FOR DISPLAYING A PURTICULAR CUSTOMER`S RECORD





void hotel::display()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
int r,flag;

cout<<"\n Enter room No. for a particular customer`s details :- "<<'\n';
cin>>r;

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

  system("cls");
cout<<"\n Customer Details";
cout<<"\n -----------------";
cout<<"\n\n Room no: "<<room_no;
cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Phone no: "<<phone;
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room no. not found or vacant....!!";
cout<<"\n\n Press any key to continue....!!";

getch();
fin.close();
}


//END OF DISPLAY FUNCTION

//FUNCTION TO DISPLAY ALL ROOMS OCCUPIED


void hotel::rooms()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
cout<<"\n\t\t\t    List Of Rooms Allotted";
cout<<"\n\t\t\t    -----------------------";
cout<<"\n\n Room No.\tName\t\tAddress\t\t\t\tPhone No.\n";

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
cout<<"\n\n "<<room_no<<"\t\t"<<name;
cout<<"\t\t"<<address<<"\t\t"<<phone;

}

cout<<"\n\n\n\t\t\tPress any key to continue.....!!";
getch();
fin.close();

}


//FUNCTION FOR EDITING RECORDS AND FOR BILL


void hotel::edit()
{

  system("cls");

int choice,r;
cout<<"\n EDIT MENU";
cout<<"\n ----------";
cout<<"\n\n 1. Modify Customer Record";
cout<<"\n 2. Delete Customer Record";
cout<<"\n 3. Bill Of Customer";
cout<<"\n Enter your choice: ";

cin>>choice;
  system("cls");

cout<<"\n Enter room no: " ;
cin>>r;

switch(choice)
{

case 1:	modify(r);
break;

case 2:	delete_rec(r);
break;

case 3: bill(r);
break;

default: cout<<"\n Wrong Choice.....!!";

}
cout<<"\n Press any key to continue....!!!";

getch();
}


int hotel::check(int r)
{

int flag=0;

ifstream fin("Record.dat",ios::in);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

flag=1;
break;

}

}

fin.close();
return(flag);

}


//FUNCTION TO MODIFY CUSTOMERS RECORD


void hotel::modify(int r)
{

long pos,flag=0;

fstream file("Record.dat",ios::in|ios::out|ios::binary);

while(!file.eof())
{

pos=file.tellg();
file.read((char*)this,sizeof(hotel));

if(room_no==r)
{

cout<<"\n Enter New Details";
cout<<"\n ------------------";
cout<<"\n Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone no: ";
cin>>phone;
file.seekg(pos);
file.write((char*)this,sizeof(hotel));
cout<<"\n Record is modified....!!";
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room No. not found or vacant...!!";
file.close();

}


//END OF MODIFY FUNCTION


//FUNCTION FOR DELETING RECORD


void hotel::delete_rec(int r)
{

int flag=0;
char ch;
ifstream fin("Record.dat",ios::in);
ofstream fout("temp.dat",ios::out);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)

{

cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Pone No: "<<phone;
cout<<"\n\n Do you want to delete this record(y/n): ";
cin>>ch;

if(ch=='n')
fout.write((char*)this,sizeof(hotel));
flag=1;

}

else
fout.write((char*)this,sizeof(hotel));

}

fin.close();
fout.close();

if(flag==0)
cout<<"\n Sorry room No. not found or vacant...!!";

else
{

remove("Record.dat");
rename("temp.dat","Record.dat");

}

}


//END OF DELETE FUNCTION


//FUNCTION FOR CUSTOMER`S BILL

void hotel::bill(int r)
{

hotel h1;
ifstream f1;
 f1.open("record.dat",ios::in|ios::binary);

if(!f1)
 cout<<"cannot open";

 else
 {

  f1.read((char*)&h1,sizeof (hotel));
  while(f1)

  {

  f1.read((char*)&h1,sizeof(hotel));

  }

  if (h1.room_no == r)
  {

  if(h1.room_no>=1&&h1.room_no<=30)
  cout<<"your bill = 2000";

  else if (h1.room_no>=35&&h1.room_no<=45)
  cout<<"your bill = 5000" ;

  else
  cout<<"your bill = 7000";

  }

  else
  { cout<<"room no. not found";}

  }

  f1.close();
  getch();

}

//END OF BILLING FUNCTION

//START OF MAIN PROGARM


int main()
{

hotel h;

  system("cls");

cout<<"\n\t\t\t*****************************";
cout<<"\n\t\t\t* HOTEL MANAGEMENT PROJECT  *";
cout<<"\n\t\t\t*****************************";
cout<<"\n\n\t\tDeveloped By:";
cout<<"\t\t Nemonet";
cout<<"\n\t\t\t\t The Young Programmer (TYP)";
cout<<"\n\n\n\n\n\n\n\t\t\t\t\tPress any key to continue....!!";

getch();

h.main_menu();
return 0;
}

//END OF MAIN PROGRAM





#include <iostream>
using namespace std;
int main()
{
    char str[100];
   
   
    cout<<"Enter some text or numbers and see magic:-"<<endl<<endl;
    cout<<"______________________________________"<<endl<<endl;
    cin.getline(str,100);
    cout<<str;
    cout<<"\n______________________________________"<<endl<<endl;
   
    
    for(int b=0;str[b]!='\0';b++){
        
        switch(str[b])
    {
    case 'a':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'b':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'c':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'd':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'e':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'f':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'g':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'h':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'i':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'j':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'k':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'l':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'm':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'n':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'o':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'p':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'r':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 's':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 't':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'u':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'v':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #    ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'w':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'x':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'A':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'B':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'C':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'D':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'E':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'F':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'G':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'H':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'I':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'J':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'K':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'L':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'M':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'N':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'O':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'P':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'Q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'R':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'S':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 'T':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'U':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'V':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #   ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'W':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'X':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'Y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'Z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
        case '0':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }

    case '1':
        {
        cout<<"\n   #  ";
        cout<<"\n  ##  ";
        cout<<"\n   #  ";
        cout<<"\n   #  ";
        cout<<"\n #####";
        cout<<"\n \n   ";
        break;
        }
    case '2':
        {
        cout<<"\n  ###  ";
        cout<<"\n #   # ";
        cout<<"\n    #  ";
        cout<<"\n  #    ";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '3':
        {
        cout<<"\n ##### ";
        cout<<"\n    #  ";
        cout<<"\n   ##  ";
        cout<<"\n    #  ";
        cout<<"\n#####  ";
        cout<<"\n \n    ";
        break;
        }
    case '4':
        {
        cout<<"\n     # ";
        cout<<"\n   # # ";
        cout<<"\n  #  # ";
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n \n    ";
        break;
        }
    case '5':
        {
        cout<<"\n ######";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n      #";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '6':
        {
        cout<<"\n  #####";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '7':
        {
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n    #  ";
        cout<<"\n   #   ";
        cout<<"\n  #    ";
        cout<<"\n \n    ";
        break;
        }
    case '8':
        {
        cout<<"\n  #####";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '9':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n  ##### ";
        cout<<"\n      # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }
     
   case '.':
        {
        cout<<"\n  ## ";
        cout<<"\n #  # ";
        cout<<"\n  ## ";
        cout<<"\n \n     ";
        break;
        }
    default:
        {
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n \n ";
        break;
        }
    }    
    
    return 0;

    }
  }
 }
}

}
    cout<<"\t______________________________________"<<endl;
    cout << "\n\t       And if you liked it,        " << endl;
    cout << " \t   give a star on GitHub !   " << endl;
    cout << "  \t           Thank you!               " << endl;
    cout<<"\t______________________________________"<<endl<<endl;
}


//created by The Young Programmer 🏅aka NemoNet 🖥

#include <iostream>
using namespace std;
int main()
{
    int attemp = 1,ans,guess=0,_won=0,h=100,l=0;
    srand(time(0));
    ans = rand() % 100;
    cout<<"**** PLEASE READ INSTRUCTION ****"<<endl<<endl;
    cout << "NemoNet will generate"<<endl<<"any random number between 0-100"<<endl;
    cout<<"you have to guess the number"<<endl<<"you have 5 attempts / chanses to guess"<<endl<<endl;
    cout<<"After each wrong guess NemoNet will tell you"<<endl<<"Your guess is HIGH or LOW"<<endl;
    cout<<" BEST OF LUCK"<<endl;
while(attemp <= 5)
{
cout<<endl<<"attempts no. :- "<<attemp<<endl;
cout<<"enter the guess between 0 - 100 "<<endl;
cin>>guess;
if(guess < 0 || guess > 100){
  cout<<"INVALID GUESS!!"<<endl;
  continue;
}
else if(guess == ans){
   cout<<"CONGRATULATIONS YOU WON!! your guess "<<guess<<" is correct"<<endl;
   _won = 1;
   break;
   }
else if(guess < ans){
  cout<<"*** Your guess "<<guess<<" * LOW * "<<endl;
  l = guess;
}
else{
  cout<<"*** Your guess "<<guess<<"  * HIGH * "<<endl;
  h = guess;
}
cout<<"*Number is between "<<l<<" ---to---> "<<h<<endl;
attemp++;
}//loop end
cout<<"\n";
if(_won){
  cout<<"THANKS FOR PLAYING!! PLESE GIVE A STAR"<<endl;
}
else{
  cout<<"Sorry you lost! correct answer is: "<<ans<<endl<<"please play again and give A STAR"<<endl;
}
cout<<"\n\n";
cout<<"You can Contact NemoNet for more programming Games :-) \n";
cout<<"https://github.com/The-Young-Programmer";
}


/*-------------------------------------------------------------------------

          GUI Calculator

Programmer           : Nemonet TYP


Software Details
====================
Developed in   : C++
Compiler used  : CodeBlocks
OS             : Windows OS


License   : Protected (Please give the credit of programming to author.)


-------------------------------------------------------------------------------------*/



#include <iostream.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <string.h>
#include <dos.h>

// Window
#define TITLEBARHEIGHT 21
#define BORDERWIDTH 1


#define ADD 1
#define SUBTRACT 2
#define MULTIPLY 3
#define DIVIDE 4

/*--------------------- Global Data ---------------------*/

int ButtonId;
enum bool{false,true};
enum BUTTON{MOUSE_NORMAL = 0,MOUSE_LBUTTON=1,MOUSE_RBUTTON=2,MOUSE_MBUTTON=4};
enum BUTTON_STATUS
{
   BUTTON_STATUS_NORMAL,
   BUTTON_STATUS_DOWN
};

/*------------------------------------------------------
       Mouse Class
------------------------------------------------------*/
class Mouse

{
  private:

   int MouseXpos, MouseYpos;
   BUTTON MouseBtn;
   union REGS in,out;

  public:

   int InstallMouse();
   int ShowMouse();
   int HideMouse();
   void GetMouseStatus();
   BUTTON GetButton();
   int GetPosX();
   int GetPosY();
   void SetMousePosi(int &xpos, int &ypos);
   int MouseInside(int x1, int y1, int x2, int y2);
   void RestrictMousePtr(int x1, int y1, int x2, int y2);

};


 int Mouse::InstallMouse()
 {

  in.x.ax = 0;
  int86(51,&in,&out);
  return out.x.ax;

 }
 int Mouse::ShowMouse()
 {

  in.x.ax = 1;
  int86(51,&in,&out);
  return 1;

 }
 int Mouse::HideMouse()
 {

  in.x.ax = 2;
  int86(51,&in,&out);
  return 1;

 }
 void Mouse::GetMouseStatus()
 {

  in.x.ax = 3;
  int86(51,&in,&out);
  MouseXpos = out.x.cx;
  MouseYpos = out.x.dx;
  MouseBtn = out.x.bx;

 }
 BUTTON Mouse::GetButton()
 {
  return MouseBtn;
 }

 int Mouse::GetPosX()
 {
  return MouseXpos;
 }

 int Mouse::GetPosY()
 {
  return MouseYpos;
 }

 void Mouse::SetMousePosi(int &xpos, int &ypos)
 {
  in.x.ax = 4;
  in.x.cx = xpos;
  in.x.dx = ypos;
  int86(51,&in,&out);
 }
 int Mouse::MouseInside(int x1, int y1, int x2, int y2)
 {
  int x_pos, y_pos;
  in.x.ax = 3;
  int86(51,&in,&out);
  x_pos = out.x.cx;
  y_pos = out.x.dx;

  if(x_pos >= x1 && y_pos >= y1 && x_pos <= x2 && y_pos <= y2)
   return 1;
  else
   return 0;

 }
 void Mouse::RestrictMousePtr(int x1, int y1, int x2, int y2)
 {

  in.x.ax = 7;
  in.x.cx = x1;
  in.x.dx = x2;
  int86(51,&in,&out);

  in.x.ax = 8;
  in.x.cx = y1;
  in.x.dx = y2;
  int86(51,&in,&out);

 }


/*------------------------------------------------------
       End of Mouse Class
------------------------------------------------------*/


/*------------------------------------------------------
       TextBox Class
------------------------------------------------------*/

class TextBox
{

 private:

 int Alignment;

 int Left,Top,Width,Height;
 char Caption[50];

 public:

 TextBox(int left, int top, int width, int height, char caption[],int Align);
 void Draw();
 void SetText(char text[]);
 char *GetText();
 void Clear();
};

 TextBox::TextBox(int left, int top, int width, int height, char caption[],int Align)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  Alignment = Align;
    }


    void TextBox::Draw()
   {
  setfillstyle(SOLID_FILL,WHITE);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(DARKGRAY);
  rectangle(Left,Top,Left+Width,Top+Height);

  setcolor(BLACK);

  settextjustify(Alignment,TOP_TEXT);
  if(Alignment==LEFT_TEXT)
   outtextxy(Left+2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   if(Alignment==RIGHT_TEXT)
    outtextxy(Left+Width-2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   outtextxy(Left+(Width/2),Top+1+((Height/2)-(textheight(Caption)/2)),Caption);


   }


 void TextBox::SetText(char text[])
 {
  if (Left + textwidth(Caption) <= Left + Width - textwidth(" "))
  {
   strcat(Caption,text);
   Draw();
  }
 }

 char *TextBox::GetText()
 {
  return Caption;
 }

 void TextBox::Clear()
 {
  strcpy(Caption,"");
  Draw();
 }


/*------------------------------------------------------
       End of TextBox Class
------------------------------------------------------*/

/*-------------------Mouse Object---------------------*/

static Mouse mouse;

/*------------------------------------------------------
       Button Class
------------------------------------------------------*/

class Button
{

 private:

 int Left,Top,Width,Height,ID;
 char Caption[50];
 BUTTON_STATUS btnStatus;
 void MouseDown();
 void MouseUp();
 bool State;

 public:

 Button(int left, int top, int width, int height, char caption[], int Id);
 void Draw();
 void EnableClickHandler();

};

 Button::Button(int left, int top, int width, int height, char caption[], int Id)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  ID = Id;
  btnStatus = BUTTON_STATUS_NORMAL;
  State = false;
    }


   void Button::Draw()
   {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left+Width,Top,Left+Width,Top+Height);
  line(Left,Top+Height,Left+Width,Top+Height);

  settextjustify(LEFT_TEXT,TOP_TEXT);
  setcolor(BLACK);
  outtextxy(Left + (Width/2) - textwidth(Caption)/2 + 1,
  Top + (Height/2) - textheight(Caption)/2 + 1, Caption);

   }

   void Button::MouseDown()
   {




    mouse.HideMouse();

    setcolor(BLACK);
    line(Left,Top,Left+Width,Top);
    line(Left,Top,Left,Top+Height);

    setcolor(WHITE);
    line(Left+Width,Top,Left+Width,Top+Height);
    line(Left,Top+Height,Left+Width,Top+Height);

    mouse.ShowMouse();




   }

   void Button::MouseUp()
   {



     mouse.HideMouse();

     setcolor(WHITE);
     line(Left,Top,Left+Width,Top);
     line(Left,Top,Left,Top+Height);

     setcolor(BLACK);
     line(Left+Width,Top,Left+Width,Top+Height);
     line(Left,Top+Height,Left+Width,Top+Height);

     mouse.ShowMouse();

   }

   void Button::EnableClickHandler()
   {

  if(State)
  {
   ButtonId = 0;
   State = false;
   return;
  }

  if( mouse.MouseInside(Left,Top,Left+Width,Top+Height) == 1)
  {

   if( mouse.GetButton() == MOUSE_LBUTTON)
   {
    MouseDown();
    btnStatus = BUTTON_STATUS_DOWN;
   }

   else if(btnStatus == BUTTON_STATUS_DOWN &&  mouse.GetButton() == MOUSE_NORMAL)
   {
    MouseUp();
    ButtonId = ID;
    btnStatus = BUTTON_STATUS_NORMAL;
    State = true;

   }

  }

 }

/*------------------------------------------------------
                     End of Button Class
------------------------------------------------------*/

/*------------------------------------------------------
                     Window Class
------------------------------------------------------*/

class Window
{

 private:

 int Left,Top,Width,Height;
 char Caption[50];
 Button *CloseBtn;
 public:

 Window(int left, int top, int width, int height, char caption[]);
 void JCLogo();
 void Draw();
 void EnableClickHandler();
};


 Window::Window(int left, int top, int width, int height, char caption[])
 {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
 }
 void Window::JCLogo()
 {
    /*********** Logo ************/

  setcolor(3);
  setfillstyle(SOLID_FILL,3);
  fillellipse(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-1,TITLEBARHEIGHT/2-1);
  setcolor(15);
  setfillstyle(SOLID_FILL,15);
  circle(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-3);
  settextstyle(SMALL_FONT,0,0);
  outtextxy(Left+6,Top+4,"JC");
  settextstyle(0,0,0);
 }
 void Window::Draw()
 {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left,Top+Height,Left+Width,Top+Height);
  line(Left+Width,Top,Left+Width,Top+Height);

  setfillstyle(SOLID_FILL,BLUE);
  bar(Left+BORDERWIDTH,Top+BORDERWIDTH,
  Left+Width-(BORDERWIDTH*2),Top+TITLEBARHEIGHT);

  setcolor(WHITE);
  settextjustify(LEFT_TEXT,TOP_TEXT);
  outtextxy(Left+(BORDERWIDTH*2)+TITLEBARHEIGHT+2,Top+(BORDERWIDTH*2)+(TITLEBARHEIGHT/2)-(textheight(Caption)/2),Caption);
  CloseBtn = new Button(Left+Width-TITLEBARHEIGHT-1, Top+2,TITLEBARHEIGHT-2, TITLEBARHEIGHT-2, "X", 9809);
  CloseBtn->Draw();

  JCLogo();

 }
 void Window::EnableClickHandler()
 {
  CloseBtn->EnableClickHandler();
  if (ButtonId == 9809)
  exit(0);

 }


/*------------------------------------------------------
       End of Window Class
------------------------------------------------------*/


/*------------------------------------------------------
       Main Function
------------------------------------------------------*/

void main()
{
 int gd=DETECT,gm,ch,errorcode;
 double opr1 = 0,opr2 = 0,result = 0,d=0;
 int Operation=0;
 double temp;
 char *chr,str[30];
 int len;
 int x = 160,y = 130;
 int w = 50, h = 40;
 char deci[]={"."};

 char btn[][3]={"AC","/","X","<-","7","8","9","-",
 "4","5","6","+","1","2","3","=","0",".","+/-"};


  // initialize graphics and local variables
  initgraph(&gd,&gm,"c://turboc3//bgi");

  // read result of initialization
  errorcode = graphresult();

  if (errorcode != grOk)// an error occurred
  {
   cout<<"Graphics error :: "<<grapherrormsg(errorcode);
   cout <<"\n press any key to halt: ";
   getch();
   exit(1);// terminate with an error code
  }

 mouse.InstallMouse();

 /* Drawing a Calculator Window */

 Window *pWindow = new Window(150,50,265,340,"Calculator");
 pWindow->Draw();

 /* Drawing Textbox */

 TextBox *pTextBox = new TextBox(160,80,243,30,"",RIGHT_TEXT);
 pTextBox->Draw();

 /* Drawing Buttons */

 Button *pButton[19];
 for (int i = 0;i<19;i++)
 {
    if(i == 15)
  h = 90;
    else
  h=40;
    pButton[i] = new Button(x,y,w,h,btn[i],i+1);
    pButton[i]->Draw();
    x = x+65;
    if(i == 3 || i == 7 || i==11 || i== 15)
    {
      y = y+50;
      x = 160;
    }
 }

 while(1){

   mouse.ShowMouse(); // To show mouse
   mouse.GetMouseStatus(); // To get position of mouse

  // Enabling click event on close button in window
  pWindow->EnableClickHandler();
  // Enabling click event on buttons
  for(int k = 0;k<19;k++)
  pButton[k]->EnableClickHandler();


  switch(ButtonId)
  {
    case 1: //AC
      pTextBox->Clear();
      d = 0;
      opr1=0;
      opr2=0;
      result = 0;
      Operation = 0;

    break;
    case 2: //Divide
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = DIVIDE;
      d = 0;

    break;
    case 3: //Multiply
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = MULTIPLY;
      d=0;

    break;
    case 4: //Backspace
      strcpy(chr,pTextBox->GetText());
      len=strlen(chr);
      if(chr[len-2] == deci[0])
      {
         chr[len-1]=0;
         chr[len-2]=0;
      }
      else
         chr[len-1] = 0;
      pTextBox->Clear();
      pTextBox->SetText(chr);

    break;
    case 5: //7
      pTextBox->SetText("7");

    break;
    case 6: //8
      pTextBox->SetText("8");

    break;
    case 7: //9
      pTextBox->SetText("9");

    break;
    case 8: // Subtraction
      opr1 = atoi(pTextBox->GetText());
      pTextBox->Clear();
      Operation = SUBTRACT;
      d=0;

    break;
    case 9: //4
      pTextBox->SetText("4");

    break;
    case 10: //5
      pTextBox->SetText("5");

    break;
    case 11: //6
      pTextBox->SetText("6");

    break;
    case 12: //Addition
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = ADD;
      d=0;

    break;
    case 13: //1
      pTextBox->SetText("1");

    break;
    case 14: //2
      pTextBox->SetText("2");

    break;
    case 15: //3
      pTextBox->SetText("3");

    break;
    case 16: // Equal(=)
      opr2 = atof(pTextBox->GetText());

      switch(Operation)
      {
   case ADD:
   result = opr1+opr2;
   break;
   case SUBTRACT:
   result = opr1-opr2;
   break;
   case MULTIPLY:
   result = opr1*opr2;
   break;
   case DIVIDE:
   result = opr1/opr2;
   break;
      }

      pTextBox->Clear();
      pTextBox->SetText(gcvt(result,10,str));
      opr1=0;
      opr2=0;
      result = 0;
      Operation=0;

    break;
    case 17: //0
      pTextBox->SetText("0");

    break;
    case 18: // Decimal(.)
      if(d == 0)
      {
       d = 1;
       pTextBox->SetText(".");
      }

    break;
    case 19: //Plus & Minus (+/-)



   temp = atof(pTextBox->GetText());
   temp = temp* -1;
   pTextBox->Clear();
   pTextBox->SetText(gcvt(temp,10,str));


    break;
  }


       while(kbhit()){
  ch = getch();
  if (ch == 27)  //ESC key pressed
  exit(0);
    } }

}




#include <stdio.h> 
#include <stdlib.h> 


void enter_string(char* message, char* s, size_t s_size) 
{
  printf("%s", message);
  fgets(s, s_size, stdin);   
}

int get_score(char* s) 
{
  char *end;
  for (end = s; *end != '\0'; ++end);
  --end;

  if (end == s) 
  {
      printf("wrong Input\n");
      return -1;
  }

  int score = 0;
  char c;
  for(char* p = s; p != end; ++p)
  {
    c = *p;
    if(c == ' ') continue;

    c &= ~0x20;

    if(c >= 'A' && c <= 'Z')
    {
      score += c - '@';
    }  
    else
    {
      printf("wrong Input\n");
      return -1;
    }
  }
  return score * 5 / (end - s);
}

int main()
{
  int p,s1,s2;
  char name[1000];

  while(1)
  {
    do 
    {
      enter_string("Enter The First Name: ", name, sizeof(name));
      s1 = get_score(name);
    } while (s1 == -1);

    do 
    {
      enter_string("Enter The Second Name: ", name, sizeof(name));
      s2 = get_score(name);
    } while (s2 == -1);

    if(s2 > s1)
    {
      p = (s1 * 100) / s2;
    }
    else
    {
      p = (s2 * 100) / s1;
    }

    printf("The love Percentage is : %d %% \n",p);
    printf("\n pls Follow me  🌟 if you like this code 😊\n");
  } 
  return 0;
}


/* created by NemoNet aka The Young Programmer 🏅
in collaboration with tigertv 🐯 
pls kindly follow me on github OR
give me a star 🌟  */


//Arcade Spaceship Game
 /*
 * © 2021 Junwoo Yeom 
 * © 2022 Nemonet TYP
 */
 #define MAX_COL 120
 #define MAX_ROW 30
 #include <Windows.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 #include <math.h>
 #include <conio.h>
 struct Ship_Location {//player
 int health; // current health
 int x;
 int y;
 }ship;

 const int max_health = 3;
 int score = 0; // current score
 int max_score = 0;//highest score
 int** background; // save object position obstacle item
 int bottom_size = 5;//Size occupied by the bottom display window
 int level = 1; // level

 int bottom_explain = 0; //temp variable

 void init(); //initialization function
 void gotoxy(int x, int y); // function to move coordinates
 void color(int code);//color change function

 void ship_move(); // make the player ship move
 void obstacle(int difficulty); //Function to save the missile's position
 void cure(int dif); // Function to store the health recovery item position
 void object_down(); //Function to move missiles and items
 void print_game(); // Function to print the game screen
 void bottom(); // Function to display bottom health, score, and highest score

 void clearbottom();
 void reset_arr_1(int* arr, int size, int value);//1 dimensional array initialization function
 void reset_arr_2(int** arr, int row, int column, int value); // 2D array initialization function
 void print_arr(); // function for debug
 int gameover(); // screen when game is over
 void load(); //Load the all-time high score
 void save(); // Save the highest score
 void mainmenu(); // main menu function

 int main(void) {
 int delay = 20;
 mainmenu();
 do {//do ~ while statement to confirm whether to continue the game
 init(); // initial setting
 delay = 20;
 while (ship.health >= 1) {

 ship_move(); // move the ship

 obstacle(level);//assign and move
 cure(2);
 object_down();

 print_game();
 score++;
 level = score / 100 + 1; // Level related expressions so that every 100 points rise by one level

 {
 if (score >= max_score) {//specify max score
 max_score = score;
 }
 if (20 - score / 100 > 0) { // Decrease the delay
 delay = 20 - score / 100;
 }
 else { // If less than 0, change to delay 1
 delay = 1;
 }
 Sleep(delay); // speed control
 }
 }
 save();
 system("cls");
 } while (gameover() == 1);

 return 0;
 }

 void mainmenu() {
 system("mode con:cols=100 lines=20");
 system("title main menu");
 gotoxy(50 - 13, 15);
 color(7);
 printf("Press any key to start the game");
 while (1) {
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 color(14);
 printf("★Dodge Missile★\n");

 Sleep(100);
 color(3);
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 printf("★Dodge Missile★\n");
 Sleep(100);
 if (_kbhit()) break; //check if key is pressed
 }
 }

 void init() {
 load(); //Load the highest score
 score = 0; // Initialize score
 srand(time(NULL)); // set random seed according to time
 background = (int**)malloc(sizeof(int*) * MAX_ROW);//background row (save objects in the background except player spaceship)
 for (int i = 0; i < MAX_ROW; i++) {
 background[i] = (int*)malloc(sizeof(int) * MAX_COL); // background column
 }

 ship.health = max_health;//set the ship's initial health
 reset_arr_2(background, MAX_ROW, MAX_COL, 0); // reset to 0
 ship.x = (MAX_COL - bottom_size) / 2; // Initial x-coordinate of the ship
 ship.y = MAX_ROW / 2;//Set the initial y-coordinate of the ship

 char* temp[30];
 sprintf_s(temp, sizeof(temp), "mode con:cols=%d lines=%d", MAX_COL, MAX_ROW); // Function to print string format
 system(temp);//Set window size
 system("title avoid missile");


 gotoxy(0, MAX_ROW - 5);//underscore
 color(7);
 for (int i = 0; i < MAX_COL; i++) {
 printf("─");
 }
 bottom();
 clearbottom();
 }
 void ship_move() {
 if (GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(0x41)) { // left or a key
 if (ship.x > 0) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Delete the previous afterimage
 ship.x--;//move to the left

 }
 }
 if (GetAsyncKeyState(VK_RIGHT) || GetAsyncKeyState(0x44)) { // right or d key
 if (ship.x < MAX_COL - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.x++;
 }
 }
 if (GetAsyncKeyState(VK_UP) || GetAsyncKeyState(0x57)) { // up or w key
 if (ship.y > 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.y--;
 }
 }
 if (GetAsyncKeyState(VK_DOWN) || GetAsyncKeyState(0x53)) { // up or s-key
 if (ship.y < MAX_ROW - bottom_size - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Clear previous afterimage
 ship.y++;
 }
 }
 gotoxy(ship.x, ship.y);
 color(11);
 printf("A");
 color(7);
 }

 void obstacle(int dif) {
 if (100 / dif > 0) { // Since it is not divisible by 0
 if (score % (100 / dif) == 0) { // more and more obstacles
 background[0][ship.x] = -1; // an obstacle that reduces health by -1
 }
 }
 else {
 background[0][ship.x] = -1;
 }
 }
 void cure(int dif) {
 static int prv_dif = 0; // keep the original shape even when the function is off
 int random = 0; // obstacle location
 if (level != prv_dif) {//every time the level changes
 for (int i = 0; i < dif; i++) {
 random = rand() % MAX_COL;
 if (background[0][random] == 0) {
 background[0][random] = 1; // cure
 }
 else i--;
 }
 }
 prv_dif = level;
 }
 void object_down() {

 /* Problem occurs when moving from row to column
 If you read one line and go down, the object will be on the next line as well.
 By the time the for statement is finished, it will eventually go down all at once.
 */

 // So, use the method of descending one row at a time
 int* temp;
 for (int i = MAX_ROW - 1; i >= 1; i--) { // all background objects down
 reset_arr_1(background[MAX_ROW - 1], MAX_COL, 0); // Initialize the last line to 0
 temp = background[i ​​- 1];
 background[i ​​- 1] = background[i];
 background[i] = temp;
 }

 if (background[ship.y][ship.x] != 0) {//if missile and ship collide or eat health recovery item
 gotoxy(ship.x, ship.y - 1);//Go to the y-coordinate one space above and delete the missile
 printf(" ");

 ship.health += background[ship.y][ship.x];//Recover health or take damage.
 background[ship.y][ship.x] = 0;//Delete the object at that location from the array.
 }

 }

 void print_game() {
 gotoxy(0, 0); // move to position 0, 0
 for (int i = 0; i < MAX_ROW - bottom_size; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] < 0) {/missile if less than 0 heal if greater than 0
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" ");//Delete the previous position of the missile
 }
 gotoxy(j, i);
 printf("M");//missile
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//delete previous position of missile
 }

 }
 else if (background[i][j] > 0) {
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" "); // delete previous position
 }
 gotoxy(j, i);
 color(12);
 printf("+");//HealPack
 color(7);
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//Delete previous missile position
 }
 }
 }
 }

 bottom();
 }
 void bottom() {
 static int prev_health = 0; // place to store previous health
 static int prev_level = 0;

 if (prev_health != ship.health) {// Only when health information is updated, delete the display at the bottom and update
 clearbottom();
 }prev_health = ship.health;

 if (prev_level != level) {//only when the level information is updated
 gotoxy(0, MAX_ROW - 4);
 printf("level %d", level);
 }

 if (bottom_explain <= 1) {
 printf(" (Move with the arrow keys, avoid the white color. Red is the healing potion.)");
 }bottom_explain++;


 gotoxy(0, MAX_ROW - 2);
 printf("Health: ");
 color(4); // dark red
 for (int i = 0; i < ship.health; i++) {
 printf("♥");
 }
 for (int i = 0; i < max_health - ship.health; i++) {
 printf("♡");
 }


 color(7); // white
 int a = 0;
 if (ship.health - max_health > 0) {
 a = ship.health - max_health;
 }
 else a = 0;
 gotoxy(20 + a * 2, MAX_ROW - 2);
 printf("Score: ");
 color(14); // light yellow
 printf("%d", score);

 gotoxy(40 + a * 2, MAX_ROW - 2);
 color(7); // white
 printf("Highest score: ");
 color(14); // light yellow

 printf("%d", max_score);
 color(7); // white


 }

 int gameover() {
 int i = 0;
 while (1) {
 color(12);
 printf(" _____ _____ _\n");
 printf("| __ \\ | _ | | |\n");
 printf("| | \\/ __ _ _ __ ___ ___ | | |__ __ ___ _ __ | |\n");
 printf("| | __ / _` || '_ ` _ \\ / _ \\ | | |\\ \\ / / / _ \\| '__| | |\n");
 printf("| |_\\ \\| (_| || | | | | | __/ \\ \\_/ / \\ V / | __/| | |_|\n");
 printf(" \\____/ \\__,_||_| |_| |_| \\___| \\___/ \\_/ \\___||_| (_)\n");
 printf("\n");
 color(7);
 printf("Current score: ");
 color(14);
 printf("%d\n", score);
 color(7);
 printf("Highest score: ");
 color(14);
 printf("%d\n", max_score);
 color(7);

 printf("\nDo you want to do this again?\n");
 printf("1. Yes\n");
 printf("2. no\n");
 system("pause");
 printf("\nInput:");

 if (scanf_s("%d", &i) == 0) {
 rewind(stdin);
 i = 0;
 printf("Character input is not allowed.\n");
 Sleep(1000);
 }
 else if (!(i >= 1 && i <= 2)) { // If any number other than 1 and 2
 i = 0;
 printf("Please enter a number between 1 and 2.\n");
 Sleep(1000);
 }
 else {
 break;
 }
 system("cls");
 }
 return i;
 }


 void color(int code) {
 SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), code); // Function defined in windows.h, standard output handle, set color to number
 }
 void gotoxy(int x, int y) {
 COORD Pos; // Coordinate structure
 Pos.X = x;
 Pos.Y = y;
 SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos); // Function defined in windows.h, standard output handle, coordinates as a structure
 }

 void clearbottom() {
 gotoxy(0, MAX_ROW - 4);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 gotoxy(0, MAX_ROW - 2);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 }
 void reset_arr_2(int** arr, int row, int column, int value) {
 for (int i = 0; i < row; i++) {
 for (int j = 0; j < column; j++) {
 arr[i][j] = value;
 }
 }
 }
 void reset_arr_1(int* arr, int size, int value) {
 for (int i = 0; i < size; i++) {
 arr[i] = value;
 }
 }
 void load() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "a+");//read and append mode
 if (fp != NULL) {
 fscanf_s(fp, "%d", &max_score);
 fclose(fp);
 }
 else printf("\nFailed to read file\n");
 }
 void save() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "w");
 if (fp != NULL) {
 fprintf(fp, "%d\n", max_score); // Save the highest score
 fclose(fp);
 }
 else printf("\nFailed to write file\n");
 }
 void print_arr() {//for debug
 printf("--------------------------------------");
 for (int i = 0; i < MAX_ROW; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] != 0) {
 printf("%d", background[i][j]);
 }
 else {
 printf(" ");
 }
 }
 printf("\n");
 }
 }


// Autor : Nemonet TYP
// Title: Tic Tac Toe Game project in C
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <windows.h>

int board[10] = {2,2,2,2,2,2,2,2,2,2};
int turn = 1,flag = 0;
int player,comp;

void menu();
void go(int n);
void start_game();
void check_draw();
void draw_board();
void player_first();
void put_X_O(char ch,int pos);
COORD coord= {0,0}; // this is global variable
//center of axis is set to the top left cornor of the screen
void gotoxy(int x,int y)
{
    coord.X=x;
    coord.Y=y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}

void main()
{
    system("cls");
    menu();
    getch();

}

void menu()
{
    int choice;
    system("cls");
    printf("\n--------MENU--------");
    printf("\n1 : Play with X");
    printf("\n2 : Play with O");
    printf("\n3 : Exit");
    printf("\nEnter your choice:>");
    scanf("%d",&choice);
    turn = 1;
    switch (choice)
    {
    case 1:
        player = 1;
        comp = 0;
        player_first();
        break;
    case 2:
        player = 0;
        comp = 1;
        start_game();
        break;
    case 3:
        exit(1);
    default:
        menu();
    }
}

int make2()
{
    if(board[5] == 2)
        return 5;
    if(board[2] == 2)
        return 2;
    if(board[4] == 2)
        return 4;
    if(board[6] == 2)
        return 6;
    if(board[8] == 2)
        return 8;
    return 0;
}

int make4()
{
    if(board[1] == 2)
        return 1;
    if(board[3] == 2)
        return 3;
    if(board[7] == 2)
        return 7;
    if(board[9] == 2)
        return 9;
    return 0;
}

int posswin(int p)
{
// p==1 then X   p==0  then  O
    int i;
    int check_val,pos;

    if(p == 1)
        check_val = 18;
    else
        check_val = 50;

    i = 1;
    while(i<=9)//row check
    {
        if(board[i] * board[i+1] * board[i+2] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+1] == 2)
                return i+1;
            if(board[i+2] == 2)
                return i+2;
        }
        i+=3;
    }

    i = 1;
    while(i<=3)//column check
    {
        if(board[i] * board[i+3] * board[i+6] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+3] == 2)
                return i+3;
            if(board[i+6] == 2)
                return i+6;
        }
        i++;
    }

    if(board[1] * board[5] * board[9] == check_val)
    {
        if(board[1] == 2)
            return 1;
        if(board[5] == 2)
            return 5;
        if(board[9] == 2)
            return 9;
    }

    if(board[3] * board[5] * board[7] == check_val)
    {
        if(board[3] == 2)
            return 3;
        if(board[5] == 2)
            return 5;
        if(board[7] == 2)
            return 7;
    }
    return 0;
}

void go(int n)
{
    if(turn % 2)
        board[n] = 3;
    else
        board[n] = 5;
    turn++;
}

void player_first()
{
    int pos;

    check_draw();
    draw_board();
    gotoxy(30,18);
    printf("Your Turn :> ");
    scanf("%d",&pos);

    if(board[pos] != 2)
        player_first();

    if(pos == posswin(player))
    {
        go(pos);
        draw_board();
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Player Wins");
        getch();
        exit(0);
    }

    go(pos);
    draw_board();
    start_game();
}

void start_game()
{
// p==1 then X   p==0  then  O
    if(posswin(comp))
    {
        go(posswin(comp));
        flag = 1;
    }
    else if(posswin(player))
        go(posswin(player));
    else if(make2())
        go(make2());
    else
        go(make4());
    draw_board();

    if(flag)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Computer wins");
        getch();
    }
    else
        player_first();
}

void check_draw()
{
    if(turn > 9)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Game Draw");
        getch();
        exit(0);
    }
}

void draw_board()
{
    int j;

    for(j=9; j<17; j++)
    {
        gotoxy(35,j);
        printf("|       |");
    }
    gotoxy(28,11);
    printf("-----------------------");
    gotoxy(28,14);
    printf("-----------------------");

    for(j=1; j<10; j++)
    {
        if(board[j] == 3)
            put_X_O('X',j);
        else if(board[j] == 5)
            put_X_O('O',j);
    }
}

void put_X_O(char ch,int pos)
{
    int m;
    int x = 31, y = 10;

    m = pos;

    if(m > 3)
    {
        while(m > 3)
        {
            y += 3;
            m -= 3;
        }
    }
    if(pos % 3 == 0)
        x += 16;
    else
    {
        pos %= 3;
        pos--;
        while(pos)
        {
            x+=8;
            pos--;
        }
    }
    gotoxy(x,y);
    printf("%c",ch);
}


/*-------------------------------------------------------------------------

          GUI Scientific Calculator 

Programmer     : Nemonet
                 The Young Programmer 💻


Software Details
====================
Developed in   : C
Compiler used  : Turbo C++ 3.0
Date           : 20/05/2022 -- 31/05/2022

Licence   : MIT Licence
(Please give the credit of programming to author.)


NOTE:


---------------------------------------------------------------------------*/






//Please change BGI directory accouding to your TC Directory
//By default it is "E:\tc\bgi"

#include <stdio.h>
#include <conio.h>
#include <process.h>
#include <dos.h>
#include <stdlib.h>
#include <iostream.h>
#include <graphics.h>
#include <math.h>
#include <string.h>

float * mem;
int X = 0, Y = 0;
int row = 17, col = 5;
char dummy;
char flag = 'd', flagp = '0';
char bflag = 'u', bflagp = 'u';
int mflag = 0;
char ch, ch1, ch2;
int sflag = 0;
int midx, midy;
#define UNCLICKED 0
#define CLICKED 1
#define PI 3.14159

char str1[] = {
  "Nemo TYP Roll# CIS 34"
};
char str2[] = {
  "Nemonet TYP Roll# CIS 50"
};

void typeit(int x, int y, int spacing, char string[]) {
  char temp[2];
  for (int i = 0; i < strlen(string); i++) {
    delay(100);
    temp[0] = string[i];
    temp[1] = '\0';
    outtextxy(x + (i + 1) * spacing, y, temp);
  } //endfor

}
void front() {
  int x, y, h;
  for (x = 0; x <= 100; x++) {
    settextjustify(CENTER_TEXT, CENTER_TEXT);
    setcolor(1);
    settextstyle(1, 0, 4);
    setusercharsize(x, 6, x, 3);
    setcolor(14);
    moveto(310, 135);
    outtext("..");
    setcolor(6);
    moveto(310, 130);
    outtext("I I");
    if (x < 50)
      delay(30);
    else
      delay(20);
  }
  for (y = 0; y <= 100; y++) {
    setcolor(0);
    settextstyle(1, 0, 4);
    setusercharsize(y, 6, y, 3);
    moveto(310, 135);
    outtext("..");
    moveto(310, 130);
    outtext("I I");
    if (y > 20) {
      settextstyle(7, 0, 3);
      setusercharsize(y - 20, 35, y - 20, 30);
      setcolor(9);
      outtext("CALCULATOR");
      setcolor(2);
      outtext("___________");
      delay(15);
      if (y < 100) {
        settextstyle(7, 0, 3);
        setusercharsize(y - 20, 35, y - 20, 30);
        setcolor(0);
        outtext("CALCULATOR");
      }
    }
  }
  //delay(1000);
  settextstyle(3, 0, 2);
  delay(50);
  outtextxy(midx - 200, midy, "Group Members:-");
  //x=10,y=10;
  setcolor(6);
  settextstyle(4, 0, 4);
  typeit(midx - 200, midy + 50, 15, str1);
  typeit(midx - 200, midy + 75, 15, str2);
  getch();
  //closegraph();

}

char input();
double add(double, double, char);
double angle_conv(double);
void basecng(double, double);

//***********************************************************
// *
// THIS FUNCTION DRAWS THE BUTTONS OF THE CALCULATOR *
// *
//***********************************************************

void button_3d(int x1, int y1, int x2, int y2, int check, char * text, int color) {
  int up, low;
  setfillstyle(1, 7);
  bar(x1, y1, x2, y2);
  if (check == 0) //Unclicked
    up = 15, low = 8;
  else
    up = 8, low = 15; //Clicked
  setcolor(low);
  line(x2, y1, x2, y2);
  line(x2 - 1, y1, x2 - 1, y2);
  line(x1, y2, x2, y2);
  line(x1 + 1, y2 - 1, x2, y2 - 1);

  setcolor(up);
  line(x1, y1, x2, y1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1, y1, x1, y2);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  setcolor(color);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  outtextxy(x1 + (x2 - x1) / 2, (y1 + (y2 - y1) / 2) - 2, text);

}
//********************************************************************
// *
// This function makes the opening screen *
// *
//********************************************************************

void frontpage(void) {
  int mx, my;

  mx = (getmaxx() / 2);
  my = (getmaxy() / 2);

  //SET baqckground color
  setfillstyle(9, 1);
  bar(0, 0, getmaxx(), getmaxy());

  //DRAW a bar, and make it look like a 3d bar
  setfillstyle(1, 7);
  bar(50, 20, 600, 400);

  //DRAW lines for the top and left side
  setcolor(15);
  line(50, 20, 600, 20);
  line(51, 21, 599, 21);
  line(50, 20, 50, 400);
  line(51, 21, 51, 399);

  //DRAW lines for the bottom and right side
  setcolor(8);
  line(600, 20, 600, 400);
  line(599, 21, 599, 400);
  line(50, 400, 600, 400);
  line(51, 399, 600, 399);

  //DRAW two 3D bars for the left and right side

  setfillstyle(9, 8);
  bar(70, 40, 100, 380);
  //getch();
  bar(545, 40, 575, 380);
  setcolor(8);
  rectangle(70, 40, 100, 380);
  rectangle(545, 40, 575, 380);
  setcolor(15);
  line(100, 40, 100, 380);
  line(70, 380, 100, 380);
  line(575, 40, 575, 380);
  line(545, 380, 575, 380);

  //DRAW two 3D divider lines on both sides
  setcolor(8);
  line(110, 40, 110, 380);
  line(535, 40, 535, 380);
  setcolor(15);
  line(111, 40, 111, 380);
  line(536, 40, 536, 380);

  //PRINT 3D text CALENDAR 
  settextstyle(1, 0, 4);
  settextjustify(1, 1);
  setcolor(15);
  outtextxy(mx + 2, my - 46, "MY CALCULATOR");
  setcolor(7);
  outtextxy(mx + 1, my - 45, "MY CALCULATOR");
  setcolor(8);
  outtextxy(mx + 2, my - 44, "MY CALCULATOR");

  //PRINT 3D text 
  setcolor(15);
  outtextxy(mx, my + 10, "2022");
  setcolor(7);
  outtextxy(mx + 1, my + 11, "2022");
  setcolor(8);
  outtextxy(mx + 2, my + 12, "2022");

  //PRINT copyright notice
  settextstyle(2, 0, 5);
  setcolor(1);
  outtextxy(mx + 1, my + 85, "@ 2022 by TYP 💻");

  getch(); //PAUSE for a while
}

//********************************************************************
// *
// This function makes the claculating screen *
// *
//********************************************************************

void screen(int x1, int y1, int x2, int y2) {
  setlinestyle(0, 0, 1);
  setfillstyle(SOLID_FILL, 8);
  bar(x1, y1, x2, y2);
  setfillstyle(SOLID_FILL, BLACK);
  bar(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(15);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1 + 2, y1 + 2, x1 + 2, y2 - 2);
  line(x1 + 2, y1 + 2, x2 - 2, y1 + 2);
  setcolor(8);
  line(x1 + 1, y2 - 1, x2 - 1, y2 - 1);
  line(x2 - 1, y1 + 1, x2 - 1, y2 - 1);
  line(x1 + 2, y2 - 2, x2 - 2, y2 - 2);
  line(x2 - 2, y1 + 2, x2 - 2, y2 - 2);

}

//***********************************************************************
// *
// Mouse Related Functions *
// *
//***********************************************************************

void init_mouse() {
  union REGS iregs, oregs;

  iregs.x.ax = 0;
  int86(0x33, & iregs, & oregs);

  if (oregs.x.ax == 0) {
    cleardevice();
    printf("mouse not installed\n");
    getch();
    exit(1);
  }
  iregs.x.ax = 1;
  int86(0x33, & iregs, & oregs);
}
//*************************************************************

void mouse() {
  int button, x1, y1;
  union REGS iregs, oregs;

  iregs.x.ax = 3;
  int86(0x33, & iregs, & oregs);

  button = oregs.x.bx & 3;
  x1 = oregs.x.cx;
  y1 = oregs.x.dx;

  if (oregs.x.bx & 1) {
    X = x1;
    Y = y1;
  }

  if (button == 3)
    exit(0);
}

//*************************************************************

void hide_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 2;
  int86(0x33, & ioRegs, & ioRegs);
}

//*************************************************************
void show_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 1;
  int86(0x33, & ioRegs, & ioRegs);
}

/*************************************************************/void remove_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 0;
  int86(0x33, & ioRegs, & ioRegs);
}

//************************************************************************
// *
// THIS FUNCTION DRAWS THE CALCULATOR ON THE SCREEN *
// *
//************************************************************************
void structure() {
  init_mouse();
  setbkcolor(0);
  cleardevice();
  hide_mouse();
  //**********************************************************
  // Buttons Making

  front();
  frontpage();
  settextstyle(2, 0, 4);
  button_3d(50, 20, 600, 400, UNCLICKED, "", 1); // main box
  screen(100, 50, 545, 120); // screen

  setfillstyle(1, 8);
  bar(52, 22, 598, 42);
  button_3d(575, 23, 595, 40, UNCLICKED, "x", 0);
  setcolor(0);
  outtextxy(120, 30, "CALCULATOR v1.0");
  button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15); // box of decimal
  button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0); // box of octal
  button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0); // box of hexal
  button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0); // box of binary

  button_3d(350, 205, 380, 225, UNCLICKED, "7", 0); // Box Of 7
  button_3d(390, 205, 420, 225, UNCLICKED, "8", 0); // Box Of 8
  button_3d(430, 205, 460, 225, UNCLICKED, "9", 0); // Box Of 9

  button_3d(350, 230, 380, 250, UNCLICKED, "4", 0); // Box Of 4
  button_3d(390, 230, 420, 250, UNCLICKED, "5", 0); // Box Of 5
  button_3d(430, 230, 460, 250, UNCLICKED, "6", 0); // Box Of 6

  button_3d(480, 230, 510, 250, UNCLICKED, "*", 0); // Box Of *
  button_3d(515, 230, 545, 250, UNCLICKED, "/", 0); // Box Of \
  button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4); //Box Of AllClear (AC)
  button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4); //Box Of Clear (C)

  button_3d(350, 255, 380, 275, UNCLICKED, "1", 0); // Box Of 1
  button_3d(390, 255, 420, 275, UNCLICKED, "2", 0); // Box Of 2
  button_3d(430, 255, 460, 275, UNCLICKED, "3", 0); // Box Of 3

  button_3d(350, 280, 380, 300, UNCLICKED, "0", 0); // Box Of Zero (0)
  button_3d(390, 280, 420, 300, UNCLICKED, ".", 0); // Box Of Period (.)
  button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0); // Box Of PhiFunction

  button_3d(480, 255, 510, 275, UNCLICKED, "-", 0); // Box Of -
  button_3d(515, 255, 545, 275, UNCLICKED, "+", 0); // Box Of +
  button_3d(350, 305, 460, 325, UNCLICKED, "=", 0); // Box Of Equality
  button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE); // Box Of shift

  button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0); //Box of x^n
  button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0); //box of 1/x

  button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0); // Box OfSin Function
  button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0); // Box Of CosFunction
  button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0); // Box Of Tan Function

  button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0); // Box Of sin^-1
  button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0); // Box Of cos^-1
  button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0); // Box Of tan^-1

  button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0); // Box Of ln
  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(BLUE);
  settextstyle(2, 0, 4);
  outtextxy(125, 290, "e");
  outtextxy(185, 290, "10^x");
  outtextxy(245, 290, "x^3");
  button_3d(160, 300, 210, 325, UNCLICKED, "log", 0); // Box Of log
  button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0); // Box Of x^2

  button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
  button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
  button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
  button_3d(480, 350, 545, 370, UNCLICKED, "Off", 4);

  button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
  button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
  button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);

}
//********************************************************
// *
// Main starts *
// *
//********************************************************
void main() {
  clrscr();

  double y = 0, z = 0, pnt, pnt1 = 0, x = 0, r = 0;

  int gdriver = DETECT, gmode, errorcode;
  int i;
  initgraph( & gdriver, & gmode, "C:\\TURBOC3\\BGI");
  midx = getmaxx() / 2;
  midy = getmaxy() / 2;
  structure();
  gotoxy(row, col);
  printf("\t\t\t\t\t");
  gotoxy(row, col);
  printf("0");
  mem = (float * ) malloc(y * sizeof(float));
  while (ch != 27 && ch1 != 27) //While Escape is not pressed
  { //and if base is not 10
    pnt1 = 0; //no doubleing point entered Yet
    ch2 = '0';
    // for(int a=0;ch!=27;a++)//a indicates whether a no. has been entered or not
    while (ch2 != 27)
    //a=0 means that no no. has been entered yet
    {
      if (bflagp != 'u') {
        //gotoxy(row,col);
        dummy = input();
 if (dummy != 'o') {
          gotoxy(row, col);
          printf("The trail version does not support this feature");
          input();
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          // ch='0';
        }
        y = 0;
        z = 0;
        ch = '0';
        gotoxy(row, col);
        printf("\t\t\t\t\t\t");
        gotoxy(row, col);
        printf("0");

        // bflagp='u';
      }

      ch = input();
      if (ch == '>' || ch == '<' || ch == '?') {
        sflag = 0;
        if (ch == '>') //M+
          *
          mem += y;
        if (ch == '<') //M-
          *
          mem -= y;
        if (ch == '?') //MR
        {
          y = * mem;
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          gotoxy(row, col);
          printf("%g", y);
        }
        if ( * mem == 0)
          mflag = 0;
        if ( * mem != 0)
          mflag = 1;
      }
      if (mflag == 0) {
        gotoxy(row, 7);

        printf(" ");

      }
      if (mflag != 0) {
        gotoxy(row, 7);

        printf("M");
      }
      gotoxy(row, col);

      if (ch == 'a') {
        sflag = 0;
        y = 0;
        gotoxy(row, col);
        printf("\t\t\t\t\t");
        gotoxy(row, col);
 printf("0");
      }

      if (ch == 'o')
      //for clearing the screen of the CALCULATOR
      {
        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }

      if (ch == 'q') {
        sflag = 0;
        y = sqrt(y);
 gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == 'm') {
        sflag = 0;
        y = 1 / y;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == '+' || ch == '-' || ch == '/' || ch == '\\' || ch == '=' || ch == '*') {
        sflag = 0;
        break;
      }
      if (ch == '.') //case for a decimal point
      {
        sflag = 0;
 if (pnt1 == 0) //ie no decimal has been entered yet
        {
          gotoxy(row, col);
          printf("\t\t\t\t "); // double
          gotoxy(row, col);
          printf("%g.", y);
          pnt1 = .1; //ie one decimal point no has been entered
          continue; //go back to the begining and get the next number
        } else //decimal point has alredy been entered and thus no change in the screen
        {
          sflag = 0;
          continue; //go back to the begining
        }
      } //out of the '.' condition

      if (pnt1 != 0) //ie we have a doubleing point
      {
        sflag = 0;
        if (ch <= '9' && ch >= '0') //input integer
        {
   // printf("%c",ch);
          x = (double) ch; //type cast the character into double to perforn further operations
          x -= 48; //since character digit indoubleing -48 gives the corresponding ASCII
          x = x * pnt1; //make it a decimal
          y = x + y; //add it in result
          pnt1 *= .1; //shift to the second doubleing point
          gotoxy(row, col);
          printf("%g", y);
          gotoxy(row, col);
          continue; //back to the top
        }
      }
      //if no decimal point number then proceed

      if (ch <= '9' && ch >= '0') {
        sflag = 0;
        x = (double) ch; //typecast to double
        x -= 48; //get corresponding ASCII
        y = (y * 10) + x; //add to right of result
        gotoxy(row, col); //go back to start of the calc screen
 printf("\t\t\t\t "); //clear the screen
        gotoxy(row, col);
        printf("%g", y); //print the number
      }
      if (ch == 'u' || ch == 'v' || ch == 'w' || ch == 'x') {
        sflag = 0;
        if (bflagp == bflag && bflag == 'u')
          continue;
        else
          basecng(y, pnt1);
      }
      if (ch == 'd' || ch == 'r' || ch == 'g') {
        sflag = 0;
        y = angle_conv(y);
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
        // gotoxy(row,col);
        // printf("%g",y);
 // continue;
      }
      if (ch == 's' || ch == 'c' || ch == 't' || ch == 'i' || ch == 'j' || ch == 'k' || ch == 'n' || ch == 'l' || ch == 'p' || ch == 'h')
      //ie the user opted for a function
      {
        if (ch == 's' || ch == 'c' || ch == 't') //sin /cos/tan
        {
          sflag = 0;
          if (flag != 'r') {
            flagp = flag;
            flag = 'r';
            y = angle_conv(y);
            flag = flagp;
          }
          // gotoxy(row,col);
          // printf("%g",y);getch();
          switch (ch) {

          case 's':
            y = sin(y);
     break;
          case 'c':
            y = cos(y);
            break;
          case 't':
            y = tan(y);
            break;
          }
        }
        if (ch == 'i' || ch == 'j' || ch == 'k') {
          sflag = 0;
          if (flag != 'r') {
            // flagp=flag;
            flagp = 'r';
            //y=angle_conv(y);
          }
          switch (ch) {
          case 'i':
            y = asin(y);
            break;
   case 'j':
            y = acos(y);
            break;
          case 'k':
            y = atan(y);
            break;
          }
          if (flag != 'r')
            y = angle_conv(y);
        } else if (ch == 'n') {
          if (sflag == 1) {
            y = exp(y);
            sflag = 0;
          } else
            y = log(y); //ln
        } else if (ch == 'l') {
          if (sflag == 1) {
            y = pow(10, y);
            sflag = 0;
          } else
     y = log10(y); //log
        } else if (ch == 'p') {
          if (sflag == 1) {
            y = pow(y, 3);
            sflag = 0;
          } else
            y = pow(y, 2); //square
        } else if (ch == 'h') {
          sflag = 0;
          y = PI; //pi
        }

        gotoxy(row, col);
        printf("\t\t\t\t "); //Clear the screen
        gotoxy(row, col);
        printf("%g", y);
      } //else condition

    } //out of second condition ie we now have the first no. or function or operater

    for (; ch != 27 && ch1 != '=' && ch != '=';) //ie the characters input are not ESCAPE or Equal to

    {
      pnt1 = 0;
      z = 0;
      if (ch == 'o' || ch1 == 'o') // For Clear The Screen
      {

        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        // gotoxy(col,row);
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }
      for (; ch1 != 27;) {
 gotoxy(row, col);
        // printf("%g",z);
        // z=0;
        ch1 = input();

        if (ch1 == '>' || ch1 == '<' || ch1 == '?') {
          if (ch1 == '>') //M+
            *
            mem += z;
          if (ch1 == '<') //M-
            *
            mem -= z;
          if (ch1 == '?') //MR
          {
            z = * mem;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
          }
   if ( * mem == 0)
            mflag = 0;
          if ( * mem != 0)
            mflag = 1;
        }
        if (mflag == 0) {
          gotoxy(row, 7);
          printf(" ");
        }
        if (mflag != 0) {
          gotoxy(row, 7);
          printf("M");
        }
        gotoxy(row, col);

        if (ch1 == 'a') {
          z = 0;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
        }

        if (ch == 'o' || ch1 == 'o') // For Clear The Screen
        {
          y = 0;
          z = 0;
          gotoxy(row, col);
          //cout<<" ";
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
          gotoxy(row, col);
          break;
        }
        if (ch1 == 'q') {
          z = sqrt(z);
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }
        if (ch1 == 'm') {
          z = 1 / z;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }

        if (ch1 == '.') {
          if (pnt1 == 0) {
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            //cout<<z<<".";
            printf("%g.", z);
            pnt1 = .1;
            continue;
          } else {
            continue;
          }
        }
        if (pnt1 != 0) {
          if (ch1 <= '9' && ch1 >= '0') {
            // printf("%c",ch1);
            x = (double) ch1;
            x -= 48;
            x = x * pnt1;
            z = x + z;
            pnt1 = pnt1 * .1;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            continue;
          }
        }

        if (ch1 == '+' || ch1 == '-' || ch1 == '*' || ch1 == '/' || ch1 == '=')
          break;
        if (ch1 >= '0' && ch1 <= '9') {
          x = (double) ch1;
          x = x - 48;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          z = (z * 10) + x;
          printf("%g", z);
        }
        if (ch == 'u')
          if (ch == 'd' || ch == 'r' || ch == 'g') {
            z = angle_conv(z);
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            // continue;
          }
        if (ch1 == 's' || ch1 == 'c' || ch1 == 't' || ch1 == 'i' || ch1 == 'j' || ch1 == 'k' || ch1 == 'n' || ch1 == 'l' || ch1 == 'p' || ch1 == 'h')
        //ie the user opted for a function
        {
          if (ch1 == 's' || ch1 == 'c' || ch1 == 't') //sin
          {
            if (flag != 'r') {
              flagp = flag;
              flag = 'r';
              angle_conv(z);
              flag = flagp;
            }
            switch (ch1) {
            case 's':
              z = sin(z);
              break;
            case 'c':
              z = cos(z);
              break;
            case 't':
              z = tan(z);
              break;
            }
          }
          if (ch1 == 'i' || ch1 == 'j' || ch1 == 'k') {
            if (flag != 'r') {
              flagp = 'r';
            }
            switch (ch1) {
            case 'i':
              z = asin(z);
              break;
            case 'j':
              z = acos(z);
              break;
            case 'k':
              z = atan(z);
              break;
            }
            z = angle_conv(z);
          } else if (ch1 == 'l') {
            z = log10(z); //log
          } else if (ch1 == 'p') {
            z = pow(z, 2); //square
          } else if (ch1 == 'h') {
            z = PI; //pi
          }

          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
          gotoxy(row, col);
        }
      }

      if (ch1 == '+' || ch1 == '-' || ch1 == '=') {
        y = add(y, z, ch);
        if (ch2 != '0') {
          y = add(r, y, ch2);
          ch2 = '0';
        }
      } else {
        if (ch == '*' || ch == '/')
          y = add(y, z, ch);
        else {
          ch2 = ch;
          r = y;
          y = z;
        }
      }
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("%g", y);
      ch = ch1;
      ch1 = '0';
      if (ch == '=' || ch1 == '=')
        break;
    }
    if (ch == 'o' || ch1 == 'o') // For Clear The Screen
    {
      y = 0;
      z = 0;
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("0");
      gotoxy(row, col);
      continue;
    }
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%g", y);
    z = 0;
  }

  // getch();
  closegraph();
  remove_mouse();
  exit(0);

}

//************************************************************
// *
// This function gets the user's Input *
// *
//************************************************************

char input() {
  X = 0;
  Y = 0;
  char ch;
  show_mouse();
  if (bflag != 'u') {
    button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
    button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
    button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
    button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
    bflag = 'u';
  }
  do {
    mouse();
    if (X >= 350 && X <= 380 && Y >= 205 && Y <= 225) // Condition For 7
    {
      hide_mouse();
      button_3d(350, 205, 380, 225, CLICKED, "7", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 205, 380, 225, UNCLICKED, "7", 0);
      show_mouse();
      ch = '7';
      return ch;
    }

    //**********************************************

    if (X >= 390 && X <= 420 && Y >= 205 && Y <= 225) // Condition For 8
    {

      hide_mouse();
      button_3d(390, 205, 420, 225, CLICKED, "8", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 205, 420, 225, UNCLICKED, "8", 0);
      show_mouse();
      ch = '8';
      return ch;
    }

    //*****************************************

    if (X >= 430 && X <= 460 && Y >= 205 && Y <= 225) // Condition For 9
    {
      hide_mouse();
      button_3d(430, 205, 460, 225, CLICKED, "9", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 205, 460, 225, UNCLICKED, "9", 0);
      show_mouse();
      ch = '9';
      return ch;
    }

    //***********************************

    if (X >= 350 && X <= 380 && Y >= 230 && Y <= 250) // Condition For 4
    {
      hide_mouse();
      button_3d(350, 230, 380, 250, CLICKED, "4", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 230, 380, 250, UNCLICKED, "4", 0);
      show_mouse();
      ch = '4';
      return ch;
    }

    //***********************************

    if (X >= 390 && X <= 420 && Y >= 230 && Y <= 250) // Condition For 5
    {
      hide_mouse();
      button_3d(390, 230, 420, 250, CLICKED, "5", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 230, 420, 250, UNCLICKED, "5", 0);
      show_mouse();
      ch = '5';
      return ch;
    }

    //***********************************

    if (X >= 430 && X <= 460 && Y >= 230 && Y <= 250) // Condition For 6
    {
      hide_mouse();
      button_3d(430, 230, 460, 250, CLICKED, "6", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 230, 460, 250, UNCLICKED, "6", 0);
      show_mouse();
      ch = '6';
      return ch;
    }

    //***********************************

    if (X >= 480 && X <= 510 && Y >= 230 && Y <= 250) // Condition For *
    {
      hide_mouse();
      button_3d(480, 230, 510, 250, CLICKED, "*", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 230, 510, 250, UNCLICKED, "*", 0);
      show_mouse();
      ch = '*';
      return ch;
    }
    //***********************************

    if (X >= 515 && X <= 545 && Y >= 230 && Y <= 250) // Condition For /
    {
      hide_mouse();
      button_3d(515, 230, 545, 250, CLICKED, "/", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 230, 545, 250, UNCLICKED, "/", 0);
      show_mouse();
      ch = '/';
      return ch;
    }

    //***********************************
    int a, b;
    if (X >= 350 && X <= 380 && Y >= 255 && Y <= 275) // Condition For 1
    {
      hide_mouse();
      button_3d(350, 255, 380, 275, CLICKED, "1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 255, 380, 275, UNCLICKED, "1", 0);
      show_mouse();
      ch = '1';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 255 && Y <= 275) // Condition For 2
    {
      hide_mouse();
      button_3d(390, 255, 420, 275, CLICKED, "2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 255, 420, 275, UNCLICKED, "2", 0);
      show_mouse();
      ch = '2';
      return ch;
    }

    // *************************************

    if (X >= 430 && X <= 460 && Y >= 255 && Y <= 275) // Condition For 3
    {
      hide_mouse();
      button_3d(430, 255, 460, 275, CLICKED, "3", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 255, 460, 275, UNCLICKED, "3", 0);
      show_mouse();
      ch = '3';
      return ch;
    }

    // *************************************

    if (X >= 350 && X <= 380 && Y >= 280 && Y <= 300) // Condition For 0
    {
      hide_mouse();
      button_3d(350, 280, 380, 300, CLICKED, "0", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 280, 380, 300, UNCLICKED, "0", 0);
      show_mouse();
      ch = '0';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 280 && Y <= 300) // Condition For .
    {
      hide_mouse();
      button_3d(390, 280, 420, 300, CLICKED, ".", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 280, 420, 300, UNCLICKED, ".", 0);
      show_mouse();
      ch = '.';
      return ch;
    }

    //**********************************************

    if (X >= 430 && X <= 460 && Y >= 280 && Y <= 300) // Condition For pi
    {
      hide_mouse();
      button_3d(430, 280, 460, 300, CLICKED, "pi", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0);
      show_mouse();
      ch = 'h';
      return ch;
    }

    //***********************************************

    if (X >= 480 && X <= 510 && Y >= 255 && Y <= 275) // Condition For -
    {
      hide_mouse();
      button_3d(480, 255, 510, 275, CLICKED, "-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 255, 510, 275, UNCLICKED, "-", 0);
      show_mouse();
      ch = '-';
      return ch;
    }

    //**************************************************

    if (X >= 515 && X <= 545 && Y >= 255 && Y <= 275) // Condition For +
    {
      hide_mouse();
      button_3d(515, 255, 545, 275, CLICKED, "+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 255, 545, 275, UNCLICKED, "+", 0);
      show_mouse();
      ch = '+';
      return ch;
    }

    //*****************************************************

    if (X >= 350 && X <= 460 && Y >= 305 && Y <= 325) // Condition For =
    {
      hide_mouse();
      button_3d(350, 305, 460, 325, CLICKED, "=", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 305, 460, 325, UNCLICKED, "=", 0);
      show_mouse();
      ch = '=';
      return ch;
    }

    //*****************************************************

    if (X >= 480 && X <= 545 && Y >= 305 && Y <= 325) // Condition For shift
    {
      hide_mouse();
      button_3d(480, 305, 545, 325, CLICKED, "shift", BLUE);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE);
      show_mouse();
      ch = '~';
      sflag = 1;
      return ch;
    }

    //*************************************

    if (X >= 480 && X <= 510 && Y >= 205 && Y <= 225) // Condition For AC
    {
      hide_mouse();
      button_3d(480, 205, 510, 225, CLICKED, "AC", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4);
      show_mouse();
      ch = 'o';
      return ch;
    }
    /********************C*/    if (X >= 515 && X <= 545 && Y >= 205 && Y <= 225) // Condition For C
    {
      hide_mouse();
      button_3d(515, 205, 545, 225, CLICKED, "CE", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4);
      show_mouse();
      ch = 'a';
      return ch;
    }

    // ****************************************

    if (X >= 100 && X <= 150 && Y >= 205 && Y <= 230) // Condition For Sin
    {
      hide_mouse();
      button_3d(100, 205, 150, 230, CLICKED, "Sin", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0);
      show_mouse();
      ch = 's';
      return ch;
    }

    //***********************************

    if (X >= 160 && X <= 210 && Y >= 205 && Y <= 230) // Condition For Cos
    {
      hide_mouse();
      button_3d(160, 205, 210, 230, CLICKED, "Cos", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0);
      show_mouse();
      ch = 'c';
      return ch;
    }

    //***********************************

    if (X >= 515 && X <= 545 && Y >= 280 && Y <= 300) //inverse
    {
      hide_mouse();
      button_3d(515, 280, 545, 300, CLICKED, "inv", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0);
      show_mouse();
      ch = 'm';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 205 && Y <= 230) // Condition For Tan
    {
      hide_mouse();
      button_3d(220, 205, 270, 230, CLICKED, "Tan", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0);
      show_mouse();
      ch = 't';
      return ch;
    }

    //*********************************** */
    if (X >= 100 && X <= 150 && Y >= 250 && Y <= 275) // Condition For sin^-1
    {
      hide_mouse();
      button_3d(100, 250, 150, 275, CLICKED, "sin^-1", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0);
      show_mouse();
      ch = 'i';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 250 && Y <= 275) // Condition For cos^-1
    {
      hide_mouse();
      button_3d(160, 250, 210, 275, CLICKED, "cos^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0);
      show_mouse();
      ch = 'j';
      return ch;
    }
    //**************************

    if (X >= 430 && X <= 460 && Y >= 350 && Y <= 370) // Condition For MR
    {
      hide_mouse();
      button_3d(430, 350, 460, 370, CLICKED, "MR", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);
      show_mouse();
      ch = '?';
      return ch;
    }
    if (X >= 390 && X <= 420 && Y >= 350 && Y <= 370) // Condition For M-
    {
      hide_mouse();
      button_3d(390, 350, 420, 370, CLICKED, "M-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
      show_mouse();
      ch = '<';
      return ch;
    }
    if (X >= 350 && X <= 380 && Y >= 350 && Y <= 370) // Condition For M+
    {
      hide_mouse();
      button_3d(350, 350, 380, 370, CLICKED, "M+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
      show_mouse();
      ch = '>';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 250 && Y <= 275) // Condition For tan^-1
    {
      hide_mouse();
      button_3d(220, 250, 270, 275, CLICKED, "tan^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0);
      show_mouse();
      ch = 'k';
      return ch;
    }
    //**************************

    if (X >= 100 && X <= 150 && Y >= 300 && Y <= 325) // Condition For ln
    {
      hide_mouse();
      button_3d(100, 300, 150, 325, CLICKED, "ln", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0);
      show_mouse();
      ch = 'n';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 300 && Y <= 325) // Condition For log
    {
      hide_mouse();
      button_3d(160, 300, 210, 325, CLICKED, "log", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(160, 300, 210, 325, UNCLICKED, "log", 0);
      show_mouse();
      ch = 'l';
      return ch;
    }
    //**************************

    if (X >= 220 && X <= 270 && Y >= 300 && Y <= 325) // Condition For X^2
    {
      hide_mouse();
      button_3d(220, 300, 270, 325, CLICKED, "x^2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0);
      show_mouse();
      ch = 'p';
      return ch;
    }
    if (X >= 100 && X <= 150 && Y >= 350 && Y <= 370) // Condition For deg
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, CLICKED, "deg", 15);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
      show_mouse();
      ch = 'd';
      flagp = flag;
      flag = ch;
      return ch;
    } 
//**************************
    if (X >= 160 && X <= 210 && Y >= 350 && Y <= 370) // Condition For rad
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, CLICKED, "rad", 15);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 15);
      show_mouse();
      ch = 'r';
      flagp = flag;
      flag = ch;

      return ch;
    }
    if (X >= 220 && X <= 270 && Y >= 350 && Y <= 370) // Condition For gra
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, CLICKED, "gra", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 15);
      show_mouse();
      ch = 'g';
      flagp = flag;
      flag = ch;
      return ch;

    }
    if ((X >= 480 && X <= 545 && Y >= 350 && Y <= 370) || (X >= 575 && X <= 595 && Y >= 23 && Y <= 40)) //OFF
    {
      free(mem);
      exit(0);
    }
    if (X >= 108 && X <= 208 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, CLICKED, "DEC", 15);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
      show_mouse();
      ch = 'u';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 218 && X <= 318 && Y >= 140 && Y <= 160) // Condition For oct
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, CLICKED, "OCT", 15);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 15);
      show_mouse();
      ch = 'v';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 328 && X <= 428 && Y >= 140 && Y <= 160) // Condition For hex
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, CLICKED, "HEX", 15);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 15);
      show_mouse();
      ch = 'w';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 438 && X <= 538 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, CLICKED, "BIN", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 15);
      show_mouse();
      ch = 'x';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 480 && X <= 510 && Y >= 280 && Y <= 300) {
      hide_mouse();
      button_3d(480, 280, 510, 300, CLICKED, "sqrt", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0);
      show_mouse();
      ch = 'q';
      return ch;
    }

  } while (kbhit() == 0);
  ch = getch();
  return ch;
}

//***********************************************
// *
// This function performs the Calculations *
// *
//***********************************************
double add(double x, double y, char ch) {
  switch (ch) {
  case '+':
    y = x + y;
    break;
  case '-':
    y = x - y;
    break;
  case '*':
    y = x * y;
    break;
  case '/':
    y = x / y;
  }
  return y;
}

double angle_conv(double no) {
  if (flagp == 'd') {
    if (flag == 'r') {
      no = no * PI / 180;
    }
    if (flag == 'g') {
      no = no * 1.1111111;
    }
  } else if (flagp == 'r') {
    if (flag == 'd') {
      no = no * 180 / PI;
    }
    if (flag == 'g') {
      no = no * 180 / PI * 1.1111111;
    }
  } else if (flagp == 'g') {
    if (flag == 'r') {
      no = no / (180 * 1.1111111) * PI;
    }
    if (flag == 'd') {
      no = no / 1.1111111;
    }
  }
  return (no);
}

void basecng(double y, double pnt1) {
  char str[17];
  if (pnt1 != 0) {
    gotoxy(row, col);
    printf("The trial version does not support this feature");
    getch();
    bflag = 'u';
    bflagp = '0';
    main();
  }
  if (bflagp != 'u') {
    gotoxy(row, col);
    printf("The trial version does not support this feature ");
    getch();
    bflagp = '0';
    bflag = 'u';
    main();
  }
  switch (bflag) {
  case 'v':
    itoa(y, str, 8);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    break;

  case 'w':
    itoa(y, str, 16);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    // getch();
    break;

  case 'x':
    itoa(y, str, 2);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    // getch();
    bflagp = '0';
    break;
  }
  bflag = 'u';
}
 




// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.cpp"
using namespace std;

int main()
{
    login userLogin;
    string userChoice;
    cout << "\t\t\t_____________________________________________\n\n\n";
    cout << "\t\t\t         Welcome to the NEMO 2023 Login!       \n\n";
    cout << "\t\t\t_________           Menu           __________\n\n";
    cout << "\t | Press 1 to LOGIN                              |" << endl;
    cout << "\t | Press 2 to REGISTER                           |" << endl;
    cout << "\t | Press 3 if you forgot PASSWORD                |" << endl;
    cout << "\t | Press 4 to EXIT                               |" << endl;
    cout << "\n\t\t\t Please Enter your choice: ";
    cin >> userChoice;
    cout << endl;

    if (userChoice == "1")
    {
        userLogin.Login();
        main();
    }
    else if (userChoice == "2")
    {
        userLogin.Registration();
        main();
    }
    else if (userChoice == "3")
    {
        userLogin.ForgotPassword();
        main();
    }
    else if (userChoice == "4")
    {
        cout << "\t\t\t Goodbye! \n\n";
    }
    else
    {
        system("cls");
        cout << "\t\t\t Please select from the options above\n";
        main();
    }
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.h"
using namespace std;

void login::Login()
{
    string count;
    string username, password, id, recordPass, recordSecurity;
    system("cls");
    cout << "\n\t\t\t Please enter the username and password: " << endl;
    cout << "\t\t\t USERNAME: ";
    cin >> username;
    cout << "\t\t\t PASSWORD: ";
    cin >> password;

    string loginHash = password;
    hash<string> mystdhash;
    int loginHashPassword = mystdhash(loginHash);

    ifstream input("data.txt");

    while (input >> id >> recordPass >> recordSecurity)
    {
        if (id == username && stoi(recordPass) == loginHashPassword)
        {
            count = "1";
            system("cls");
        }
    }
    input.close();
    if (count == "1")
    {
        cout << username << "\nLogin successful!\n";
        string choice = "1";
        while (choice != "2")
        {
            cout << "\t\t\t_____________________________________________\n\n\n";
            cout << "\t\t\t         Welcome to the NEMO 2023 Login!         \n\n";
            cout << "\t\t\t_______ Currently Logged In: " << username << " ________\n\n";
            cout << "\t\t\t_________           Menu           __________\n\n";
            cout << "\t | Press 1 to PLAY GAME                              |" << endl;
            cout << "\t | Press 2 to LOGOUT                                 |" << endl;
            cout << "\n\t\t\t Please Enter your choice: ";
            cin >> choice;
            cout << endl;

            if (choice == "1")
            {
                system("cls");
                DrunkGame();
            }
            else if (choice == "2")
            {
                system("cls");
                cout << "Logging out" << endl;
            }
            else
            {
                system("cls");
                cout << "Choice invalid, try again";
            }
        }
    }
    else
    {
        system("cls");
        cout << "\n Username or password is incorrect, please try again or register\n";
    }
}

void login::Registration()
{
    string regUser, regPassword, regId, regPass, securityQuestion, regSecure, regCount;
    system("cls");
    cout << "\n\t\t\t Enter Username: ";
    cin >> regUser;
    cout << "\t\t\t Enter Password: ";
    cin >> regPassword;
    cout << "\t\t\t Security Question: What was your favorite childhood movie?: ";
    cin.ignore();
    getline(cin, securityQuestion);

    string hashing = regPassword;
    hash<string> mystdhash;
    int hashPassword = mystdhash(hashing);

    string secureHashing = securityQuestion;
    hash<string> mystdhash2;
    int securityHash = mystdhash2(secureHashing);

    ifstream input("data.txt");
    input.seekg(0, ios::end);

    if (input.tellg() == 0)
    {
        ofstream f1("data.txt", ios::app);
        f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
        system("cls");
        cout << "\n\t\t\t Registration successful!\n";
        return;
    }
    else
    {
        ifstream input("data.txt");
        while (input >> regId >> regPass >> regSecure)
        {
            if (regUser == regId)
            {
                string decision;
                cout << "\n\t\tUsername already taken.\n";
                cout << "\t\tEnter 1 to enter a new one\n";
                cout << "\t\tEnter 2 to go back to the menu\n";
                cout << "\n\t\tEnter choice: ";
                cin >> decision;

                if (decision == "1")
                {
                    Registration();
                }
                else if (decision == "2")
                {
                    system("cls");
                    cout << "\tReturning to menu\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tInvalid Entry, returning to menu." << endl;
                    return;
                }
            }
            else
            {
                regCount = "1";
            }
        }
        if (regCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
            system("cls");
            cout << "\n\t\t\t Registration successful!\n";
            return;
        }
    }
}

void login::DrunkGame()
{
    srand(time(0));
    const int size = 60;
    cout << "Enter a letter to begin \n ";
    char x;
    cin >> x;
    int position = size / 2;
    while (true)
    {
        cout << "|START|";
        for (int i = 0; i < size; i++)
        {
            if (i == position)
                cout << x;
            else
                cout << " ";
        }
        cout << "|END|" << endl;
        int move = rand() % 3 - 1;
        position = position + move;
        if (position < 1)
        {
            cout << "Guess you were too drunk to make it to the end..." << endl;
            break;
        }
        if (position > size - 1)
        {
            cout << "You might be drunk, but you made it to the end!" << endl;
            break;
        }
        for (int sleep = 0; sleep < 1000000; ++sleep)
            ;
    }
    system("pause");
    system("cls");
}

void login::ForgotPassword()
{
    string forgotChoice, count, secondCount;
    system("cls");
    cout << "\n\t\t\tPress 1 to enter USERNAME\n";
    cout << "\t\t\tPress 2 to go back to MENU\n";
    cout << "\n\t\t\tEnter choice: ";
    cin >> forgotChoice;

    if (forgotChoice == "1")
    {
        string user, userSecurity, forgotId, forgotPass, forgotSecurity;
        int newHashPassword, forgotSecHash;
        system("cls");
        cout << "\n\t\tEnter USERNAME: ";
        cin >> user;
        cout << endl;

        ifstream input("data.txt");
        while (input >> forgotId >> forgotPass >> forgotSecurity)
        {
            if (user == forgotId)
            {
                cout << "\n\t\tUser found\n\t\tSecurity Question: What was your favorite childhood movie?: ";
                cin.ignore();
                getline(cin, userSecurity);
                cout << endl;

                string hashing = userSecurity;
                hash<string> mystdhash;
                forgotSecHash = mystdhash(hashing);

                if (stoi(forgotSecurity) == forgotSecHash)
                {
                    system("cls");
                    string newPass;
                    cout << "\t\tSecurity Question correct\n";
                    cout << "\n\t\tEnter new PASSWORD: ";
                    cin >> newPass;

                    string newPassHash = newPass;
                    hash<string> mystdhash2;
                    newHashPassword = mystdhash2(newPassHash);

                    count = "1";
                    break;
                }
                else
                {
                    string incorrectChoice;
                    system("cls");
                    cout << "\t\tSecurity Question incorrect\n";
                    cout << "\t\tPress 1 to Re-Enter\n\t\tPress 2 to return to MENU\n";
                    cout << "\n\t\tEnter choice: ";
                    cin >> incorrectChoice;

                    if (incorrectChoice == "1")
                    {
                        ForgotPassword();
                    }
                    if (incorrectChoice == "2")
                    {
                        system("cls");
                        cout << "\tReturning to MENU\n";
                        return;
                    }
                    else
                    {
                        system("cls");
                        cout << "\tInvalid answer... Returning to menu\n";
                        return;
                    }
                }
            }
            else
            {
                string newChoice;
                system("cls");
                cout << "\t\tUser not found\n";
                cout << "\t\tPress 1 to Re-Enter USERNAME\n\t\tPress 2 to return to MENU\n";
                cout << "\n\t\tEnter choice: ";
                cin >> newChoice;
                if (newChoice == "1")
                {
                    ForgotPassword();
                }
                else if (newChoice == "2")
                {
                    system("cls");
                    cout << "\tReturning to MENU\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tChoice invalid... Returning to MENU\n";
                    return;
                }
            }
        }
        input.close();
        if (count == "1")
        {
            DeleteLine(user);
            secondCount = "1";
        }
        if (secondCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << user << ' ' << newHashPassword << ' ' << forgotSecHash << endl;
            system("cls");
            cout << "\t\t\t Your password has been updated!\n";
            return;
        }
    }
    else if (forgotChoice == "2")
    {
        system("cls");
        cout << "\tReturning to MENU\n";
        return;
    }
    else
    {
        system("cls");
        cout << "\tChoice invalid... Try again\n";
        ForgotPassword();
    }
}

void login::DeleteLine(string userDelete)
{
    string line;
    ifstream myFile;
    myFile.open("data.txt");
    ofstream temp;
    temp.open("temp.txt");
    while (getline(myFile, line))
    {
        if (line.substr(0, userDelete.size()) != userDelete)
        {
            temp << line << endl;
        }
    }
    myFile.close();
    temp.close();
    remove("data.txt");
    rename("temp.txt", "data.txt");
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#pragma once
#include <string.h>
using namespace std;

class login
{
private:
    void DrunkGame();
    void DeleteLine(string username);

public:
    void Login();
    void Registration();
    void ForgotPassword();
};


// Autor : Nemonet TYP
// Title: Encryption and Decryption project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
using namespace std;

int main()
{
   int i, x;
   char str[100];

   cout << "Please enter a string:\t";
   cin >> str;

   cout << "\nPlease choose following options:\n";
   cout << "1 = Encrypt the string.\n";
   cout << "2 = Decrypt the string.\n";
   cin >> x;

   //using switch case statements
   switch(x)
   {
      //first case for encrypting a string
      case 1:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
            str[i] = str[i] + 2; //the key for encryption is 3 that is added to ASCII value

         cout << "\nEncrypted string: " << str << endl;
         break;

      //second case for decrypting a string
      case 2:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
         str[i] = str[i] - 2; //the key for encryption is 3 that is subtracted to ASCII value

      cout << "\nDecrypted string: " << str << endl;
      break;

      default:
         cout << "\nInvalid Input !!!\n";
   }
   return 0;
}


/*
	project status : 1
 	Date : Oct 11, 2022
	Author : Easter Maxwell
	co-factor : The Young Programmer Nemonet (Nov 16, 2022)
*/

/*'Error --1' is just a random error message*/

//control number output
#include <iomanip>   

//for system operations
#include <windows.h>

#include <iostream>

using namespace std;

void standard_output()
{
	int fahr;
	int order;
	int celsius;
	int lower_value;
	int upper_value;

	cout << '\n';
	cout << "[+]Enter Order value : ";
	cin  >> order;

	cout << '\n';
	cout << "[+]Enter Lower Value : ";
	cin  >> lower_value;

	cout << '\n';
	cout << "[+]Enter Upper Value : ";
	cin  >> upper_value;

	/*enables 'fahr' to start printing from the lowest value*/
	fahr = lower_value;

	cout << '\n';
	cout << "\t\t\t\t\t         ";
	cout << "--- Temperature ---" << '\n';

	cout << '\n';
	cout << "\t\t\t\t\t    "
	     << "+----------------------------+"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "| Fahrenheit       Celsius   |"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "+--------------|-------------+";

	while (fahr <= upper_value)
	{
		/*Formula (Fahrenheit to Celsius)*/
		celsius = 5 * (fahr - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t    ";

		cout << "|     " << fahr << "\t\t " << celsius << "     |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+--------------|-------------+";

		/*increments fahrenheit by the 'order' value*/
		fahr = fahr + order;
	}

}

void user_specific_output()
{
	string option;
	float fahr_input;
	float fahr_value;
	float celsius_input;
	float celsius_value;

	cout << "\t\t\t\t\t       "
		 << "--- Available Options ---" << '\n';

	cout << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press F to convert temperature from Fahrenheit to celsius |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| --------------------------------------------------------- |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press C to convert temperature from Celsius to Fahrenheit |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+";

	cout << "\n\n";
	cout << "[:]Enter Option : ";
	cin  >> option;

	if (option == "C" || option == "c")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Celsius : ";
		cin  >> celsius_input;

		/*Formula (Celsius to Fahrenheit)*/
		fahr_value = (9.0 / 5.0) * celsius_input + 32;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|   Celsius       Fahrenheit |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << celsius_input << "\t   |      " << setprecision(3) << fahr_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";

	}

	else if (option == "F" || option == "f")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Fahrenheit : ";
		cin  >> fahr_input;

		/*Formula (Fahrenheit to Celsius)*/
		celsius_value = 5 * (fahr_input - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|  Fahrenheit       Celsius  |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << fahr_input << "\t   |    " << setprecision(3) << celsius_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

}

int main()
{
	string user_input;

	cout << "\t\t\t\t\t    ";
	cout << "--- TEMPERATURE CALCULATOR ---";
	cout << "\n\n";
	cout<<"\n\t\tDeveloped By:";
    	cout<<" Easter Maxwell (Oct 11, 2022)";
    	cout<<"\n\t\t In Collaboration with:";
    	cout<<" Nemonet (TYP) (Nov 16, 2022)";
    	cout<<"\n\n\n\n";

	cout << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press 0 to display standard  input |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| ---------------------------------- |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press X to display specific output |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\n\n";

	cout << "[:]Enter option : ";
	cin  >> user_input;

	if (user_input == "0" || user_input == "o" || user_input == "O")
	{
		Sleep(500);

		/*display this function*/
		standard_output();
	}

	else if (user_input == "X" || user_input == "x" || user_input == "*")
	{
		Sleep(500);

		/*display this function*/
		user_specific_output();
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

	return 0;

}



#include <iostream>

using namespace std;

//addition
long double add(long double num1, long double num2)
{
    long double result;
    {
        result = num1 + num2;
    }
    return result;
}
//subtraction
long double sub(long double num1a, long double num2a)
{
    long double resulta;
    {
        resulta = num1a - num2a;
    }
    return resulta;
}
//multiplication
long double mltp(long double num1b, long double num2b)
{
    long double resultb;
    {
        resultb = num1b * num2b;
    }
    return resultb;
}
//division
long double dv(long double num1c, long double num2c)
{
    long double resultc;
    {
        resultc = num1c / num2c;
    }
    return resultc;
}
//exponent
long double power(long double base, long double exponent)
{
    long double resultd = 1;
    for(long double i = 0; i < exponent; i++)
    {
       resultd = base * resultd; 
    }
    return resultd;
}

int panel;
long double a;
long double b;

void ctrl_panel()
{
    cout << "Control Panel\n\nOperators: \n\n1.Addition\n2.Subtraction\n3.Multiplication\n4.Division\n5.Exponent\n6.Multiplication Table\n7.Celcius to Farenheit\n8.Farenheit to Celcius\n\n0.Back\n";
    cin >> panel;
    switch(panel)
    {
        case 0:
            return;
            break;
        case 1:
            cout << "Addition\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << add(a, b) << endl << endl;
            break;
        case 2:
            cout << "Subtraction\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << sub(a, b) << endl << endl;
            break;
        case 3:
            cout << "Multiplication\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << mltp(a, b) << endl << endl;
            break;
        case 4:
            cout << "Division\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << dv(a, b) << endl << endl;
            break;
        case 5:
            cout << "Exponent\n\nBase: \n";
            cin >> a;
            cout << "Power: \n";
            cin >> b;
            cout << power(a, b) << endl << endl;
            break;
        case 7:
            cout << "Celcius to Farenheit\n\nTemperature: \n";
            cin >> a;
            cout << a * 1.8 + 32 << "℉" << endl << endl;
            break;
        case 8:
            cout << "Farenheit to Celcius\n\nTemperature: \n";
            cin >> a;
            cout << (a - 32) * 5/9 << "℃" << endl << endl;
            break;
        case 6:
            cout << "Multiplication table\n\nPlease select a number you want to show the table of: \n";
            int num;
            cin >> num;
            int num2 = 0;
            cout << "Range: \n";
            int range;
            cin >> range;
    
            for(int i = 0; i < range; i++)
            {
                num2++;
                cout << num << " x " << num2 << " = " << num * num2 << endl << endl;
            }
            break; 
        }
}

int main()
{
    int choice;
    do
    {
        cout << "Welcone to NemoNet Calculator\n\n1.Enter\n0.Quit\n\n";
        cout << " contact NemoNet on: \n\nGitHub\n";
        cin >> choice;
        
        switch(choice)
        {
            case 1:
                ctrl_panel();
                break;
            case 0:
                return 0;
                break;
        }
    }
    while(choice != 0);
}


// Autor : Nemonet TYP
// Title: Supermarket Billing System project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL



#include<iostream>
#include<windows.h>
#include<conio.h>
#include<fstream>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iomanip>
using namespace std;
//global variable declaration
int k=7,r=0,flag=0;
COORD coord = {0, 0};

void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
struct date
{
    int mm,dd,yy;
};

ofstream fout;
ifstream fin;

class item
{
    int itemno;
    char name[25];
    date d;
public:
    void add()
    {
        cout<<"\n\n\tItem No: ";
        cin>>itemno;
        cout<<"\n\n\tName of the item: ";
        cin>>name;
//gets(name);
        cout<<"\n\n\tManufacturing Date(dd-mm-yy): ";
        cin>>d.mm>>d.dd>>d.yy;
    }
    void show()
    {
        cout<<"\n\tItem No: ";
        cout<<itemno;
        cout<<"\n\n\tName of the item: ";
        cout<<name;
        cout<<"\n\n\tDate : ";
        cout<<d.mm<<"-"<<d.dd<<"-"<<d.yy;
    }
    void report()
    {
        gotoxy(3,k);
        cout<<itemno;
        gotoxy(13,k);
        puts(name);
    }
    int retno()
    {
        return(itemno);

    }

};

class amount: public item
{
    float price,qty,tax,gross,dis,netamt;
public:
    void add();
    void show();
    void report();
    void calculate();
    void pay();
    float retnetamt()
    {
        return(netamt);
    }
} amt;

void amount::add()
{
    item::add();
    cout<<"\n\n\tPrice: ";
    cin>>price;
    cout<<"\n\n\tQuantity: ";
    cin>>qty;
    cout<<"\n\n\tTax percent: ";
    cin>>tax;
    cout<<"\n\n\tDiscount percent: ";
    cin>>dis;
    calculate();
    fout.write((char *)&amt,sizeof(amt));
    fout.close();
}
void amount::calculate()
{
    gross=price+(price*(tax/100));
    netamt=qty*(gross-(gross*(dis/100)));
}
void amount::show()
{
    fin.open("itemstore.dat",ios::binary);
    fin.read((char*)&amt,sizeof(amt));
    item::show();
    cout<<"\n\n\tNet amount: ";
    cout<<netamt;
    fin.close();
}

void amount::report()
{
    item::report();
    gotoxy(23,k);
    cout<<price;
    gotoxy(33,k);
    cout<<qty;
    gotoxy(44,k);
    cout<<tax;
    gotoxy(52,k);
    cout<<dis;
    gotoxy(64,k);
    cout<<netamt;
    k=k+1;
    if(k==50)
    {
        gotoxy(25,50);
        cout<<"PRESS ANY KEY TO CONTINUE...";
        getch();
        k=7;
        system("cls");
        gotoxy(30,3);
        cout<<" ITEM DETAILS ";
        gotoxy(3,5);
        cout<<"NUMBER";
        gotoxy(13,5);
        cout<<"NAME";
        gotoxy(23,5);
        cout<<"PRICE";
        gotoxy(33,5);
        cout<<"QUANTITY";
        gotoxy(44,5);
        cout<<"TAX";
        gotoxy(52,5);
        cout<<"DEDUCTION";
        gotoxy(64,5);
        cout<<"NET AMOUNT";
    }
}

void amount::pay()
{
    show();
    cout<<"\n\n\n\t\t*********************************************";
    cout<<"\n\t\t                 DETAILS                  ";
    cout<<"\n\t\t*********************************************";
    cout<<"\n\n\t\tPRICE                     :"<<price;
    cout<<"\n\n\t\tQUANTITY                  :"<<qty;
    cout<<"\n\t\tTAX PERCENTAGE              :"<<tax;
    cout<<"\n\t\tDISCOUNT PERCENTAGE         :"<<dis;
    cout<<"\n\n\n\t\tNET AMOUNT              :Rs."<<netamt;
    cout<<"\n\t\t*********************************************";
}

int main()
{
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout<<setprecision(2);
    fstream tmp("temp.dat",ios::binary|ios::out);
menu:
    system("cls");
    gotoxy(25,2);
    cout<<"Super Market Billing ";
    gotoxy(25,3);
    cout<<"===========================\n\n";
    cout<<"\n\t\t1.Bill Report\n\n";
    cout<<"\t\t2.Add/Remove/Edit Item\n\n";
    cout<<"\t\t3.Show Item Details\n\n";
    cout<<"\t\t4.Exit\n\n";
    cout<<"\t\tPlease Enter Required Option: ";
    int ch,ff;
    float gtotal;
    cin>>ch;
    switch(ch)
    {
    case 1:
ss:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Details";
        gotoxy(25,3);
        cout<<"================\n\n";
        cout<<"\n\t\t1.All Items\n\n";
        cout<<"\t\t2.Back to Main menu\n\n";
        cout<<"\t\tPlease Enter Required Option: ";
        int cho;
        cin>>cho;
        if(cho==1)
        {
            system("cls");
            gotoxy(30,3);
            cout<<" BILL DETAILS ";
            gotoxy(3,5);
            cout<<"ITEM NO";
            gotoxy(13,5);
            cout<<"NAME";
            gotoxy(23,5);
            cout<<"PRICE";
            gotoxy(33,5);
            cout<<"QUANTITY";
            gotoxy(44,5);
            cout<<"TAX %";
            gotoxy(52,5);
            cout<<"DISCOUNT %";
            gotoxy(64,5);
            cout<<"NET AMOUNT";
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            gtotal=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    amt.report();
                    gtotal+=amt.retnetamt();
                    ff=0;
                }
                if(ff!=0) gtotal=0;
            }
            gotoxy(17,k);
            cout<<"\n\n\n\t\t\tGrand Total="<<gtotal;
            getch();
            fin.close();
        }
        if(cho==2)
        {
            goto menu;
        }
        goto ss;
    case 2:
db:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Editor";
        gotoxy(25,3);
        cout<<"=================\n\n";
        cout<<"\n\t\t1.Add Item Details\n\n";
        cout<<"\t\t2.Edit Item Details\n\n";
        cout<<"\t\t3.Delete Item Details\n\n";
        cout<<"\t\t4.Back to Main Menu ";
        int apc;
        cin>>apc;
        switch(apc)
        {
        case 1:
            fout.open("itemstore.dat",ios::binary|ios::app);
            amt.add();
            cout<<"\n\t\tItem Added Successfully!";
            getch();
            goto db;

        case 2:
            int ino;
            flag=0;
            cout<<"\n\n\tEnter Item Number to be Edited :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            fout.open("itemstore.dat",ios::binary|ios::app);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            r=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    int x=amt.item::retno();
                    if(x==ino)
                    {
                        flag=1;
                        fout.seekp(r*sizeof(amt));
                        system("cls");
                        cout<<"\n\t\tCurrent Details are\n";
                        amt.show();
                        cout<<"\n\n\t\tEnter New Details\n";
                        amt.add();
                        cout<<"\n\t\tItem Details editted";
                    }
                }
                r++;
            }
            if(flag==0)
            {
                cout<<"\n\t\tItem No does not exist...Please Retry!";
                getch();
                goto db;
            }
            fin.close();
            getch();
            goto db;

        case 3:
            flag=0;
            cout<<"\n\n\tEnter Item Number to be deleted :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
//fstream tmp("temp.dat",ios::binary|ios::out);
            fin.seekg(0);
            while(fin.read((char*)&amt, sizeof(amt)))
            {
                int x=amt.item::retno();
                if(x!=ino)
                    tmp.write((char*)&amt,sizeof(amt));
                else
                {
                    flag=1;
                }
            }
            fin.close();
            tmp.close();
            fout.open("itemstore.dat",ios::trunc|ios::binary);
            fout.seekp(0);
            tmp.open("temp.dat",ios::binary|ios::in);
            if(!tmp)
            {
                cout<<"Error in File";
                goto db;
            }
            while(tmp.read((char*)&amt,sizeof(amt)))
                fout.write((char*)&amt,sizeof(amt));
            tmp.close();
            fout.close();
            if(flag==1)
                cout<<"\n\t\tItem Succesfully Deleted";
            else if (flag==0)
                cout<<"\n\t\tItem does not Exist! Please Retry";
            getch();
            goto db;
        case 4:
            goto menu;
        default:
            cout<<"\n\n\t\tWrong Choice!!! Retry";
            getch();
            goto db;
        }
    case 3:
        system("cls");
        flag=0;
        int ino;
        cout<<"\n\n\t\tEnter Item Number :";
        cin>>ino;
        fin.open("itemstore.dat",ios::binary);
        if(!fin)
        {
            cout<<"\n\nFile Not Found...\nProgram Terminated!";
            goto menu;
        }
        fin.seekg(0);
        while(fin.read((char*)&amt,sizeof(amt)))
        {
            int x=amt.item::retno();
            if(x==ino)
            {
                amt.pay();
                flag=1;
                break;
            }
        }
        if(flag==0)
            cout<<"\n\t\tItem does not exist....Please Retry!";
        getch();
        fin.close();
        goto menu;
    case 4:
        system("cls");
        gotoxy(20,20);
        cout<<"ARE YOU SURE, YOU WANT TO EXIT (Y/N)?";
        char yn;
        cin>>yn;
        if((yn=='Y')||(yn=='y'))
        {
            gotoxy(12,20);
            system("cls");
            cout<<"************************** THANKS **************************************";
            getch();
            exit(0);
        }
        else if((yn=='N')||(yn=='n'))
            goto menu;
        else
        {
            goto menu;
        }
    default:
        cout<<"\n\n\t\tWrong Choice....Please Retry!";
        getch();
        goto menu;
    }
    return 0;
}


/*This C++ PROGRAM is developed by NemonET TYP and 
special right is given to TEAM TYP for educational purpose  */
//Don't copy source code without permission


#include <iostream>
#include <stdlib.h>

using namespace std;

void calculateGPA();
void calculateCGPA();
void method();

int main()
{
    system("cls");
    int input;
    cout<<"--------------------------------------------------------------------------"<<endl;
    cout<<"                    GPA & CGPA Calculator (Developed by Nemo)             "<<endl;
    cout<<"--------------------------------------------------------------------------\n"<<endl;
    cout<<"            MENU:"<<endl;
    cout<<"                   1. Calculate GPA (Grade Point Average)"<<endl;
    cout<<"                   2. Calculate CGPA (Cummulative Grade Point Average)"<<endl;
    cout<<"                   3. Method that is applied here for calclating GPA & CGPA"<<endl;
    cout<<"                   4. Exit Application"<<endl;
    cout<<"--------------------------------------------------------------------------"<<endl;
    sub:
    cout<<"Enter your choice: ";
    cin>>input;
    switch(input)
    {
        case 1:
                calculateGPA();
                break;

        case 2:
                calculateCGPA();
                break;
        case 3:
                method();
                break;
        case 4:
                exit(EXIT_SUCCESS);
                break;
        default:
            cout<<"You have entered wrong input.Try again!\n"<<endl;
            goto sub;
            break;
    }
}

void calculateGPA()
{
    int q;
    system("cls");
    cout<<"-------------- GPA Calculating -----------------"<<endl;
    cout<<" How many subject's points do you want to calculate? : ";
    cin>>q;

    float credit [q];
    float point [q];

    cout<<endl;
    for(int i=0;i<q;i++)
    {
        cout<<"Enter the credit for the subject "<<i+1<<": ";
        cin>>credit[i];
        cout<<endl;
        cout<<"Enter the point of the subject "<<i+1<<": ";
        cin>>point[i];
        cout<<"-----------------------------------\n\n"<<endl;
    }

    float sum=0;
    float tot;
    for(int j=0;j<q;j++)
    {
        tot=credit[j]*point[j];
        sum=sum+tot;
    }

    float totCr=0;
    for(int k=0;k<q;k++)
    {
        totCr=totCr+credit[k];
    }

    cout<<"\n\n\nTotal Points: "<<sum<<" . Total Credits: "<<totCr<<" .Total GPA: "<<sum/totCr<<" ."<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
}
void calculateCGPA()
{
    system("cls");
    int l;
    cout<<"-------------- CGPA Calculating -----------------\n\n"<<endl;
    cout<<"How many semester results do you want input? :";
    cin>>l;
    cout<<"\n\n"<<endl;
    float semrs[l];
    int i;

    for(i=0;i<l;i++)
    {
        cout<<" Enter Semester "<<i+1<<" Result(GPA): ";
        cin>>semrs[i];
        cout<<"\n"<<endl;
    }

    float semtot=0;
    for(int j=0;j<l;j++)
    {
        semtot=semtot+semrs[j];
    }

    cout<<"******** Your CGPA is "<<semtot/l<<" **********"<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateCGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }

}

void method()
{
    system("cls");
    cout<<"--------------- Method of Calculating GPA & CGPA ---------------\n\n"<<endl;
    cout<<" GPA= Sum of (Credit*Point) / total of credits \n"<<endl;
    cout<<" CGPA=  Sum of GPA / number of semesters "<<endl;
    cout<<"-----------------------------------------------------------------\n\n"<<endl;

    sub:
    int inmenu;
    cout<<"1. Go Back to Main Menu"<<endl;
    cout<<"2. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                main();
                break;
        case 2:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
};


//DEVELOPED BY Nemonet TYP ‍‍‍‍‍‍‍‍‍‍‍‍

//C++ PROJECT

//START OF THE PROGRAM FOR HOTEL MANAGEMENT

#include<iostream>
#include<conio.h>
#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<dos.h>

using namespace std;

//START OF CLASS



class hotel
{

int room_no;
char name[30];
char address[50];
char phone[10];

public:

void main_menu();		//to display the main menu
void add();			//to book a room
void display(); 		//to display the customer record
void rooms();			//to display alloted rooms
void edit();			//to edit the customer record
int check(int);			//to check room status
void modify(int);		//to modify the record
void delete_rec(int);		//to delete the record
void bill(int);                 //for the bill of a record
     };
    //END OF CLASS



//FOR DISPLAYING MAIN MENU



void hotel::main_menu()
{

int choice;
while(choice!=5)
{

  system("cls");
cout<<"\n\t\t\t\t**************************";
cout<<"\n\t\t\t\t SIMPLE HOTEL MANAGEMENT  ";
cout<<"\n\t\t\t\t      * MAIN MENU *";
cout<<"\n\t\t\t\t**************************";
cout<<"\n\n\n\t\t\t1.Book A Room";
cout<<"\n\t\t\t2.Customer Records";
cout<<"\n\t\t\t3.Rooms Allotted";
cout<<"\n\t\t\t4.Edit Record";
cout<<"\n\t\t\t5.Exit";
cout<<"\n\n\t\t\tEnter Your Choice: ";
cin>>choice;

switch(choice)
{

case 1:	add();
break;

case 2: display();
break;

case 3: rooms();
break;

case 4:	edit();
break;

case 5: break;

default:
{

cout<<"\n\n\t\t\tWrong choice.....!!!";
cout<<"\n\t\t\tPress any key to   continue....!!";
getch();

}

}

}

}


//END OF MENU FUNCTION


//FUNCTION FOR BOOKING OF ROOM


void hotel::add()
{

  system("cls");
int r,flag;
ofstream fout("Record.dat",ios::app);

cout<<"\n Enter Customer Detalis";
cout<<"\n -----------------------";
cout<<"\n\n Room no: ";
cout<<"\n Total no. of Rooms - 50";
cout<<"\n Ordinary Rooms from 1 - 30";
cout<<"\n Luxury Rooms from 31 - 45";
cout<<"\n Royal Rooms from 46 - 50";
cout <<"\n Enter The Room no. you want to stay in :- "<<'\n';
cin>>r;

flag=check(r);

if(flag)
cout<<"\n Sorry..!!!Room is already booked";

else
{

room_no=r;
cout<<" Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone No: ";
cin>>phone;

fout.write((char*)this,sizeof(hotel));
cout<<"\n Room is booked...!!!";

}

cout<<"\n Press any key to continue.....!!";

getch();
fout.close();

}


//END OF BOOKING FUNCTION


//FUNCTION FOR DISPLAYING A PURTICULAR CUSTOMER`S RECORD





void hotel::display()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
int r,flag;

cout<<"\n Enter room No. for a particular customer`s details :- "<<'\n';
cin>>r;

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

  system("cls");
cout<<"\n Customer Details";
cout<<"\n -----------------";
cout<<"\n\n Room no: "<<room_no;
cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Phone no: "<<phone;
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room no. not found or vacant....!!";
cout<<"\n\n Press any key to continue....!!";

getch();
fin.close();
}


//END OF DISPLAY FUNCTION

//FUNCTION TO DISPLAY ALL ROOMS OCCUPIED


void hotel::rooms()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
cout<<"\n\t\t\t    List Of Rooms Allotted";
cout<<"\n\t\t\t    -----------------------";
cout<<"\n\n Room No.\tName\t\tAddress\t\t\t\tPhone No.\n";

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
cout<<"\n\n "<<room_no<<"\t\t"<<name;
cout<<"\t\t"<<address<<"\t\t"<<phone;

}

cout<<"\n\n\n\t\t\tPress any key to continue.....!!";
getch();
fin.close();

}


//FUNCTION FOR EDITING RECORDS AND FOR BILL


void hotel::edit()
{

  system("cls");

int choice,r;
cout<<"\n EDIT MENU";
cout<<"\n ----------";
cout<<"\n\n 1. Modify Customer Record";
cout<<"\n 2. Delete Customer Record";
cout<<"\n 3. Bill Of Customer";
cout<<"\n Enter your choice: ";

cin>>choice;
  system("cls");

cout<<"\n Enter room no: " ;
cin>>r;

switch(choice)
{

case 1:	modify(r);
break;

case 2:	delete_rec(r);
break;

case 3: bill(r);
break;

default: cout<<"\n Wrong Choice.....!!";

}
cout<<"\n Press any key to continue....!!!";

getch();
}


int hotel::check(int r)
{

int flag=0;

ifstream fin("Record.dat",ios::in);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

flag=1;
break;

}

}

fin.close();
return(flag);

}


//FUNCTION TO MODIFY CUSTOMERS RECORD


void hotel::modify(int r)
{

long pos,flag=0;

fstream file("Record.dat",ios::in|ios::out|ios::binary);

while(!file.eof())
{

pos=file.tellg();
file.read((char*)this,sizeof(hotel));

if(room_no==r)
{

cout<<"\n Enter New Details";
cout<<"\n ------------------";
cout<<"\n Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone no: ";
cin>>phone;
file.seekg(pos);
file.write((char*)this,sizeof(hotel));
cout<<"\n Record is modified....!!";
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room No. not found or vacant...!!";
file.close();

}


//END OF MODIFY FUNCTION


//FUNCTION FOR DELETING RECORD


void hotel::delete_rec(int r)
{

int flag=0;
char ch;
ifstream fin("Record.dat",ios::in);
ofstream fout("temp.dat",ios::out);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)

{

cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Pone No: "<<phone;
cout<<"\n\n Do you want to delete this record(y/n): ";
cin>>ch;

if(ch=='n')
fout.write((char*)this,sizeof(hotel));
flag=1;

}

else
fout.write((char*)this,sizeof(hotel));

}

fin.close();
fout.close();

if(flag==0)
cout<<"\n Sorry room No. not found or vacant...!!";

else
{

remove("Record.dat");
rename("temp.dat","Record.dat");

}

}


//END OF DELETE FUNCTION


//FUNCTION FOR CUSTOMER`S BILL

void hotel::bill(int r)
{

hotel h1;
ifstream f1;
 f1.open("record.dat",ios::in|ios::binary);

if(!f1)
 cout<<"cannot open";

 else
 {

  f1.read((char*)&h1,sizeof (hotel));
  while(f1)

  {

  f1.read((char*)&h1,sizeof(hotel));

  }

  if (h1.room_no == r)
  {

  if(h1.room_no>=1&&h1.room_no<=30)
  cout<<"your bill = 2000";

  else if (h1.room_no>=35&&h1.room_no<=45)
  cout<<"your bill = 5000" ;

  else
  cout<<"your bill = 7000";

  }

  else
  { cout<<"room no. not found";}

  }

  f1.close();
  getch();

}

//END OF BILLING FUNCTION

//START OF MAIN PROGARM


int main()
{

hotel h;

  system("cls");

cout<<"\n\t\t\t*****************************";
cout<<"\n\t\t\t* HOTEL MANAGEMENT PROJECT  *";
cout<<"\n\t\t\t*****************************";
cout<<"\n\n\t\tDeveloped By:";
cout<<"\t\t Nemonet";
cout<<"\n\t\t\t\t The Young Programmer (TYP)";
cout<<"\n\n\n\n\n\n\n\t\t\t\t\tPress any key to continue....!!";

getch();

h.main_menu();
return 0;
}

//END OF MAIN PROGRAM





#include <iostream>
using namespace std;
int main()
{
    char str[100];
   
   
    cout<<"Enter some text or numbers and see magic:-"<<endl<<endl;
    cout<<"______________________________________"<<endl<<endl;
    cin.getline(str,100);
    cout<<str;
    cout<<"\n______________________________________"<<endl<<endl;
   
    
    for(int b=0;str[b]!='\0';b++){
        
        switch(str[b])
    {
    case 'a':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'b':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'c':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'd':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'e':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'f':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'g':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'h':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'i':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'j':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'k':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'l':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'm':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'n':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'o':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'p':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'r':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 's':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 't':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'u':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'v':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #    ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'w':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'x':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'A':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'B':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'C':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'D':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'E':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'F':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'G':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'H':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'I':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'J':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'K':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'L':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'M':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'N':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'O':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'P':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'Q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'R':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'S':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 'T':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'U':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'V':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #   ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'W':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'X':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'Y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'Z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
        case '0':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }

    case '1':
        {
        cout<<"\n   #  ";
        cout<<"\n  ##  ";
        cout<<"\n   #  ";
        cout<<"\n   #  ";
        cout<<"\n #####";
        cout<<"\n \n   ";
        break;
        }
    case '2':
        {
        cout<<"\n  ###  ";
        cout<<"\n #   # ";
        cout<<"\n    #  ";
        cout<<"\n  #    ";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '3':
        {
        cout<<"\n ##### ";
        cout<<"\n    #  ";
        cout<<"\n   ##  ";
        cout<<"\n    #  ";
        cout<<"\n#####  ";
        cout<<"\n \n    ";
        break;
        }
    case '4':
        {
        cout<<"\n     # ";
        cout<<"\n   # # ";
        cout<<"\n  #  # ";
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n \n    ";
        break;
        }
    case '5':
        {
        cout<<"\n ######";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n      #";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '6':
        {
        cout<<"\n  #####";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '7':
        {
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n    #  ";
        cout<<"\n   #   ";
        cout<<"\n  #    ";
        cout<<"\n \n    ";
        break;
        }
    case '8':
        {
        cout<<"\n  #####";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '9':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n  ##### ";
        cout<<"\n      # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }
     
   case '.':
        {
        cout<<"\n  ## ";
        cout<<"\n #  # ";
        cout<<"\n  ## ";
        cout<<"\n \n     ";
        break;
        }
    default:
        {
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n \n ";
        break;
        }
    }    
    
    return 0;

    }
  }
 }
}

}
    cout<<"\t______________________________________"<<endl;
    cout << "\n\t       And if you liked it,        " << endl;
    cout << " \t   give a star on GitHub !   " << endl;
    cout << "  \t           Thank you!               " << endl;
    cout<<"\t______________________________________"<<endl<<endl;
}


//created by The Young Programmer 🏅aka NemoNet 🖥

#include <iostream>
using namespace std;
int main()
{
    int attemp = 1,ans,guess=0,_won=0,h=100,l=0;
    srand(time(0));
    ans = rand() % 100;
    cout<<"**** PLEASE READ INSTRUCTION ****"<<endl<<endl;
    cout << "NemoNet will generate"<<endl<<"any random number between 0-100"<<endl;
    cout<<"you have to guess the number"<<endl<<"you have 5 attempts / chanses to guess"<<endl<<endl;
    cout<<"After each wrong guess NemoNet will tell you"<<endl<<"Your guess is HIGH or LOW"<<endl;
    cout<<" BEST OF LUCK"<<endl;
while(attemp <= 5)
{
cout<<endl<<"attempts no. :- "<<attemp<<endl;
cout<<"enter the guess between 0 - 100 "<<endl;
cin>>guess;
if(guess < 0 || guess > 100){
  cout<<"INVALID GUESS!!"<<endl;
  continue;
}
else if(guess == ans){
   cout<<"CONGRATULATIONS YOU WON!! your guess "<<guess<<" is correct"<<endl;
   _won = 1;
   break;
   }
else if(guess < ans){
  cout<<"*** Your guess "<<guess<<" * LOW * "<<endl;
  l = guess;
}
else{
  cout<<"*** Your guess "<<guess<<"  * HIGH * "<<endl;
  h = guess;
}
cout<<"*Number is between "<<l<<" ---to---> "<<h<<endl;
attemp++;
}//loop end
cout<<"\n";
if(_won){
  cout<<"THANKS FOR PLAYING!! PLESE GIVE A STAR"<<endl;
}
else{
  cout<<"Sorry you lost! correct answer is: "<<ans<<endl<<"please play again and give A STAR"<<endl;
}
cout<<"\n\n";
cout<<"You can Contact NemoNet for more programming Games :-) \n";
cout<<"https://github.com/The-Young-Programmer";
}


/*-------------------------------------------------------------------------

          GUI Calculator

Programmer           : Nemonet TYP


Software Details
====================
Developed in   : C++
Compiler used  : CodeBlocks
OS             : Windows OS


License   : Protected (Please give the credit of programming to author.)


-------------------------------------------------------------------------------------*/



#include <iostream.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <string.h>
#include <dos.h>

// Window
#define TITLEBARHEIGHT 21
#define BORDERWIDTH 1


#define ADD 1
#define SUBTRACT 2
#define MULTIPLY 3
#define DIVIDE 4

/*--------------------- Global Data ---------------------*/

int ButtonId;
enum bool{false,true};
enum BUTTON{MOUSE_NORMAL = 0,MOUSE_LBUTTON=1,MOUSE_RBUTTON=2,MOUSE_MBUTTON=4};
enum BUTTON_STATUS
{
   BUTTON_STATUS_NORMAL,
   BUTTON_STATUS_DOWN
};

/*------------------------------------------------------
       Mouse Class
------------------------------------------------------*/
class Mouse

{
  private:

   int MouseXpos, MouseYpos;
   BUTTON MouseBtn;
   union REGS in,out;

  public:

   int InstallMouse();
   int ShowMouse();
   int HideMouse();
   void GetMouseStatus();
   BUTTON GetButton();
   int GetPosX();
   int GetPosY();
   void SetMousePosi(int &xpos, int &ypos);
   int MouseInside(int x1, int y1, int x2, int y2);
   void RestrictMousePtr(int x1, int y1, int x2, int y2);

};


 int Mouse::InstallMouse()
 {

  in.x.ax = 0;
  int86(51,&in,&out);
  return out.x.ax;

 }
 int Mouse::ShowMouse()
 {

  in.x.ax = 1;
  int86(51,&in,&out);
  return 1;

 }
 int Mouse::HideMouse()
 {

  in.x.ax = 2;
  int86(51,&in,&out);
  return 1;

 }
 void Mouse::GetMouseStatus()
 {

  in.x.ax = 3;
  int86(51,&in,&out);
  MouseXpos = out.x.cx;
  MouseYpos = out.x.dx;
  MouseBtn = out.x.bx;

 }
 BUTTON Mouse::GetButton()
 {
  return MouseBtn;
 }

 int Mouse::GetPosX()
 {
  return MouseXpos;
 }

 int Mouse::GetPosY()
 {
  return MouseYpos;
 }

 void Mouse::SetMousePosi(int &xpos, int &ypos)
 {
  in.x.ax = 4;
  in.x.cx = xpos;
  in.x.dx = ypos;
  int86(51,&in,&out);
 }
 int Mouse::MouseInside(int x1, int y1, int x2, int y2)
 {
  int x_pos, y_pos;
  in.x.ax = 3;
  int86(51,&in,&out);
  x_pos = out.x.cx;
  y_pos = out.x.dx;

  if(x_pos >= x1 && y_pos >= y1 && x_pos <= x2 && y_pos <= y2)
   return 1;
  else
   return 0;

 }
 void Mouse::RestrictMousePtr(int x1, int y1, int x2, int y2)
 {

  in.x.ax = 7;
  in.x.cx = x1;
  in.x.dx = x2;
  int86(51,&in,&out);

  in.x.ax = 8;
  in.x.cx = y1;
  in.x.dx = y2;
  int86(51,&in,&out);

 }


/*------------------------------------------------------
       End of Mouse Class
------------------------------------------------------*/


/*------------------------------------------------------
       TextBox Class
------------------------------------------------------*/

class TextBox
{

 private:

 int Alignment;

 int Left,Top,Width,Height;
 char Caption[50];

 public:

 TextBox(int left, int top, int width, int height, char caption[],int Align);
 void Draw();
 void SetText(char text[]);
 char *GetText();
 void Clear();
};

 TextBox::TextBox(int left, int top, int width, int height, char caption[],int Align)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  Alignment = Align;
    }


    void TextBox::Draw()
   {
  setfillstyle(SOLID_FILL,WHITE);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(DARKGRAY);
  rectangle(Left,Top,Left+Width,Top+Height);

  setcolor(BLACK);

  settextjustify(Alignment,TOP_TEXT);
  if(Alignment==LEFT_TEXT)
   outtextxy(Left+2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   if(Alignment==RIGHT_TEXT)
    outtextxy(Left+Width-2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   outtextxy(Left+(Width/2),Top+1+((Height/2)-(textheight(Caption)/2)),Caption);


   }


 void TextBox::SetText(char text[])
 {
  if (Left + textwidth(Caption) <= Left + Width - textwidth(" "))
  {
   strcat(Caption,text);
   Draw();
  }
 }

 char *TextBox::GetText()
 {
  return Caption;
 }

 void TextBox::Clear()
 {
  strcpy(Caption,"");
  Draw();
 }


/*------------------------------------------------------
       End of TextBox Class
------------------------------------------------------*/

/*-------------------Mouse Object---------------------*/

static Mouse mouse;

/*------------------------------------------------------
       Button Class
------------------------------------------------------*/

class Button
{

 private:

 int Left,Top,Width,Height,ID;
 char Caption[50];
 BUTTON_STATUS btnStatus;
 void MouseDown();
 void MouseUp();
 bool State;

 public:

 Button(int left, int top, int width, int height, char caption[], int Id);
 void Draw();
 void EnableClickHandler();

};

 Button::Button(int left, int top, int width, int height, char caption[], int Id)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  ID = Id;
  btnStatus = BUTTON_STATUS_NORMAL;
  State = false;
    }


   void Button::Draw()
   {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left+Width,Top,Left+Width,Top+Height);
  line(Left,Top+Height,Left+Width,Top+Height);

  settextjustify(LEFT_TEXT,TOP_TEXT);
  setcolor(BLACK);
  outtextxy(Left + (Width/2) - textwidth(Caption)/2 + 1,
  Top + (Height/2) - textheight(Caption)/2 + 1, Caption);

   }

   void Button::MouseDown()
   {




    mouse.HideMouse();

    setcolor(BLACK);
    line(Left,Top,Left+Width,Top);
    line(Left,Top,Left,Top+Height);

    setcolor(WHITE);
    line(Left+Width,Top,Left+Width,Top+Height);
    line(Left,Top+Height,Left+Width,Top+Height);

    mouse.ShowMouse();




   }

   void Button::MouseUp()
   {



     mouse.HideMouse();

     setcolor(WHITE);
     line(Left,Top,Left+Width,Top);
     line(Left,Top,Left,Top+Height);

     setcolor(BLACK);
     line(Left+Width,Top,Left+Width,Top+Height);
     line(Left,Top+Height,Left+Width,Top+Height);

     mouse.ShowMouse();

   }

   void Button::EnableClickHandler()
   {

  if(State)
  {
   ButtonId = 0;
   State = false;
   return;
  }

  if( mouse.MouseInside(Left,Top,Left+Width,Top+Height) == 1)
  {

   if( mouse.GetButton() == MOUSE_LBUTTON)
   {
    MouseDown();
    btnStatus = BUTTON_STATUS_DOWN;
   }

   else if(btnStatus == BUTTON_STATUS_DOWN &&  mouse.GetButton() == MOUSE_NORMAL)
   {
    MouseUp();
    ButtonId = ID;
    btnStatus = BUTTON_STATUS_NORMAL;
    State = true;

   }

  }

 }

/*------------------------------------------------------
                     End of Button Class
------------------------------------------------------*/

/*------------------------------------------------------
                     Window Class
------------------------------------------------------*/

class Window
{

 private:

 int Left,Top,Width,Height;
 char Caption[50];
 Button *CloseBtn;
 public:

 Window(int left, int top, int width, int height, char caption[]);
 void JCLogo();
 void Draw();
 void EnableClickHandler();
};


 Window::Window(int left, int top, int width, int height, char caption[])
 {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
 }
 void Window::JCLogo()
 {
    /*********** Logo ************/

  setcolor(3);
  setfillstyle(SOLID_FILL,3);
  fillellipse(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-1,TITLEBARHEIGHT/2-1);
  setcolor(15);
  setfillstyle(SOLID_FILL,15);
  circle(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-3);
  settextstyle(SMALL_FONT,0,0);
  outtextxy(Left+6,Top+4,"JC");
  settextstyle(0,0,0);
 }
 void Window::Draw()
 {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left,Top+Height,Left+Width,Top+Height);
  line(Left+Width,Top,Left+Width,Top+Height);

  setfillstyle(SOLID_FILL,BLUE);
  bar(Left+BORDERWIDTH,Top+BORDERWIDTH,
  Left+Width-(BORDERWIDTH*2),Top+TITLEBARHEIGHT);

  setcolor(WHITE);
  settextjustify(LEFT_TEXT,TOP_TEXT);
  outtextxy(Left+(BORDERWIDTH*2)+TITLEBARHEIGHT+2,Top+(BORDERWIDTH*2)+(TITLEBARHEIGHT/2)-(textheight(Caption)/2),Caption);
  CloseBtn = new Button(Left+Width-TITLEBARHEIGHT-1, Top+2,TITLEBARHEIGHT-2, TITLEBARHEIGHT-2, "X", 9809);
  CloseBtn->Draw();

  JCLogo();

 }
 void Window::EnableClickHandler()
 {
  CloseBtn->EnableClickHandler();
  if (ButtonId == 9809)
  exit(0);

 }


/*------------------------------------------------------
       End of Window Class
------------------------------------------------------*/


/*------------------------------------------------------
       Main Function
------------------------------------------------------*/

void main()
{
 int gd=DETECT,gm,ch,errorcode;
 double opr1 = 0,opr2 = 0,result = 0,d=0;
 int Operation=0;
 double temp;
 char *chr,str[30];
 int len;
 int x = 160,y = 130;
 int w = 50, h = 40;
 char deci[]={"."};

 char btn[][3]={"AC","/","X","<-","7","8","9","-",
 "4","5","6","+","1","2","3","=","0",".","+/-"};


  // initialize graphics and local variables
  initgraph(&gd,&gm,"c://turboc3//bgi");

  // read result of initialization
  errorcode = graphresult();

  if (errorcode != grOk)// an error occurred
  {
   cout<<"Graphics error :: "<<grapherrormsg(errorcode);
   cout <<"\n press any key to halt: ";
   getch();
   exit(1);// terminate with an error code
  }

 mouse.InstallMouse();

 /* Drawing a Calculator Window */

 Window *pWindow = new Window(150,50,265,340,"Calculator");
 pWindow->Draw();

 /* Drawing Textbox */

 TextBox *pTextBox = new TextBox(160,80,243,30,"",RIGHT_TEXT);
 pTextBox->Draw();

 /* Drawing Buttons */

 Button *pButton[19];
 for (int i = 0;i<19;i++)
 {
    if(i == 15)
  h = 90;
    else
  h=40;
    pButton[i] = new Button(x,y,w,h,btn[i],i+1);
    pButton[i]->Draw();
    x = x+65;
    if(i == 3 || i == 7 || i==11 || i== 15)
    {
      y = y+50;
      x = 160;
    }
 }

 while(1){

   mouse.ShowMouse(); // To show mouse
   mouse.GetMouseStatus(); // To get position of mouse

  // Enabling click event on close button in window
  pWindow->EnableClickHandler();
  // Enabling click event on buttons
  for(int k = 0;k<19;k++)
  pButton[k]->EnableClickHandler();


  switch(ButtonId)
  {
    case 1: //AC
      pTextBox->Clear();
      d = 0;
      opr1=0;
      opr2=0;
      result = 0;
      Operation = 0;

    break;
    case 2: //Divide
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = DIVIDE;
      d = 0;

    break;
    case 3: //Multiply
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = MULTIPLY;
      d=0;

    break;
    case 4: //Backspace
      strcpy(chr,pTextBox->GetText());
      len=strlen(chr);
      if(chr[len-2] == deci[0])
      {
         chr[len-1]=0;
         chr[len-2]=0;
      }
      else
         chr[len-1] = 0;
      pTextBox->Clear();
      pTextBox->SetText(chr);

    break;
    case 5: //7
      pTextBox->SetText("7");

    break;
    case 6: //8
      pTextBox->SetText("8");

    break;
    case 7: //9
      pTextBox->SetText("9");

    break;
    case 8: // Subtraction
      opr1 = atoi(pTextBox->GetText());
      pTextBox->Clear();
      Operation = SUBTRACT;
      d=0;

    break;
    case 9: //4
      pTextBox->SetText("4");

    break;
    case 10: //5
      pTextBox->SetText("5");

    break;
    case 11: //6
      pTextBox->SetText("6");

    break;
    case 12: //Addition
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = ADD;
      d=0;

    break;
    case 13: //1
      pTextBox->SetText("1");

    break;
    case 14: //2
      pTextBox->SetText("2");

    break;
    case 15: //3
      pTextBox->SetText("3");

    break;
    case 16: // Equal(=)
      opr2 = atof(pTextBox->GetText());

      switch(Operation)
      {
   case ADD:
   result = opr1+opr2;
   break;
   case SUBTRACT:
   result = opr1-opr2;
   break;
   case MULTIPLY:
   result = opr1*opr2;
   break;
   case DIVIDE:
   result = opr1/opr2;
   break;
      }

      pTextBox->Clear();
      pTextBox->SetText(gcvt(result,10,str));
      opr1=0;
      opr2=0;
      result = 0;
      Operation=0;

    break;
    case 17: //0
      pTextBox->SetText("0");

    break;
    case 18: // Decimal(.)
      if(d == 0)
      {
       d = 1;
       pTextBox->SetText(".");
      }

    break;
    case 19: //Plus & Minus (+/-)



   temp = atof(pTextBox->GetText());
   temp = temp* -1;
   pTextBox->Clear();
   pTextBox->SetText(gcvt(temp,10,str));


    break;
  }


       while(kbhit()){
  ch = getch();
  if (ch == 27)  //ESC key pressed
  exit(0);
    } }

}




#include <stdio.h> 
#include <stdlib.h> 


void enter_string(char* message, char* s, size_t s_size) 
{
  printf("%s", message);
  fgets(s, s_size, stdin);   
}

int get_score(char* s) 
{
  char *end;
  for (end = s; *end != '\0'; ++end);
  --end;

  if (end == s) 
  {
      printf("wrong Input\n");
      return -1;
  }

  int score = 0;
  char c;
  for(char* p = s; p != end; ++p)
  {
    c = *p;
    if(c == ' ') continue;

    c &= ~0x20;

    if(c >= 'A' && c <= 'Z')
    {
      score += c - '@';
    }  
    else
    {
      printf("wrong Input\n");
      return -1;
    }
  }
  return score * 5 / (end - s);
}

int main()
{
  int p,s1,s2;
  char name[1000];

  while(1)
  {
    do 
    {
      enter_string("Enter The First Name: ", name, sizeof(name));
      s1 = get_score(name);
    } while (s1 == -1);

    do 
    {
      enter_string("Enter The Second Name: ", name, sizeof(name));
      s2 = get_score(name);
    } while (s2 == -1);

    if(s2 > s1)
    {
      p = (s1 * 100) / s2;
    }
    else
    {
      p = (s2 * 100) / s1;
    }

    printf("The love Percentage is : %d %% \n",p);
    printf("\n pls Follow me  🌟 if you like this code 😊\n");
  } 
  return 0;
}


/* created by NemoNet aka The Young Programmer 🏅
in collaboration with tigertv 🐯 
pls kindly follow me on github OR
give me a star 🌟  */


//Arcade Spaceship Game
 /*
 * © 2021 Junwoo Yeom 
 * © 2022 Nemonet TYP
 */
 #define MAX_COL 120
 #define MAX_ROW 30
 #include <Windows.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 #include <math.h>
 #include <conio.h>
 struct Ship_Location {//player
 int health; // current health
 int x;
 int y;
 }ship;

 const int max_health = 3;
 int score = 0; // current score
 int max_score = 0;//highest score
 int** background; // save object position obstacle item
 int bottom_size = 5;//Size occupied by the bottom display window
 int level = 1; // level

 int bottom_explain = 0; //temp variable

 void init(); //initialization function
 void gotoxy(int x, int y); // function to move coordinates
 void color(int code);//color change function

 void ship_move(); // make the player ship move
 void obstacle(int difficulty); //Function to save the missile's position
 void cure(int dif); // Function to store the health recovery item position
 void object_down(); //Function to move missiles and items
 void print_game(); // Function to print the game screen
 void bottom(); // Function to display bottom health, score, and highest score

 void clearbottom();
 void reset_arr_1(int* arr, int size, int value);//1 dimensional array initialization function
 void reset_arr_2(int** arr, int row, int column, int value); // 2D array initialization function
 void print_arr(); // function for debug
 int gameover(); // screen when game is over
 void load(); //Load the all-time high score
 void save(); // Save the highest score
 void mainmenu(); // main menu function

 int main(void) {
 int delay = 20;
 mainmenu();
 do {//do ~ while statement to confirm whether to continue the game
 init(); // initial setting
 delay = 20;
 while (ship.health >= 1) {

 ship_move(); // move the ship

 obstacle(level);//assign and move
 cure(2);
 object_down();

 print_game();
 score++;
 level = score / 100 + 1; // Level related expressions so that every 100 points rise by one level

 {
 if (score >= max_score) {//specify max score
 max_score = score;
 }
 if (20 - score / 100 > 0) { // Decrease the delay
 delay = 20 - score / 100;
 }
 else { // If less than 0, change to delay 1
 delay = 1;
 }
 Sleep(delay); // speed control
 }
 }
 save();
 system("cls");
 } while (gameover() == 1);

 return 0;
 }

 void mainmenu() {
 system("mode con:cols=100 lines=20");
 system("title main menu");
 gotoxy(50 - 13, 15);
 color(7);
 printf("Press any key to start the game");
 while (1) {
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 color(14);
 printf("★Dodge Missile★\n");

 Sleep(100);
 color(3);
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 printf("★Dodge Missile★\n");
 Sleep(100);
 if (_kbhit()) break; //check if key is pressed
 }
 }

 void init() {
 load(); //Load the highest score
 score = 0; // Initialize score
 srand(time(NULL)); // set random seed according to time
 background = (int**)malloc(sizeof(int*) * MAX_ROW);//background row (save objects in the background except player spaceship)
 for (int i = 0; i < MAX_ROW; i++) {
 background[i] = (int*)malloc(sizeof(int) * MAX_COL); // background column
 }

 ship.health = max_health;//set the ship's initial health
 reset_arr_2(background, MAX_ROW, MAX_COL, 0); // reset to 0
 ship.x = (MAX_COL - bottom_size) / 2; // Initial x-coordinate of the ship
 ship.y = MAX_ROW / 2;//Set the initial y-coordinate of the ship

 char* temp[30];
 sprintf_s(temp, sizeof(temp), "mode con:cols=%d lines=%d", MAX_COL, MAX_ROW); // Function to print string format
 system(temp);//Set window size
 system("title avoid missile");


 gotoxy(0, MAX_ROW - 5);//underscore
 color(7);
 for (int i = 0; i < MAX_COL; i++) {
 printf("─");
 }
 bottom();
 clearbottom();
 }
 void ship_move() {
 if (GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(0x41)) { // left or a key
 if (ship.x > 0) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Delete the previous afterimage
 ship.x--;//move to the left

 }
 }
 if (GetAsyncKeyState(VK_RIGHT) || GetAsyncKeyState(0x44)) { // right or d key
 if (ship.x < MAX_COL - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.x++;
 }
 }
 if (GetAsyncKeyState(VK_UP) || GetAsyncKeyState(0x57)) { // up or w key
 if (ship.y > 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.y--;
 }
 }
 if (GetAsyncKeyState(VK_DOWN) || GetAsyncKeyState(0x53)) { // up or s-key
 if (ship.y < MAX_ROW - bottom_size - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Clear previous afterimage
 ship.y++;
 }
 }
 gotoxy(ship.x, ship.y);
 color(11);
 printf("A");
 color(7);
 }

 void obstacle(int dif) {
 if (100 / dif > 0) { // Since it is not divisible by 0
 if (score % (100 / dif) == 0) { // more and more obstacles
 background[0][ship.x] = -1; // an obstacle that reduces health by -1
 }
 }
 else {
 background[0][ship.x] = -1;
 }
 }
 void cure(int dif) {
 static int prv_dif = 0; // keep the original shape even when the function is off
 int random = 0; // obstacle location
 if (level != prv_dif) {//every time the level changes
 for (int i = 0; i < dif; i++) {
 random = rand() % MAX_COL;
 if (background[0][random] == 0) {
 background[0][random] = 1; // cure
 }
 else i--;
 }
 }
 prv_dif = level;
 }
 void object_down() {

 /* Problem occurs when moving from row to column
 If you read one line and go down, the object will be on the next line as well.
 By the time the for statement is finished, it will eventually go down all at once.
 */

 // So, use the method of descending one row at a time
 int* temp;
 for (int i = MAX_ROW - 1; i >= 1; i--) { // all background objects down
 reset_arr_1(background[MAX_ROW - 1], MAX_COL, 0); // Initialize the last line to 0
 temp = background[i ​​- 1];
 background[i ​​- 1] = background[i];
 background[i] = temp;
 }

 if (background[ship.y][ship.x] != 0) {//if missile and ship collide or eat health recovery item
 gotoxy(ship.x, ship.y - 1);//Go to the y-coordinate one space above and delete the missile
 printf(" ");

 ship.health += background[ship.y][ship.x];//Recover health or take damage.
 background[ship.y][ship.x] = 0;//Delete the object at that location from the array.
 }

 }

 void print_game() {
 gotoxy(0, 0); // move to position 0, 0
 for (int i = 0; i < MAX_ROW - bottom_size; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] < 0) {/missile if less than 0 heal if greater than 0
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" ");//Delete the previous position of the missile
 }
 gotoxy(j, i);
 printf("M");//missile
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//delete previous position of missile
 }

 }
 else if (background[i][j] > 0) {
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" "); // delete previous position
 }
 gotoxy(j, i);
 color(12);
 printf("+");//HealPack
 color(7);
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//Delete previous missile position
 }
 }
 }
 }

 bottom();
 }
 void bottom() {
 static int prev_health = 0; // place to store previous health
 static int prev_level = 0;

 if (prev_health != ship.health) {// Only when health information is updated, delete the display at the bottom and update
 clearbottom();
 }prev_health = ship.health;

 if (prev_level != level) {//only when the level information is updated
 gotoxy(0, MAX_ROW - 4);
 printf("level %d", level);
 }

 if (bottom_explain <= 1) {
 printf(" (Move with the arrow keys, avoid the white color. Red is the healing potion.)");
 }bottom_explain++;


 gotoxy(0, MAX_ROW - 2);
 printf("Health: ");
 color(4); // dark red
 for (int i = 0; i < ship.health; i++) {
 printf("♥");
 }
 for (int i = 0; i < max_health - ship.health; i++) {
 printf("♡");
 }


 color(7); // white
 int a = 0;
 if (ship.health - max_health > 0) {
 a = ship.health - max_health;
 }
 else a = 0;
 gotoxy(20 + a * 2, MAX_ROW - 2);
 printf("Score: ");
 color(14); // light yellow
 printf("%d", score);

 gotoxy(40 + a * 2, MAX_ROW - 2);
 color(7); // white
 printf("Highest score: ");
 color(14); // light yellow

 printf("%d", max_score);
 color(7); // white


 }

 int gameover() {
 int i = 0;
 while (1) {
 color(12);
 printf(" _____ _____ _\n");
 printf("| __ \\ | _ | | |\n");
 printf("| | \\/ __ _ _ __ ___ ___ | | |__ __ ___ _ __ | |\n");
 printf("| | __ / _` || '_ ` _ \\ / _ \\ | | |\\ \\ / / / _ \\| '__| | |\n");
 printf("| |_\\ \\| (_| || | | | | | __/ \\ \\_/ / \\ V / | __/| | |_|\n");
 printf(" \\____/ \\__,_||_| |_| |_| \\___| \\___/ \\_/ \\___||_| (_)\n");
 printf("\n");
 color(7);
 printf("Current score: ");
 color(14);
 printf("%d\n", score);
 color(7);
 printf("Highest score: ");
 color(14);
 printf("%d\n", max_score);
 color(7);

 printf("\nDo you want to do this again?\n");
 printf("1. Yes\n");
 printf("2. no\n");
 system("pause");
 printf("\nInput:");

 if (scanf_s("%d", &i) == 0) {
 rewind(stdin);
 i = 0;
 printf("Character input is not allowed.\n");
 Sleep(1000);
 }
 else if (!(i >= 1 && i <= 2)) { // If any number other than 1 and 2
 i = 0;
 printf("Please enter a number between 1 and 2.\n");
 Sleep(1000);
 }
 else {
 break;
 }
 system("cls");
 }
 return i;
 }


 void color(int code) {
 SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), code); // Function defined in windows.h, standard output handle, set color to number
 }
 void gotoxy(int x, int y) {
 COORD Pos; // Coordinate structure
 Pos.X = x;
 Pos.Y = y;
 SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos); // Function defined in windows.h, standard output handle, coordinates as a structure
 }

 void clearbottom() {
 gotoxy(0, MAX_ROW - 4);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 gotoxy(0, MAX_ROW - 2);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 }
 void reset_arr_2(int** arr, int row, int column, int value) {
 for (int i = 0; i < row; i++) {
 for (int j = 0; j < column; j++) {
 arr[i][j] = value;
 }
 }
 }
 void reset_arr_1(int* arr, int size, int value) {
 for (int i = 0; i < size; i++) {
 arr[i] = value;
 }
 }
 void load() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "a+");//read and append mode
 if (fp != NULL) {
 fscanf_s(fp, "%d", &max_score);
 fclose(fp);
 }
 else printf("\nFailed to read file\n");
 }
 void save() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "w");
 if (fp != NULL) {
 fprintf(fp, "%d\n", max_score); // Save the highest score
 fclose(fp);
 }
 else printf("\nFailed to write file\n");
 }
 void print_arr() {//for debug
 printf("--------------------------------------");
 for (int i = 0; i < MAX_ROW; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] != 0) {
 printf("%d", background[i][j]);
 }
 else {
 printf(" ");
 }
 }
 printf("\n");
 }
 }


// Autor : Nemonet TYP
// Title: Tic Tac Toe Game project in C
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <windows.h>

int board[10] = {2,2,2,2,2,2,2,2,2,2};
int turn = 1,flag = 0;
int player,comp;

void menu();
void go(int n);
void start_game();
void check_draw();
void draw_board();
void player_first();
void put_X_O(char ch,int pos);
COORD coord= {0,0}; // this is global variable
//center of axis is set to the top left cornor of the screen
void gotoxy(int x,int y)
{
    coord.X=x;
    coord.Y=y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}

void main()
{
    system("cls");
    menu();
    getch();

}

void menu()
{
    int choice;
    system("cls");
    printf("\n--------MENU--------");
    printf("\n1 : Play with X");
    printf("\n2 : Play with O");
    printf("\n3 : Exit");
    printf("\nEnter your choice:>");
    scanf("%d",&choice);
    turn = 1;
    switch (choice)
    {
    case 1:
        player = 1;
        comp = 0;
        player_first();
        break;
    case 2:
        player = 0;
        comp = 1;
        start_game();
        break;
    case 3:
        exit(1);
    default:
        menu();
    }
}

int make2()
{
    if(board[5] == 2)
        return 5;
    if(board[2] == 2)
        return 2;
    if(board[4] == 2)
        return 4;
    if(board[6] == 2)
        return 6;
    if(board[8] == 2)
        return 8;
    return 0;
}

int make4()
{
    if(board[1] == 2)
        return 1;
    if(board[3] == 2)
        return 3;
    if(board[7] == 2)
        return 7;
    if(board[9] == 2)
        return 9;
    return 0;
}

int posswin(int p)
{
// p==1 then X   p==0  then  O
    int i;
    int check_val,pos;

    if(p == 1)
        check_val = 18;
    else
        check_val = 50;

    i = 1;
    while(i<=9)//row check
    {
        if(board[i] * board[i+1] * board[i+2] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+1] == 2)
                return i+1;
            if(board[i+2] == 2)
                return i+2;
        }
        i+=3;
    }

    i = 1;
    while(i<=3)//column check
    {
        if(board[i] * board[i+3] * board[i+6] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+3] == 2)
                return i+3;
            if(board[i+6] == 2)
                return i+6;
        }
        i++;
    }

    if(board[1] * board[5] * board[9] == check_val)
    {
        if(board[1] == 2)
            return 1;
        if(board[5] == 2)
            return 5;
        if(board[9] == 2)
            return 9;
    }

    if(board[3] * board[5] * board[7] == check_val)
    {
        if(board[3] == 2)
            return 3;
        if(board[5] == 2)
            return 5;
        if(board[7] == 2)
            return 7;
    }
    return 0;
}

void go(int n)
{
    if(turn % 2)
        board[n] = 3;
    else
        board[n] = 5;
    turn++;
}

void player_first()
{
    int pos;

    check_draw();
    draw_board();
    gotoxy(30,18);
    printf("Your Turn :> ");
    scanf("%d",&pos);

    if(board[pos] != 2)
        player_first();

    if(pos == posswin(player))
    {
        go(pos);
        draw_board();
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Player Wins");
        getch();
        exit(0);
    }

    go(pos);
    draw_board();
    start_game();
}

void start_game()
{
// p==1 then X   p==0  then  O
    if(posswin(comp))
    {
        go(posswin(comp));
        flag = 1;
    }
    else if(posswin(player))
        go(posswin(player));
    else if(make2())
        go(make2());
    else
        go(make4());
    draw_board();

    if(flag)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Computer wins");
        getch();
    }
    else
        player_first();
}

void check_draw()
{
    if(turn > 9)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Game Draw");
        getch();
        exit(0);
    }
}

void draw_board()
{
    int j;

    for(j=9; j<17; j++)
    {
        gotoxy(35,j);
        printf("|       |");
    }
    gotoxy(28,11);
    printf("-----------------------");
    gotoxy(28,14);
    printf("-----------------------");

    for(j=1; j<10; j++)
    {
        if(board[j] == 3)
            put_X_O('X',j);
        else if(board[j] == 5)
            put_X_O('O',j);
    }
}

void put_X_O(char ch,int pos)
{
    int m;
    int x = 31, y = 10;

    m = pos;

    if(m > 3)
    {
        while(m > 3)
        {
            y += 3;
            m -= 3;
        }
    }
    if(pos % 3 == 0)
        x += 16;
    else
    {
        pos %= 3;
        pos--;
        while(pos)
        {
            x+=8;
            pos--;
        }
    }
    gotoxy(x,y);
    printf("%c",ch);
}


/*-------------------------------------------------------------------------

          GUI Scientific Calculator 

Programmer     : Nemonet
                 The Young Programmer 💻


Software Details
====================
Developed in   : C
Compiler used  : Turbo C++ 3.0
Date           : 20/05/2022 -- 31/05/2022

Licence   : MIT Licence
(Please give the credit of programming to author.)


NOTE:


---------------------------------------------------------------------------*/






//Please change BGI directory accouding to your TC Directory
//By default it is "E:\tc\bgi"

#include <stdio.h>
#include <conio.h>
#include <process.h>
#include <dos.h>
#include <stdlib.h>
#include <iostream.h>
#include <graphics.h>
#include <math.h>
#include <string.h>

float * mem;
int X = 0, Y = 0;
int row = 17, col = 5;
char dummy;
char flag = 'd', flagp = '0';
char bflag = 'u', bflagp = 'u';
int mflag = 0;
char ch, ch1, ch2;
int sflag = 0;
int midx, midy;
#define UNCLICKED 0
#define CLICKED 1
#define PI 3.14159

char str1[] = {
  "Nemo TYP Roll# CIS 34"
};
char str2[] = {
  "Nemonet TYP Roll# CIS 50"
};

void typeit(int x, int y, int spacing, char string[]) {
  char temp[2];
  for (int i = 0; i < strlen(string); i++) {
    delay(100);
    temp[0] = string[i];
    temp[1] = '\0';
    outtextxy(x + (i + 1) * spacing, y, temp);
  } //endfor

}
void front() {
  int x, y, h;
  for (x = 0; x <= 100; x++) {
    settextjustify(CENTER_TEXT, CENTER_TEXT);
    setcolor(1);
    settextstyle(1, 0, 4);
    setusercharsize(x, 6, x, 3);
    setcolor(14);
    moveto(310, 135);
    outtext("..");
    setcolor(6);
    moveto(310, 130);
    outtext("I I");
    if (x < 50)
      delay(30);
    else
      delay(20);
  }
  for (y = 0; y <= 100; y++) {
    setcolor(0);
    settextstyle(1, 0, 4);
    setusercharsize(y, 6, y, 3);
    moveto(310, 135);
    outtext("..");
    moveto(310, 130);
    outtext("I I");
    if (y > 20) {
      settextstyle(7, 0, 3);
      setusercharsize(y - 20, 35, y - 20, 30);
      setcolor(9);
      outtext("CALCULATOR");
      setcolor(2);
      outtext("___________");
      delay(15);
      if (y < 100) {
        settextstyle(7, 0, 3);
        setusercharsize(y - 20, 35, y - 20, 30);
        setcolor(0);
        outtext("CALCULATOR");
      }
    }
  }
  //delay(1000);
  settextstyle(3, 0, 2);
  delay(50);
  outtextxy(midx - 200, midy, "Group Members:-");
  //x=10,y=10;
  setcolor(6);
  settextstyle(4, 0, 4);
  typeit(midx - 200, midy + 50, 15, str1);
  typeit(midx - 200, midy + 75, 15, str2);
  getch();
  //closegraph();

}

char input();
double add(double, double, char);
double angle_conv(double);
void basecng(double, double);

//***********************************************************
// *
// THIS FUNCTION DRAWS THE BUTTONS OF THE CALCULATOR *
// *
//***********************************************************

void button_3d(int x1, int y1, int x2, int y2, int check, char * text, int color) {
  int up, low;
  setfillstyle(1, 7);
  bar(x1, y1, x2, y2);
  if (check == 0) //Unclicked
    up = 15, low = 8;
  else
    up = 8, low = 15; //Clicked
  setcolor(low);
  line(x2, y1, x2, y2);
  line(x2 - 1, y1, x2 - 1, y2);
  line(x1, y2, x2, y2);
  line(x1 + 1, y2 - 1, x2, y2 - 1);

  setcolor(up);
  line(x1, y1, x2, y1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1, y1, x1, y2);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  setcolor(color);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  outtextxy(x1 + (x2 - x1) / 2, (y1 + (y2 - y1) / 2) - 2, text);

}
//********************************************************************
// *
// This function makes the opening screen *
// *
//********************************************************************

void frontpage(void) {
  int mx, my;

  mx = (getmaxx() / 2);
  my = (getmaxy() / 2);

  //SET baqckground color
  setfillstyle(9, 1);
  bar(0, 0, getmaxx(), getmaxy());

  //DRAW a bar, and make it look like a 3d bar
  setfillstyle(1, 7);
  bar(50, 20, 600, 400);

  //DRAW lines for the top and left side
  setcolor(15);
  line(50, 20, 600, 20);
  line(51, 21, 599, 21);
  line(50, 20, 50, 400);
  line(51, 21, 51, 399);

  //DRAW lines for the bottom and right side
  setcolor(8);
  line(600, 20, 600, 400);
  line(599, 21, 599, 400);
  line(50, 400, 600, 400);
  line(51, 399, 600, 399);

  //DRAW two 3D bars for the left and right side

  setfillstyle(9, 8);
  bar(70, 40, 100, 380);
  //getch();
  bar(545, 40, 575, 380);
  setcolor(8);
  rectangle(70, 40, 100, 380);
  rectangle(545, 40, 575, 380);
  setcolor(15);
  line(100, 40, 100, 380);
  line(70, 380, 100, 380);
  line(575, 40, 575, 380);
  line(545, 380, 575, 380);

  //DRAW two 3D divider lines on both sides
  setcolor(8);
  line(110, 40, 110, 380);
  line(535, 40, 535, 380);
  setcolor(15);
  line(111, 40, 111, 380);
  line(536, 40, 536, 380);

  //PRINT 3D text CALENDAR 
  settextstyle(1, 0, 4);
  settextjustify(1, 1);
  setcolor(15);
  outtextxy(mx + 2, my - 46, "MY CALCULATOR");
  setcolor(7);
  outtextxy(mx + 1, my - 45, "MY CALCULATOR");
  setcolor(8);
  outtextxy(mx + 2, my - 44, "MY CALCULATOR");

  //PRINT 3D text 
  setcolor(15);
  outtextxy(mx, my + 10, "2022");
  setcolor(7);
  outtextxy(mx + 1, my + 11, "2022");
  setcolor(8);
  outtextxy(mx + 2, my + 12, "2022");

  //PRINT copyright notice
  settextstyle(2, 0, 5);
  setcolor(1);
  outtextxy(mx + 1, my + 85, "@ 2022 by TYP 💻");

  getch(); //PAUSE for a while
}

//********************************************************************
// *
// This function makes the claculating screen *
// *
//********************************************************************

void screen(int x1, int y1, int x2, int y2) {
  setlinestyle(0, 0, 1);
  setfillstyle(SOLID_FILL, 8);
  bar(x1, y1, x2, y2);
  setfillstyle(SOLID_FILL, BLACK);
  bar(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(15);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1 + 2, y1 + 2, x1 + 2, y2 - 2);
  line(x1 + 2, y1 + 2, x2 - 2, y1 + 2);
  setcolor(8);
  line(x1 + 1, y2 - 1, x2 - 1, y2 - 1);
  line(x2 - 1, y1 + 1, x2 - 1, y2 - 1);
  line(x1 + 2, y2 - 2, x2 - 2, y2 - 2);
  line(x2 - 2, y1 + 2, x2 - 2, y2 - 2);

}

//***********************************************************************
// *
// Mouse Related Functions *
// *
//***********************************************************************

void init_mouse() {
  union REGS iregs, oregs;

  iregs.x.ax = 0;
  int86(0x33, & iregs, & oregs);

  if (oregs.x.ax == 0) {
    cleardevice();
    printf("mouse not installed\n");
    getch();
    exit(1);
  }
  iregs.x.ax = 1;
  int86(0x33, & iregs, & oregs);
}
//*************************************************************

void mouse() {
  int button, x1, y1;
  union REGS iregs, oregs;

  iregs.x.ax = 3;
  int86(0x33, & iregs, & oregs);

  button = oregs.x.bx & 3;
  x1 = oregs.x.cx;
  y1 = oregs.x.dx;

  if (oregs.x.bx & 1) {
    X = x1;
    Y = y1;
  }

  if (button == 3)
    exit(0);
}

//*************************************************************

void hide_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 2;
  int86(0x33, & ioRegs, & ioRegs);
}

//*************************************************************
void show_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 1;
  int86(0x33, & ioRegs, & ioRegs);
}

/*************************************************************/void remove_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 0;
  int86(0x33, & ioRegs, & ioRegs);
}

//************************************************************************
// *
// THIS FUNCTION DRAWS THE CALCULATOR ON THE SCREEN *
// *
//************************************************************************
void structure() {
  init_mouse();
  setbkcolor(0);
  cleardevice();
  hide_mouse();
  //**********************************************************
  // Buttons Making

  front();
  frontpage();
  settextstyle(2, 0, 4);
  button_3d(50, 20, 600, 400, UNCLICKED, "", 1); // main box
  screen(100, 50, 545, 120); // screen

  setfillstyle(1, 8);
  bar(52, 22, 598, 42);
  button_3d(575, 23, 595, 40, UNCLICKED, "x", 0);
  setcolor(0);
  outtextxy(120, 30, "CALCULATOR v1.0");
  button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15); // box of decimal
  button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0); // box of octal
  button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0); // box of hexal
  button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0); // box of binary

  button_3d(350, 205, 380, 225, UNCLICKED, "7", 0); // Box Of 7
  button_3d(390, 205, 420, 225, UNCLICKED, "8", 0); // Box Of 8
  button_3d(430, 205, 460, 225, UNCLICKED, "9", 0); // Box Of 9

  button_3d(350, 230, 380, 250, UNCLICKED, "4", 0); // Box Of 4
  button_3d(390, 230, 420, 250, UNCLICKED, "5", 0); // Box Of 5
  button_3d(430, 230, 460, 250, UNCLICKED, "6", 0); // Box Of 6

  button_3d(480, 230, 510, 250, UNCLICKED, "*", 0); // Box Of *
  button_3d(515, 230, 545, 250, UNCLICKED, "/", 0); // Box Of \
  button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4); //Box Of AllClear (AC)
  button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4); //Box Of Clear (C)

  button_3d(350, 255, 380, 275, UNCLICKED, "1", 0); // Box Of 1
  button_3d(390, 255, 420, 275, UNCLICKED, "2", 0); // Box Of 2
  button_3d(430, 255, 460, 275, UNCLICKED, "3", 0); // Box Of 3

  button_3d(350, 280, 380, 300, UNCLICKED, "0", 0); // Box Of Zero (0)
  button_3d(390, 280, 420, 300, UNCLICKED, ".", 0); // Box Of Period (.)
  button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0); // Box Of PhiFunction

  button_3d(480, 255, 510, 275, UNCLICKED, "-", 0); // Box Of -
  button_3d(515, 255, 545, 275, UNCLICKED, "+", 0); // Box Of +
  button_3d(350, 305, 460, 325, UNCLICKED, "=", 0); // Box Of Equality
  button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE); // Box Of shift

  button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0); //Box of x^n
  button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0); //box of 1/x

  button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0); // Box OfSin Function
  button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0); // Box Of CosFunction
  button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0); // Box Of Tan Function

  button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0); // Box Of sin^-1
  button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0); // Box Of cos^-1
  button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0); // Box Of tan^-1

  button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0); // Box Of ln
  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(BLUE);
  settextstyle(2, 0, 4);
  outtextxy(125, 290, "e");
  outtextxy(185, 290, "10^x");
  outtextxy(245, 290, "x^3");
  button_3d(160, 300, 210, 325, UNCLICKED, "log", 0); // Box Of log
  button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0); // Box Of x^2

  button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
  button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
  button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
  button_3d(480, 350, 545, 370, UNCLICKED, "Off", 4);

  button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
  button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
  button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);

}
//********************************************************
// *
// Main starts *
// *
//********************************************************
void main() {
  clrscr();

  double y = 0, z = 0, pnt, pnt1 = 0, x = 0, r = 0;

  int gdriver = DETECT, gmode, errorcode;
  int i;
  initgraph( & gdriver, & gmode, "C:\\TURBOC3\\BGI");
  midx = getmaxx() / 2;
  midy = getmaxy() / 2;
  structure();
  gotoxy(row, col);
  printf("\t\t\t\t\t");
  gotoxy(row, col);
  printf("0");
  mem = (float * ) malloc(y * sizeof(float));
  while (ch != 27 && ch1 != 27) //While Escape is not pressed
  { //and if base is not 10
    pnt1 = 0; //no doubleing point entered Yet
    ch2 = '0';
    // for(int a=0;ch!=27;a++)//a indicates whether a no. has been entered or not
    while (ch2 != 27)
    //a=0 means that no no. has been entered yet
    {
      if (bflagp != 'u') {
        //gotoxy(row,col);
        dummy = input();
 if (dummy != 'o') {
          gotoxy(row, col);
          printf("The trail version does not support this feature");
          input();
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          // ch='0';
        }
        y = 0;
        z = 0;
        ch = '0';
        gotoxy(row, col);
        printf("\t\t\t\t\t\t");
        gotoxy(row, col);
        printf("0");

        // bflagp='u';
      }

      ch = input();
      if (ch == '>' || ch == '<' || ch == '?') {
        sflag = 0;
        if (ch == '>') //M+
          *
          mem += y;
        if (ch == '<') //M-
          *
          mem -= y;
        if (ch == '?') //MR
        {
          y = * mem;
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          gotoxy(row, col);
          printf("%g", y);
        }
        if ( * mem == 0)
          mflag = 0;
        if ( * mem != 0)
          mflag = 1;
      }
      if (mflag == 0) {
        gotoxy(row, 7);

        printf(" ");

      }
      if (mflag != 0) {
        gotoxy(row, 7);

        printf("M");
      }
      gotoxy(row, col);

      if (ch == 'a') {
        sflag = 0;
        y = 0;
        gotoxy(row, col);
        printf("\t\t\t\t\t");
        gotoxy(row, col);
 printf("0");
      }

      if (ch == 'o')
      //for clearing the screen of the CALCULATOR
      {
        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }

      if (ch == 'q') {
        sflag = 0;
        y = sqrt(y);
 gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == 'm') {
        sflag = 0;
        y = 1 / y;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == '+' || ch == '-' || ch == '/' || ch == '\\' || ch == '=' || ch == '*') {
        sflag = 0;
        break;
      }
      if (ch == '.') //case for a decimal point
      {
        sflag = 0;
 if (pnt1 == 0) //ie no decimal has been entered yet
        {
          gotoxy(row, col);
          printf("\t\t\t\t "); // double
          gotoxy(row, col);
          printf("%g.", y);
          pnt1 = .1; //ie one decimal point no has been entered
          continue; //go back to the begining and get the next number
        } else //decimal point has alredy been entered and thus no change in the screen
        {
          sflag = 0;
          continue; //go back to the begining
        }
      } //out of the '.' condition

      if (pnt1 != 0) //ie we have a doubleing point
      {
        sflag = 0;
        if (ch <= '9' && ch >= '0') //input integer
        {
   // printf("%c",ch);
          x = (double) ch; //type cast the character into double to perforn further operations
          x -= 48; //since character digit indoubleing -48 gives the corresponding ASCII
          x = x * pnt1; //make it a decimal
          y = x + y; //add it in result
          pnt1 *= .1; //shift to the second doubleing point
          gotoxy(row, col);
          printf("%g", y);
          gotoxy(row, col);
          continue; //back to the top
        }
      }
      //if no decimal point number then proceed

      if (ch <= '9' && ch >= '0') {
        sflag = 0;
        x = (double) ch; //typecast to double
        x -= 48; //get corresponding ASCII
        y = (y * 10) + x; //add to right of result
        gotoxy(row, col); //go back to start of the calc screen
 printf("\t\t\t\t "); //clear the screen
        gotoxy(row, col);
        printf("%g", y); //print the number
      }
      if (ch == 'u' || ch == 'v' || ch == 'w' || ch == 'x') {
        sflag = 0;
        if (bflagp == bflag && bflag == 'u')
          continue;
        else
          basecng(y, pnt1);
      }
      if (ch == 'd' || ch == 'r' || ch == 'g') {
        sflag = 0;
        y = angle_conv(y);
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
        // gotoxy(row,col);
        // printf("%g",y);
 // continue;
      }
      if (ch == 's' || ch == 'c' || ch == 't' || ch == 'i' || ch == 'j' || ch == 'k' || ch == 'n' || ch == 'l' || ch == 'p' || ch == 'h')
      //ie the user opted for a function
      {
        if (ch == 's' || ch == 'c' || ch == 't') //sin /cos/tan
        {
          sflag = 0;
          if (flag != 'r') {
            flagp = flag;
            flag = 'r';
            y = angle_conv(y);
            flag = flagp;
          }
          // gotoxy(row,col);
          // printf("%g",y);getch();
          switch (ch) {

          case 's':
            y = sin(y);
     break;
          case 'c':
            y = cos(y);
            break;
          case 't':
            y = tan(y);
            break;
          }
        }
        if (ch == 'i' || ch == 'j' || ch == 'k') {
          sflag = 0;
          if (flag != 'r') {
            // flagp=flag;
            flagp = 'r';
            //y=angle_conv(y);
          }
          switch (ch) {
          case 'i':
            y = asin(y);
            break;
   case 'j':
            y = acos(y);
            break;
          case 'k':
            y = atan(y);
            break;
          }
          if (flag != 'r')
            y = angle_conv(y);
        } else if (ch == 'n') {
          if (sflag == 1) {
            y = exp(y);
            sflag = 0;
          } else
            y = log(y); //ln
        } else if (ch == 'l') {
          if (sflag == 1) {
            y = pow(10, y);
            sflag = 0;
          } else
     y = log10(y); //log
        } else if (ch == 'p') {
          if (sflag == 1) {
            y = pow(y, 3);
            sflag = 0;
          } else
            y = pow(y, 2); //square
        } else if (ch == 'h') {
          sflag = 0;
          y = PI; //pi
        }

        gotoxy(row, col);
        printf("\t\t\t\t "); //Clear the screen
        gotoxy(row, col);
        printf("%g", y);
      } //else condition

    } //out of second condition ie we now have the first no. or function or operater

    for (; ch != 27 && ch1 != '=' && ch != '=';) //ie the characters input are not ESCAPE or Equal to

    {
      pnt1 = 0;
      z = 0;
      if (ch == 'o' || ch1 == 'o') // For Clear The Screen
      {

        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        // gotoxy(col,row);
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }
      for (; ch1 != 27;) {
 gotoxy(row, col);
        // printf("%g",z);
        // z=0;
        ch1 = input();

        if (ch1 == '>' || ch1 == '<' || ch1 == '?') {
          if (ch1 == '>') //M+
            *
            mem += z;
          if (ch1 == '<') //M-
            *
            mem -= z;
          if (ch1 == '?') //MR
          {
            z = * mem;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
          }
   if ( * mem == 0)
            mflag = 0;
          if ( * mem != 0)
            mflag = 1;
        }
        if (mflag == 0) {
          gotoxy(row, 7);
          printf(" ");
        }
        if (mflag != 0) {
          gotoxy(row, 7);
          printf("M");
        }
        gotoxy(row, col);

        if (ch1 == 'a') {
          z = 0;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
        }

        if (ch == 'o' || ch1 == 'o') // For Clear The Screen
        {
          y = 0;
          z = 0;
          gotoxy(row, col);
          //cout<<" ";
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
          gotoxy(row, col);
          break;
        }
        if (ch1 == 'q') {
          z = sqrt(z);
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }
        if (ch1 == 'm') {
          z = 1 / z;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }

        if (ch1 == '.') {
          if (pnt1 == 0) {
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            //cout<<z<<".";
            printf("%g.", z);
            pnt1 = .1;
            continue;
          } else {
            continue;
          }
        }
        if (pnt1 != 0) {
          if (ch1 <= '9' && ch1 >= '0') {
            // printf("%c",ch1);
            x = (double) ch1;
            x -= 48;
            x = x * pnt1;
            z = x + z;
            pnt1 = pnt1 * .1;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            continue;
          }
        }

        if (ch1 == '+' || ch1 == '-' || ch1 == '*' || ch1 == '/' || ch1 == '=')
          break;
        if (ch1 >= '0' && ch1 <= '9') {
          x = (double) ch1;
          x = x - 48;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          z = (z * 10) + x;
          printf("%g", z);
        }
        if (ch == 'u')
          if (ch == 'd' || ch == 'r' || ch == 'g') {
            z = angle_conv(z);
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            // continue;
          }
        if (ch1 == 's' || ch1 == 'c' || ch1 == 't' || ch1 == 'i' || ch1 == 'j' || ch1 == 'k' || ch1 == 'n' || ch1 == 'l' || ch1 == 'p' || ch1 == 'h')
        //ie the user opted for a function
        {
          if (ch1 == 's' || ch1 == 'c' || ch1 == 't') //sin
          {
            if (flag != 'r') {
              flagp = flag;
              flag = 'r';
              angle_conv(z);
              flag = flagp;
            }
            switch (ch1) {
            case 's':
              z = sin(z);
              break;
            case 'c':
              z = cos(z);
              break;
            case 't':
              z = tan(z);
              break;
            }
          }
          if (ch1 == 'i' || ch1 == 'j' || ch1 == 'k') {
            if (flag != 'r') {
              flagp = 'r';
            }
            switch (ch1) {
            case 'i':
              z = asin(z);
              break;
            case 'j':
              z = acos(z);
              break;
            case 'k':
              z = atan(z);
              break;
            }
            z = angle_conv(z);
          } else if (ch1 == 'l') {
            z = log10(z); //log
          } else if (ch1 == 'p') {
            z = pow(z, 2); //square
          } else if (ch1 == 'h') {
            z = PI; //pi
          }

          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
          gotoxy(row, col);
        }
      }

      if (ch1 == '+' || ch1 == '-' || ch1 == '=') {
        y = add(y, z, ch);
        if (ch2 != '0') {
          y = add(r, y, ch2);
          ch2 = '0';
        }
      } else {
        if (ch == '*' || ch == '/')
          y = add(y, z, ch);
        else {
          ch2 = ch;
          r = y;
          y = z;
        }
      }
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("%g", y);
      ch = ch1;
      ch1 = '0';
      if (ch == '=' || ch1 == '=')
        break;
    }
    if (ch == 'o' || ch1 == 'o') // For Clear The Screen
    {
      y = 0;
      z = 0;
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("0");
      gotoxy(row, col);
      continue;
    }
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%g", y);
    z = 0;
  }

  // getch();
  closegraph();
  remove_mouse();
  exit(0);

}

//************************************************************
// *
// This function gets the user's Input *
// *
//************************************************************

char input() {
  X = 0;
  Y = 0;
  char ch;
  show_mouse();
  if (bflag != 'u') {
    button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
    button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
    button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
    button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
    bflag = 'u';
  }
  do {
    mouse();
    if (X >= 350 && X <= 380 && Y >= 205 && Y <= 225) // Condition For 7
    {
      hide_mouse();
      button_3d(350, 205, 380, 225, CLICKED, "7", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 205, 380, 225, UNCLICKED, "7", 0);
      show_mouse();
      ch = '7';
      return ch;
    }

    //**********************************************

    if (X >= 390 && X <= 420 && Y >= 205 && Y <= 225) // Condition For 8
    {

      hide_mouse();
      button_3d(390, 205, 420, 225, CLICKED, "8", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 205, 420, 225, UNCLICKED, "8", 0);
      show_mouse();
      ch = '8';
      return ch;
    }

    //*****************************************

    if (X >= 430 && X <= 460 && Y >= 205 && Y <= 225) // Condition For 9
    {
      hide_mouse();
      button_3d(430, 205, 460, 225, CLICKED, "9", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 205, 460, 225, UNCLICKED, "9", 0);
      show_mouse();
      ch = '9';
      return ch;
    }

    //***********************************

    if (X >= 350 && X <= 380 && Y >= 230 && Y <= 250) // Condition For 4
    {
      hide_mouse();
      button_3d(350, 230, 380, 250, CLICKED, "4", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 230, 380, 250, UNCLICKED, "4", 0);
      show_mouse();
      ch = '4';
      return ch;
    }

    //***********************************

    if (X >= 390 && X <= 420 && Y >= 230 && Y <= 250) // Condition For 5
    {
      hide_mouse();
      button_3d(390, 230, 420, 250, CLICKED, "5", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 230, 420, 250, UNCLICKED, "5", 0);
      show_mouse();
      ch = '5';
      return ch;
    }

    //***********************************

    if (X >= 430 && X <= 460 && Y >= 230 && Y <= 250) // Condition For 6
    {
      hide_mouse();
      button_3d(430, 230, 460, 250, CLICKED, "6", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 230, 460, 250, UNCLICKED, "6", 0);
      show_mouse();
      ch = '6';
      return ch;
    }

    //***********************************

    if (X >= 480 && X <= 510 && Y >= 230 && Y <= 250) // Condition For *
    {
      hide_mouse();
      button_3d(480, 230, 510, 250, CLICKED, "*", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 230, 510, 250, UNCLICKED, "*", 0);
      show_mouse();
      ch = '*';
      return ch;
    }
    //***********************************

    if (X >= 515 && X <= 545 && Y >= 230 && Y <= 250) // Condition For /
    {
      hide_mouse();
      button_3d(515, 230, 545, 250, CLICKED, "/", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 230, 545, 250, UNCLICKED, "/", 0);
      show_mouse();
      ch = '/';
      return ch;
    }

    //***********************************
    int a, b;
    if (X >= 350 && X <= 380 && Y >= 255 && Y <= 275) // Condition For 1
    {
      hide_mouse();
      button_3d(350, 255, 380, 275, CLICKED, "1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 255, 380, 275, UNCLICKED, "1", 0);
      show_mouse();
      ch = '1';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 255 && Y <= 275) // Condition For 2
    {
      hide_mouse();
      button_3d(390, 255, 420, 275, CLICKED, "2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 255, 420, 275, UNCLICKED, "2", 0);
      show_mouse();
      ch = '2';
      return ch;
    }

    // *************************************

    if (X >= 430 && X <= 460 && Y >= 255 && Y <= 275) // Condition For 3
    {
      hide_mouse();
      button_3d(430, 255, 460, 275, CLICKED, "3", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 255, 460, 275, UNCLICKED, "3", 0);
      show_mouse();
      ch = '3';
      return ch;
    }

    // *************************************

    if (X >= 350 && X <= 380 && Y >= 280 && Y <= 300) // Condition For 0
    {
      hide_mouse();
      button_3d(350, 280, 380, 300, CLICKED, "0", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 280, 380, 300, UNCLICKED, "0", 0);
      show_mouse();
      ch = '0';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 280 && Y <= 300) // Condition For .
    {
      hide_mouse();
      button_3d(390, 280, 420, 300, CLICKED, ".", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 280, 420, 300, UNCLICKED, ".", 0);
      show_mouse();
      ch = '.';
      return ch;
    }

    //**********************************************

    if (X >= 430 && X <= 460 && Y >= 280 && Y <= 300) // Condition For pi
    {
      hide_mouse();
      button_3d(430, 280, 460, 300, CLICKED, "pi", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0);
      show_mouse();
      ch = 'h';
      return ch;
    }

    //***********************************************

    if (X >= 480 && X <= 510 && Y >= 255 && Y <= 275) // Condition For -
    {
      hide_mouse();
      button_3d(480, 255, 510, 275, CLICKED, "-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 255, 510, 275, UNCLICKED, "-", 0);
      show_mouse();
      ch = '-';
      return ch;
    }

    //**************************************************

    if (X >= 515 && X <= 545 && Y >= 255 && Y <= 275) // Condition For +
    {
      hide_mouse();
      button_3d(515, 255, 545, 275, CLICKED, "+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 255, 545, 275, UNCLICKED, "+", 0);
      show_mouse();
      ch = '+';
      return ch;
    }

    //*****************************************************

    if (X >= 350 && X <= 460 && Y >= 305 && Y <= 325) // Condition For =
    {
      hide_mouse();
      button_3d(350, 305, 460, 325, CLICKED, "=", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 305, 460, 325, UNCLICKED, "=", 0);
      show_mouse();
      ch = '=';
      return ch;
    }

    //*****************************************************

    if (X >= 480 && X <= 545 && Y >= 305 && Y <= 325) // Condition For shift
    {
      hide_mouse();
      button_3d(480, 305, 545, 325, CLICKED, "shift", BLUE);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE);
      show_mouse();
      ch = '~';
      sflag = 1;
      return ch;
    }

    //*************************************

    if (X >= 480 && X <= 510 && Y >= 205 && Y <= 225) // Condition For AC
    {
      hide_mouse();
      button_3d(480, 205, 510, 225, CLICKED, "AC", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4);
      show_mouse();
      ch = 'o';
      return ch;
    }
    /********************C*/    if (X >= 515 && X <= 545 && Y >= 205 && Y <= 225) // Condition For C
    {
      hide_mouse();
      button_3d(515, 205, 545, 225, CLICKED, "CE", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4);
      show_mouse();
      ch = 'a';
      return ch;
    }

    // ****************************************

    if (X >= 100 && X <= 150 && Y >= 205 && Y <= 230) // Condition For Sin
    {
      hide_mouse();
      button_3d(100, 205, 150, 230, CLICKED, "Sin", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0);
      show_mouse();
      ch = 's';
      return ch;
    }

    //***********************************

    if (X >= 160 && X <= 210 && Y >= 205 && Y <= 230) // Condition For Cos
    {
      hide_mouse();
      button_3d(160, 205, 210, 230, CLICKED, "Cos", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0);
      show_mouse();
      ch = 'c';
      return ch;
    }

    //***********************************

    if (X >= 515 && X <= 545 && Y >= 280 && Y <= 300) //inverse
    {
      hide_mouse();
      button_3d(515, 280, 545, 300, CLICKED, "inv", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0);
      show_mouse();
      ch = 'm';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 205 && Y <= 230) // Condition For Tan
    {
      hide_mouse();
      button_3d(220, 205, 270, 230, CLICKED, "Tan", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0);
      show_mouse();
      ch = 't';
      return ch;
    }

    //*********************************** */
    if (X >= 100 && X <= 150 && Y >= 250 && Y <= 275) // Condition For sin^-1
    {
      hide_mouse();
      button_3d(100, 250, 150, 275, CLICKED, "sin^-1", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0);
      show_mouse();
      ch = 'i';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 250 && Y <= 275) // Condition For cos^-1
    {
      hide_mouse();
      button_3d(160, 250, 210, 275, CLICKED, "cos^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0);
      show_mouse();
      ch = 'j';
      return ch;
    }
    //**************************

    if (X >= 430 && X <= 460 && Y >= 350 && Y <= 370) // Condition For MR
    {
      hide_mouse();
      button_3d(430, 350, 460, 370, CLICKED, "MR", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);
      show_mouse();
      ch = '?';
      return ch;
    }
    if (X >= 390 && X <= 420 && Y >= 350 && Y <= 370) // Condition For M-
    {
      hide_mouse();
      button_3d(390, 350, 420, 370, CLICKED, "M-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
      show_mouse();
      ch = '<';
      return ch;
    }
    if (X >= 350 && X <= 380 && Y >= 350 && Y <= 370) // Condition For M+
    {
      hide_mouse();
      button_3d(350, 350, 380, 370, CLICKED, "M+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
      show_mouse();
      ch = '>';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 250 && Y <= 275) // Condition For tan^-1
    {
      hide_mouse();
      button_3d(220, 250, 270, 275, CLICKED, "tan^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0);
      show_mouse();
      ch = 'k';
      return ch;
    }
    //**************************

    if (X >= 100 && X <= 150 && Y >= 300 && Y <= 325) // Condition For ln
    {
      hide_mouse();
      button_3d(100, 300, 150, 325, CLICKED, "ln", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0);
      show_mouse();
      ch = 'n';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 300 && Y <= 325) // Condition For log
    {
      hide_mouse();
      button_3d(160, 300, 210, 325, CLICKED, "log", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(160, 300, 210, 325, UNCLICKED, "log", 0);
      show_mouse();
      ch = 'l';
      return ch;
    }
    //**************************

    if (X >= 220 && X <= 270 && Y >= 300 && Y <= 325) // Condition For X^2
    {
      hide_mouse();
      button_3d(220, 300, 270, 325, CLICKED, "x^2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0);
      show_mouse();
      ch = 'p';
      return ch;
    }
    if (X >= 100 && X <= 150 && Y >= 350 && Y <= 370) // Condition For deg
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, CLICKED, "deg", 15);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
      show_mouse();
      ch = 'd';
      flagp = flag;
      flag = ch;
      return ch;
    } 
//**************************
    if (X >= 160 && X <= 210 && Y >= 350 && Y <= 370) // Condition For rad
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, CLICKED, "rad", 15);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 15);
      show_mouse();
      ch = 'r';
      flagp = flag;
      flag = ch;

      return ch;
    }
    if (X >= 220 && X <= 270 && Y >= 350 && Y <= 370) // Condition For gra
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, CLICKED, "gra", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 15);
      show_mouse();
      ch = 'g';
      flagp = flag;
      flag = ch;
      return ch;

    }
    if ((X >= 480 && X <= 545 && Y >= 350 && Y <= 370) || (X >= 575 && X <= 595 && Y >= 23 && Y <= 40)) //OFF
    {
      free(mem);
      exit(0);
    }
    if (X >= 108 && X <= 208 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, CLICKED, "DEC", 15);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
      show_mouse();
      ch = 'u';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 218 && X <= 318 && Y >= 140 && Y <= 160) // Condition For oct
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, CLICKED, "OCT", 15);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 15);
      show_mouse();
      ch = 'v';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 328 && X <= 428 && Y >= 140 && Y <= 160) // Condition For hex
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, CLICKED, "HEX", 15);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 15);
      show_mouse();
      ch = 'w';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 438 && X <= 538 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, CLICKED, "BIN", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 15);
      show_mouse();
      ch = 'x';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 480 && X <= 510 && Y >= 280 && Y <= 300) {
      hide_mouse();
      button_3d(480, 280, 510, 300, CLICKED, "sqrt", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0);
      show_mouse();
      ch = 'q';
      return ch;
    }

  } while (kbhit() == 0);
  ch = getch();
  return ch;
}

//***********************************************
// *
// This function performs the Calculations *
// *
//***********************************************
double add(double x, double y, char ch) {
  switch (ch) {
  case '+':
    y = x + y;
    break;
  case '-':
    y = x - y;
    break;
  case '*':
    y = x * y;
    break;
  case '/':
    y = x / y;
  }
  return y;
}

double angle_conv(double no) {
  if (flagp == 'd') {
    if (flag == 'r') {
      no = no * PI / 180;
    }
    if (flag == 'g') {
      no = no * 1.1111111;
    }
  } else if (flagp == 'r') {
    if (flag == 'd') {
      no = no * 180 / PI;
    }
    if (flag == 'g') {
      no = no * 180 / PI * 1.1111111;
    }
  } else if (flagp == 'g') {
    if (flag == 'r') {
      no = no / (180 * 1.1111111) * PI;
    }
    if (flag == 'd') {
      no = no / 1.1111111;
    }
  }
  return (no);
}

void basecng(double y, double pnt1) {
  char str[17];
  if (pnt1 != 0) {
    gotoxy(row, col);
    printf("The trial version does not support this feature");
    getch();
    bflag = 'u';
    bflagp = '0';
    main();
  }
  if (bflagp != 'u') {
    gotoxy(row, col);
    printf("The trial version does not support this feature ");
    getch();
    bflagp = '0';
    bflag = 'u';
    main();
  }
  switch (bflag) {
  case 'v':
    itoa(y, str, 8);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    break;

  case 'w':
    itoa(y, str, 16);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    // getch();
    break;

  case 'x':
    itoa(y, str, 2);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    // getch();
    bflagp = '0';
    break;
  }
  bflag = 'u';
}
 




// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.cpp"
using namespace std;

int main()
{
    login userLogin;
    string userChoice;
    cout << "\t\t\t_____________________________________________\n\n\n";
    cout << "\t\t\t         Welcome to the NEMO 2023 Login!       \n\n";
    cout << "\t\t\t_________           Menu           __________\n\n";
    cout << "\t | Press 1 to LOGIN                              |" << endl;
    cout << "\t | Press 2 to REGISTER                           |" << endl;
    cout << "\t | Press 3 if you forgot PASSWORD                |" << endl;
    cout << "\t | Press 4 to EXIT                               |" << endl;
    cout << "\n\t\t\t Please Enter your choice: ";
    cin >> userChoice;
    cout << endl;

    if (userChoice == "1")
    {
        userLogin.Login();
        main();
    }
    else if (userChoice == "2")
    {
        userLogin.Registration();
        main();
    }
    else if (userChoice == "3")
    {
        userLogin.ForgotPassword();
        main();
    }
    else if (userChoice == "4")
    {
        cout << "\t\t\t Goodbye! \n\n";
    }
    else
    {
        system("cls");
        cout << "\t\t\t Please select from the options above\n";
        main();
    }
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "login.h"
using namespace std;

void login::Login()
{
    string count;
    string username, password, id, recordPass, recordSecurity;
    system("cls");
    cout << "\n\t\t\t Please enter the username and password: " << endl;
    cout << "\t\t\t USERNAME: ";
    cin >> username;
    cout << "\t\t\t PASSWORD: ";
    cin >> password;

    string loginHash = password;
    hash<string> mystdhash;
    int loginHashPassword = mystdhash(loginHash);

    ifstream input("data.txt");

    while (input >> id >> recordPass >> recordSecurity)
    {
        if (id == username && stoi(recordPass) == loginHashPassword)
        {
            count = "1";
            system("cls");
        }
    }
    input.close();
    if (count == "1")
    {
        cout << username << "\nLogin successful!\n";
        string choice = "1";
        while (choice != "2")
        {
            cout << "\t\t\t_____________________________________________\n\n\n";
            cout << "\t\t\t         Welcome to the NEMO 2023 Login!         \n\n";
            cout << "\t\t\t_______ Currently Logged In: " << username << " ________\n\n";
            cout << "\t\t\t_________           Menu           __________\n\n";
            cout << "\t | Press 1 to PLAY GAME                              |" << endl;
            cout << "\t | Press 2 to LOGOUT                                 |" << endl;
            cout << "\n\t\t\t Please Enter your choice: ";
            cin >> choice;
            cout << endl;

            if (choice == "1")
            {
                system("cls");
                DrunkGame();
            }
            else if (choice == "2")
            {
                system("cls");
                cout << "Logging out" << endl;
            }
            else
            {
                system("cls");
                cout << "Choice invalid, try again";
            }
        }
    }
    else
    {
        system("cls");
        cout << "\n Username or password is incorrect, please try again or register\n";
    }
}

void login::Registration()
{
    string regUser, regPassword, regId, regPass, securityQuestion, regSecure, regCount;
    system("cls");
    cout << "\n\t\t\t Enter Username: ";
    cin >> regUser;
    cout << "\t\t\t Enter Password: ";
    cin >> regPassword;
    cout << "\t\t\t Security Question: What was your favorite childhood movie?: ";
    cin.ignore();
    getline(cin, securityQuestion);

    string hashing = regPassword;
    hash<string> mystdhash;
    int hashPassword = mystdhash(hashing);

    string secureHashing = securityQuestion;
    hash<string> mystdhash2;
    int securityHash = mystdhash2(secureHashing);

    ifstream input("data.txt");
    input.seekg(0, ios::end);

    if (input.tellg() == 0)
    {
        ofstream f1("data.txt", ios::app);
        f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
        system("cls");
        cout << "\n\t\t\t Registration successful!\n";
        return;
    }
    else
    {
        ifstream input("data.txt");
        while (input >> regId >> regPass >> regSecure)
        {
            if (regUser == regId)
            {
                string decision;
                cout << "\n\t\tUsername already taken.\n";
                cout << "\t\tEnter 1 to enter a new one\n";
                cout << "\t\tEnter 2 to go back to the menu\n";
                cout << "\n\t\tEnter choice: ";
                cin >> decision;

                if (decision == "1")
                {
                    Registration();
                }
                else if (decision == "2")
                {
                    system("cls");
                    cout << "\tReturning to menu\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tInvalid Entry, returning to menu." << endl;
                    return;
                }
            }
            else
            {
                regCount = "1";
            }
        }
        if (regCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << regUser << ' ' << hashPassword << ' ' << securityHash << endl;
            system("cls");
            cout << "\n\t\t\t Registration successful!\n";
            return;
        }
    }
}

void login::DrunkGame()
{
    srand(time(0));
    const int size = 60;
    cout << "Enter a letter to begin \n ";
    char x;
    cin >> x;
    int position = size / 2;
    while (true)
    {
        cout << "|START|";
        for (int i = 0; i < size; i++)
        {
            if (i == position)
                cout << x;
            else
                cout << " ";
        }
        cout << "|END|" << endl;
        int move = rand() % 3 - 1;
        position = position + move;
        if (position < 1)
        {
            cout << "Guess you were too drunk to make it to the end..." << endl;
            break;
        }
        if (position > size - 1)
        {
            cout << "You might be drunk, but you made it to the end!" << endl;
            break;
        }
        for (int sleep = 0; sleep < 1000000; ++sleep)
            ;
    }
    system("pause");
    system("cls");
}

void login::ForgotPassword()
{
    string forgotChoice, count, secondCount;
    system("cls");
    cout << "\n\t\t\tPress 1 to enter USERNAME\n";
    cout << "\t\t\tPress 2 to go back to MENU\n";
    cout << "\n\t\t\tEnter choice: ";
    cin >> forgotChoice;

    if (forgotChoice == "1")
    {
        string user, userSecurity, forgotId, forgotPass, forgotSecurity;
        int newHashPassword, forgotSecHash;
        system("cls");
        cout << "\n\t\tEnter USERNAME: ";
        cin >> user;
        cout << endl;

        ifstream input("data.txt");
        while (input >> forgotId >> forgotPass >> forgotSecurity)
        {
            if (user == forgotId)
            {
                cout << "\n\t\tUser found\n\t\tSecurity Question: What was your favorite childhood movie?: ";
                cin.ignore();
                getline(cin, userSecurity);
                cout << endl;

                string hashing = userSecurity;
                hash<string> mystdhash;
                forgotSecHash = mystdhash(hashing);

                if (stoi(forgotSecurity) == forgotSecHash)
                {
                    system("cls");
                    string newPass;
                    cout << "\t\tSecurity Question correct\n";
                    cout << "\n\t\tEnter new PASSWORD: ";
                    cin >> newPass;

                    string newPassHash = newPass;
                    hash<string> mystdhash2;
                    newHashPassword = mystdhash2(newPassHash);

                    count = "1";
                    break;
                }
                else
                {
                    string incorrectChoice;
                    system("cls");
                    cout << "\t\tSecurity Question incorrect\n";
                    cout << "\t\tPress 1 to Re-Enter\n\t\tPress 2 to return to MENU\n";
                    cout << "\n\t\tEnter choice: ";
                    cin >> incorrectChoice;

                    if (incorrectChoice == "1")
                    {
                        ForgotPassword();
                    }
                    if (incorrectChoice == "2")
                    {
                        system("cls");
                        cout << "\tReturning to MENU\n";
                        return;
                    }
                    else
                    {
                        system("cls");
                        cout << "\tInvalid answer... Returning to menu\n";
                        return;
                    }
                }
            }
            else
            {
                string newChoice;
                system("cls");
                cout << "\t\tUser not found\n";
                cout << "\t\tPress 1 to Re-Enter USERNAME\n\t\tPress 2 to return to MENU\n";
                cout << "\n\t\tEnter choice: ";
                cin >> newChoice;
                if (newChoice == "1")
                {
                    ForgotPassword();
                }
                else if (newChoice == "2")
                {
                    system("cls");
                    cout << "\tReturning to MENU\n";
                    return;
                }
                else
                {
                    system("cls");
                    cout << "\tChoice invalid... Returning to MENU\n";
                    return;
                }
            }
        }
        input.close();
        if (count == "1")
        {
            DeleteLine(user);
            secondCount = "1";
        }
        if (secondCount == "1")
        {
            ofstream f1("data.txt", ios::app);
            f1 << user << ' ' << newHashPassword << ' ' << forgotSecHash << endl;
            system("cls");
            cout << "\t\t\t Your password has been updated!\n";
            return;
        }
    }
    else if (forgotChoice == "2")
    {
        system("cls");
        cout << "\tReturning to MENU\n";
        return;
    }
    else
    {
        system("cls");
        cout << "\tChoice invalid... Try again\n";
        ForgotPassword();
    }
}

void login::DeleteLine(string userDelete)
{
    string line;
    ifstream myFile;
    myFile.open("data.txt");
    ofstream temp;
    temp.open("temp.txt");
    while (getline(myFile, line))
    {
        if (line.substr(0, userDelete.size()) != userDelete)
        {
            temp << line << endl;
        }
    }
    myFile.close();
    temp.close();
    remove("data.txt");
    rename("temp.txt", "data.txt");
}


// Autor : Nemonet TYP
// Title: A Login and Registration System Programmed in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#pragma once
#include <string.h>
using namespace std;

class login
{
private:
    void DrunkGame();
    void DeleteLine(string username);

public:
    void Login();
    void Registration();
    void ForgotPassword();
};


// Autor : Nemonet TYP
// Title: Encryption and Decryption project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include <iostream>
using namespace std;

int main()
{
   int i, x;
   char str[100];

   cout << "Please enter a string:\t";
   cin >> str;

   cout << "\nPlease choose following options:\n";
   cout << "1 = Encrypt the string.\n";
   cout << "2 = Decrypt the string.\n";
   cin >> x;

   //using switch case statements
   switch(x)
   {
      //first case for encrypting a string
      case 1:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
            str[i] = str[i] + 2; //the key for encryption is 3 that is added to ASCII value

         cout << "\nEncrypted string: " << str << endl;
         break;

      //second case for decrypting a string
      case 2:
         for(i = 0; (i < 100 && str[i] != '\0'); i++)
         str[i] = str[i] - 2; //the key for encryption is 3 that is subtracted to ASCII value

      cout << "\nDecrypted string: " << str << endl;
      break;

      default:
         cout << "\nInvalid Input !!!\n";
   }
   return 0;
}


/*
	project status : 1
 	Date : Oct 11, 2022
	Author : Easter Maxwell
	co-factor : The Young Programmer Nemonet (Nov 16, 2022)
*/

/*'Error --1' is just a random error message*/

//control number output
#include <iomanip>   

//for system operations
#include <windows.h>

#include <iostream>

using namespace std;

void standard_output()
{
	int fahr;
	int order;
	int celsius;
	int lower_value;
	int upper_value;

	cout << '\n';
	cout << "[+]Enter Order value : ";
	cin  >> order;

	cout << '\n';
	cout << "[+]Enter Lower Value : ";
	cin  >> lower_value;

	cout << '\n';
	cout << "[+]Enter Upper Value : ";
	cin  >> upper_value;

	/*enables 'fahr' to start printing from the lowest value*/
	fahr = lower_value;

	cout << '\n';
	cout << "\t\t\t\t\t         ";
	cout << "--- Temperature ---" << '\n';

	cout << '\n';
	cout << "\t\t\t\t\t    "
	     << "+----------------------------+"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "| Fahrenheit       Celsius   |"
	     << '\n'
	     << "\t\t\t\t\t    "
	     << "+--------------|-------------+";

	while (fahr <= upper_value)
	{
		/*Formula (Fahrenheit to Celsius)*/
		celsius = 5 * (fahr - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t    ";

		cout << "|     " << fahr << "\t\t " << celsius << "     |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+--------------|-------------+";

		/*increments fahrenheit by the 'order' value*/
		fahr = fahr + order;
	}

}

void user_specific_output()
{
	string option;
	float fahr_input;
	float fahr_value;
	float celsius_input;
	float celsius_value;

	cout << "\t\t\t\t\t       "
		 << "--- Available Options ---" << '\n';

	cout << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press F to convert temperature from Fahrenheit to celsius |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| --------------------------------------------------------- |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "| Press C to convert temperature from Celsius to Fahrenheit |"
	     << "\t\t\t     "
	     << '\n'
	     << "\t\t\t     "
	     << "+-----------------------------------------------------------+";

	cout << "\n\n";
	cout << "[:]Enter Option : ";
	cin  >> option;

	if (option == "C" || option == "c")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Celsius : ";
		cin  >> celsius_input;

		/*Formula (Celsius to Fahrenheit)*/
		fahr_value = (9.0 / 5.0) * celsius_input + 32;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|   Celsius       Fahrenheit |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << celsius_input << "\t   |      " << setprecision(3) << fahr_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";

	}

	else if (option == "F" || option == "f")
	{
		cout << '\n';
		cout << "[+]Enter Temperature in Fahrenheit : ";
		cin  >> fahr_input;

		/*Formula (Fahrenheit to Celsius)*/
		celsius_value = 5 * (fahr_input - 32) / 9;

		cout << '\n';
		cout << "\t\t\t\t\t            ";
		cout << "--- Result ---" << '\n';

		cout << '\n';
		cout << "\t\t\t\t\t    "
		     << "+----------------------------+"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "|  Fahrenheit       Celsius  |"
		     << '\n'
		     << "\t\t\t\t\t    "
		     << "+--------------|-------------+";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "|     " << fahr_input << "\t   |    " << setprecision(3) << celsius_value << "\t |";

		cout << '\n';
		cout << "\t\t\t\t\t    ";
		cout << "+----------------------------+";
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

}

int main()
{
	string user_input;

	cout << "\t\t\t\t\t    ";
	cout << "--- TEMPERATURE CALCULATOR ---";
	cout << "\n\n";
	cout<<"\n\t\tDeveloped By:";
    	cout<<" Easter Maxwell (Oct 11, 2022)";
    	cout<<"\n\t\t In Collaboration with:";
    	cout<<" Nemonet (TYP) (Nov 16, 2022)";
    	cout<<"\n\n\n\n";

	cout << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press 0 to display standard  input |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| ---------------------------------- |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "| Press X to display specific output |"
	     << "\t\t\t\t\t"
	     << '\n'
	     << "\t\t\t\t\t"
	     << "+------------------------------------+"
	     << "\n\n";

	cout << "[:]Enter option : ";
	cin  >> user_input;

	if (user_input == "0" || user_input == "o" || user_input == "O")
	{
		Sleep(500);

		/*display this function*/
		standard_output();
	}

	else if (user_input == "X" || user_input == "x" || user_input == "*")
	{
		Sleep(500);

		/*display this function*/
		user_specific_output();
	}

	else
	{
		Sleep(500);
		cout << "\n[:]#Msg : Error --1" << '\n';
		cout << "[:}Fault : Invalid option Input!" << '\n';
	}

	return 0;

}



#include <iostream>

using namespace std;

//addition
long double add(long double num1, long double num2)
{
    long double result;
    {
        result = num1 + num2;
    }
    return result;
}
//subtraction
long double sub(long double num1a, long double num2a)
{
    long double resulta;
    {
        resulta = num1a - num2a;
    }
    return resulta;
}
//multiplication
long double mltp(long double num1b, long double num2b)
{
    long double resultb;
    {
        resultb = num1b * num2b;
    }
    return resultb;
}
//division
long double dv(long double num1c, long double num2c)
{
    long double resultc;
    {
        resultc = num1c / num2c;
    }
    return resultc;
}
//exponent
long double power(long double base, long double exponent)
{
    long double resultd = 1;
    for(long double i = 0; i < exponent; i++)
    {
       resultd = base * resultd; 
    }
    return resultd;
}

int panel;
long double a;
long double b;

void ctrl_panel()
{
    cout << "Control Panel\n\nOperators: \n\n1.Addition\n2.Subtraction\n3.Multiplication\n4.Division\n5.Exponent\n6.Multiplication Table\n7.Celcius to Farenheit\n8.Farenheit to Celcius\n\n0.Back\n";
    cin >> panel;
    switch(panel)
    {
        case 0:
            return;
            break;
        case 1:
            cout << "Addition\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << add(a, b) << endl << endl;
            break;
        case 2:
            cout << "Subtraction\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << sub(a, b) << endl << endl;
            break;
        case 3:
            cout << "Multiplication\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << mltp(a, b) << endl << endl;
            break;
        case 4:
            cout << "Division\n\nFirst Number: \n";
            cin >> a;
            cout << "Second Number: \n";
            cin >> b;
            cout << dv(a, b) << endl << endl;
            break;
        case 5:
            cout << "Exponent\n\nBase: \n";
            cin >> a;
            cout << "Power: \n";
            cin >> b;
            cout << power(a, b) << endl << endl;
            break;
        case 7:
            cout << "Celcius to Farenheit\n\nTemperature: \n";
            cin >> a;
            cout << a * 1.8 + 32 << "℉" << endl << endl;
            break;
        case 8:
            cout << "Farenheit to Celcius\n\nTemperature: \n";
            cin >> a;
            cout << (a - 32) * 5/9 << "℃" << endl << endl;
            break;
        case 6:
            cout << "Multiplication table\n\nPlease select a number you want to show the table of: \n";
            int num;
            cin >> num;
            int num2 = 0;
            cout << "Range: \n";
            int range;
            cin >> range;
    
            for(int i = 0; i < range; i++)
            {
                num2++;
                cout << num << " x " << num2 << " = " << num * num2 << endl << endl;
            }
            break; 
        }
}

int main()
{
    int choice;
    do
    {
        cout << "Welcone to NemoNet Calculator\n\n1.Enter\n0.Quit\n\n";
        cout << " contact NemoNet on: \n\nGitHub\n";
        cin >> choice;
        
        switch(choice)
        {
            case 1:
                ctrl_panel();
                break;
            case 0:
                return 0;
                break;
        }
    }
    while(choice != 0);
}


// Autor : Nemonet TYP
// Title: Supermarket Billing System project in C++
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL



#include<iostream>
#include<windows.h>
#include<conio.h>
#include<fstream>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iomanip>
using namespace std;
//global variable declaration
int k=7,r=0,flag=0;
COORD coord = {0, 0};

void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
struct date
{
    int mm,dd,yy;
};

ofstream fout;
ifstream fin;

class item
{
    int itemno;
    char name[25];
    date d;
public:
    void add()
    {
        cout<<"\n\n\tItem No: ";
        cin>>itemno;
        cout<<"\n\n\tName of the item: ";
        cin>>name;
//gets(name);
        cout<<"\n\n\tManufacturing Date(dd-mm-yy): ";
        cin>>d.mm>>d.dd>>d.yy;
    }
    void show()
    {
        cout<<"\n\tItem No: ";
        cout<<itemno;
        cout<<"\n\n\tName of the item: ";
        cout<<name;
        cout<<"\n\n\tDate : ";
        cout<<d.mm<<"-"<<d.dd<<"-"<<d.yy;
    }
    void report()
    {
        gotoxy(3,k);
        cout<<itemno;
        gotoxy(13,k);
        puts(name);
    }
    int retno()
    {
        return(itemno);

    }

};

class amount: public item
{
    float price,qty,tax,gross,dis,netamt;
public:
    void add();
    void show();
    void report();
    void calculate();
    void pay();
    float retnetamt()
    {
        return(netamt);
    }
} amt;

void amount::add()
{
    item::add();
    cout<<"\n\n\tPrice: ";
    cin>>price;
    cout<<"\n\n\tQuantity: ";
    cin>>qty;
    cout<<"\n\n\tTax percent: ";
    cin>>tax;
    cout<<"\n\n\tDiscount percent: ";
    cin>>dis;
    calculate();
    fout.write((char *)&amt,sizeof(amt));
    fout.close();
}
void amount::calculate()
{
    gross=price+(price*(tax/100));
    netamt=qty*(gross-(gross*(dis/100)));
}
void amount::show()
{
    fin.open("itemstore.dat",ios::binary);
    fin.read((char*)&amt,sizeof(amt));
    item::show();
    cout<<"\n\n\tNet amount: ";
    cout<<netamt;
    fin.close();
}

void amount::report()
{
    item::report();
    gotoxy(23,k);
    cout<<price;
    gotoxy(33,k);
    cout<<qty;
    gotoxy(44,k);
    cout<<tax;
    gotoxy(52,k);
    cout<<dis;
    gotoxy(64,k);
    cout<<netamt;
    k=k+1;
    if(k==50)
    {
        gotoxy(25,50);
        cout<<"PRESS ANY KEY TO CONTINUE...";
        getch();
        k=7;
        system("cls");
        gotoxy(30,3);
        cout<<" ITEM DETAILS ";
        gotoxy(3,5);
        cout<<"NUMBER";
        gotoxy(13,5);
        cout<<"NAME";
        gotoxy(23,5);
        cout<<"PRICE";
        gotoxy(33,5);
        cout<<"QUANTITY";
        gotoxy(44,5);
        cout<<"TAX";
        gotoxy(52,5);
        cout<<"DEDUCTION";
        gotoxy(64,5);
        cout<<"NET AMOUNT";
    }
}

void amount::pay()
{
    show();
    cout<<"\n\n\n\t\t*********************************************";
    cout<<"\n\t\t                 DETAILS                  ";
    cout<<"\n\t\t*********************************************";
    cout<<"\n\n\t\tPRICE                     :"<<price;
    cout<<"\n\n\t\tQUANTITY                  :"<<qty;
    cout<<"\n\t\tTAX PERCENTAGE              :"<<tax;
    cout<<"\n\t\tDISCOUNT PERCENTAGE         :"<<dis;
    cout<<"\n\n\n\t\tNET AMOUNT              :Rs."<<netamt;
    cout<<"\n\t\t*********************************************";
}

int main()
{
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout<<setprecision(2);
    fstream tmp("temp.dat",ios::binary|ios::out);
menu:
    system("cls");
    gotoxy(25,2);
    cout<<"Super Market Billing ";
    gotoxy(25,3);
    cout<<"===========================\n\n";
    cout<<"\n\t\t1.Bill Report\n\n";
    cout<<"\t\t2.Add/Remove/Edit Item\n\n";
    cout<<"\t\t3.Show Item Details\n\n";
    cout<<"\t\t4.Exit\n\n";
    cout<<"\t\tPlease Enter Required Option: ";
    int ch,ff;
    float gtotal;
    cin>>ch;
    switch(ch)
    {
    case 1:
ss:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Details";
        gotoxy(25,3);
        cout<<"================\n\n";
        cout<<"\n\t\t1.All Items\n\n";
        cout<<"\t\t2.Back to Main menu\n\n";
        cout<<"\t\tPlease Enter Required Option: ";
        int cho;
        cin>>cho;
        if(cho==1)
        {
            system("cls");
            gotoxy(30,3);
            cout<<" BILL DETAILS ";
            gotoxy(3,5);
            cout<<"ITEM NO";
            gotoxy(13,5);
            cout<<"NAME";
            gotoxy(23,5);
            cout<<"PRICE";
            gotoxy(33,5);
            cout<<"QUANTITY";
            gotoxy(44,5);
            cout<<"TAX %";
            gotoxy(52,5);
            cout<<"DISCOUNT %";
            gotoxy(64,5);
            cout<<"NET AMOUNT";
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            gtotal=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    amt.report();
                    gtotal+=amt.retnetamt();
                    ff=0;
                }
                if(ff!=0) gtotal=0;
            }
            gotoxy(17,k);
            cout<<"\n\n\n\t\t\tGrand Total="<<gtotal;
            getch();
            fin.close();
        }
        if(cho==2)
        {
            goto menu;
        }
        goto ss;
    case 2:
db:
        system("cls");
        gotoxy(25,2);
        cout<<"Bill Editor";
        gotoxy(25,3);
        cout<<"=================\n\n";
        cout<<"\n\t\t1.Add Item Details\n\n";
        cout<<"\t\t2.Edit Item Details\n\n";
        cout<<"\t\t3.Delete Item Details\n\n";
        cout<<"\t\t4.Back to Main Menu ";
        int apc;
        cin>>apc;
        switch(apc)
        {
        case 1:
            fout.open("itemstore.dat",ios::binary|ios::app);
            amt.add();
            cout<<"\n\t\tItem Added Successfully!";
            getch();
            goto db;

        case 2:
            int ino;
            flag=0;
            cout<<"\n\n\tEnter Item Number to be Edited :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            fout.open("itemstore.dat",ios::binary|ios::app);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
            fin.seekg(0);
            r=0;
            while(!fin.eof())
            {
                fin.read((char*)&amt,sizeof(amt));
                if(!fin.eof())
                {
                    int x=amt.item::retno();
                    if(x==ino)
                    {
                        flag=1;
                        fout.seekp(r*sizeof(amt));
                        system("cls");
                        cout<<"\n\t\tCurrent Details are\n";
                        amt.show();
                        cout<<"\n\n\t\tEnter New Details\n";
                        amt.add();
                        cout<<"\n\t\tItem Details editted";
                    }
                }
                r++;
            }
            if(flag==0)
            {
                cout<<"\n\t\tItem No does not exist...Please Retry!";
                getch();
                goto db;
            }
            fin.close();
            getch();
            goto db;

        case 3:
            flag=0;
            cout<<"\n\n\tEnter Item Number to be deleted :";
            cin>>ino;
            fin.open("itemstore.dat",ios::binary);
            if(!fin)
            {
                cout<<"\n\nFile Not Found...";
                goto menu;
            }
//fstream tmp("temp.dat",ios::binary|ios::out);
            fin.seekg(0);
            while(fin.read((char*)&amt, sizeof(amt)))
            {
                int x=amt.item::retno();
                if(x!=ino)
                    tmp.write((char*)&amt,sizeof(amt));
                else
                {
                    flag=1;
                }
            }
            fin.close();
            tmp.close();
            fout.open("itemstore.dat",ios::trunc|ios::binary);
            fout.seekp(0);
            tmp.open("temp.dat",ios::binary|ios::in);
            if(!tmp)
            {
                cout<<"Error in File";
                goto db;
            }
            while(tmp.read((char*)&amt,sizeof(amt)))
                fout.write((char*)&amt,sizeof(amt));
            tmp.close();
            fout.close();
            if(flag==1)
                cout<<"\n\t\tItem Succesfully Deleted";
            else if (flag==0)
                cout<<"\n\t\tItem does not Exist! Please Retry";
            getch();
            goto db;
        case 4:
            goto menu;
        default:
            cout<<"\n\n\t\tWrong Choice!!! Retry";
            getch();
            goto db;
        }
    case 3:
        system("cls");
        flag=0;
        int ino;
        cout<<"\n\n\t\tEnter Item Number :";
        cin>>ino;
        fin.open("itemstore.dat",ios::binary);
        if(!fin)
        {
            cout<<"\n\nFile Not Found...\nProgram Terminated!";
            goto menu;
        }
        fin.seekg(0);
        while(fin.read((char*)&amt,sizeof(amt)))
        {
            int x=amt.item::retno();
            if(x==ino)
            {
                amt.pay();
                flag=1;
                break;
            }
        }
        if(flag==0)
            cout<<"\n\t\tItem does not exist....Please Retry!";
        getch();
        fin.close();
        goto menu;
    case 4:
        system("cls");
        gotoxy(20,20);
        cout<<"ARE YOU SURE, YOU WANT TO EXIT (Y/N)?";
        char yn;
        cin>>yn;
        if((yn=='Y')||(yn=='y'))
        {
            gotoxy(12,20);
            system("cls");
            cout<<"************************** THANKS **************************************";
            getch();
            exit(0);
        }
        else if((yn=='N')||(yn=='n'))
            goto menu;
        else
        {
            goto menu;
        }
    default:
        cout<<"\n\n\t\tWrong Choice....Please Retry!";
        getch();
        goto menu;
    }
    return 0;
}


/*This C++ PROGRAM is developed by NemonET TYP and 
special right is given to TEAM TYP for educational purpose  */
//Don't copy source code without permission


#include <iostream>
#include <stdlib.h>

using namespace std;

void calculateGPA();
void calculateCGPA();
void method();

int main()
{
    system("cls");
    int input;
    cout<<"--------------------------------------------------------------------------"<<endl;
    cout<<"                    GPA & CGPA Calculator (Developed by Nemo)             "<<endl;
    cout<<"--------------------------------------------------------------------------\n"<<endl;
    cout<<"            MENU:"<<endl;
    cout<<"                   1. Calculate GPA (Grade Point Average)"<<endl;
    cout<<"                   2. Calculate CGPA (Cummulative Grade Point Average)"<<endl;
    cout<<"                   3. Method that is applied here for calclating GPA & CGPA"<<endl;
    cout<<"                   4. Exit Application"<<endl;
    cout<<"--------------------------------------------------------------------------"<<endl;
    sub:
    cout<<"Enter your choice: ";
    cin>>input;
    switch(input)
    {
        case 1:
                calculateGPA();
                break;

        case 2:
                calculateCGPA();
                break;
        case 3:
                method();
                break;
        case 4:
                exit(EXIT_SUCCESS);
                break;
        default:
            cout<<"You have entered wrong input.Try again!\n"<<endl;
            goto sub;
            break;
    }
}

void calculateGPA()
{
    int q;
    system("cls");
    cout<<"-------------- GPA Calculating -----------------"<<endl;
    cout<<" How many subject's points do you want to calculate? : ";
    cin>>q;

    float credit [q];
    float point [q];

    cout<<endl;
    for(int i=0;i<q;i++)
    {
        cout<<"Enter the credit for the subject "<<i+1<<": ";
        cin>>credit[i];
        cout<<endl;
        cout<<"Enter the point of the subject "<<i+1<<": ";
        cin>>point[i];
        cout<<"-----------------------------------\n\n"<<endl;
    }

    float sum=0;
    float tot;
    for(int j=0;j<q;j++)
    {
        tot=credit[j]*point[j];
        sum=sum+tot;
    }

    float totCr=0;
    for(int k=0;k<q;k++)
    {
        totCr=totCr+credit[k];
    }

    cout<<"\n\n\nTotal Points: "<<sum<<" . Total Credits: "<<totCr<<" .Total GPA: "<<sum/totCr<<" ."<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
}
void calculateCGPA()
{
    system("cls");
    int l;
    cout<<"-------------- CGPA Calculating -----------------\n\n"<<endl;
    cout<<"How many semester results do you want input? :";
    cin>>l;
    cout<<"\n\n"<<endl;
    float semrs[l];
    int i;

    for(i=0;i<l;i++)
    {
        cout<<" Enter Semester "<<i+1<<" Result(GPA): ";
        cin>>semrs[i];
        cout<<"\n"<<endl;
    }

    float semtot=0;
    for(int j=0;j<l;j++)
    {
        semtot=semtot+semrs[j];
    }

    cout<<"******** Your CGPA is "<<semtot/l<<" **********"<<endl;


    sub:
    int inmenu;
    cout<<"\n\n\n1. Calculate Again"<<endl;
    cout<<"2. Go Back to Main Menu"<<endl;
    cout<<"3. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                calculateCGPA();
                break;
        case 2:
                main();
                break;
        case 3:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }

}

void method()
{
    system("cls");
    cout<<"--------------- Method of Calculating GPA & CGPA ---------------\n\n"<<endl;
    cout<<" GPA= Sum of (Credit*Point) / total of credits \n"<<endl;
    cout<<" CGPA=  Sum of GPA / number of semesters "<<endl;
    cout<<"-----------------------------------------------------------------\n\n"<<endl;

    sub:
    int inmenu;
    cout<<"1. Go Back to Main Menu"<<endl;
    cout<<"2. Exit This App \n\n"<<endl;
    cout<<"Your Input: "<<endl;
    cin>>inmenu;

    switch(inmenu)
    {
        case 1:
                main();
                break;
        case 2:
                exit(EXIT_SUCCESS);

        default:
              cout<<"\n\nYou have Entered Wrong Input!Please Choose Again!"<<endl;
              goto sub;
    }
};


//DEVELOPED BY Nemonet TYP ‍‍‍‍‍‍‍‍‍‍‍‍

//C++ PROJECT

//START OF THE PROGRAM FOR HOTEL MANAGEMENT

#include<iostream>
#include<conio.h>
#include<fstream>
#include<stdio.h>
#include<stdlib.h>
#include<dos.h>

using namespace std;

//START OF CLASS



class hotel
{

int room_no;
char name[30];
char address[50];
char phone[10];

public:

void main_menu();		//to display the main menu
void add();			//to book a room
void display(); 		//to display the customer record
void rooms();			//to display alloted rooms
void edit();			//to edit the customer record
int check(int);			//to check room status
void modify(int);		//to modify the record
void delete_rec(int);		//to delete the record
void bill(int);                 //for the bill of a record
     };
    //END OF CLASS



//FOR DISPLAYING MAIN MENU



void hotel::main_menu()
{

int choice;
while(choice!=5)
{

  system("cls");
cout<<"\n\t\t\t\t**************************";
cout<<"\n\t\t\t\t SIMPLE HOTEL MANAGEMENT  ";
cout<<"\n\t\t\t\t      * MAIN MENU *";
cout<<"\n\t\t\t\t**************************";
cout<<"\n\n\n\t\t\t1.Book A Room";
cout<<"\n\t\t\t2.Customer Records";
cout<<"\n\t\t\t3.Rooms Allotted";
cout<<"\n\t\t\t4.Edit Record";
cout<<"\n\t\t\t5.Exit";
cout<<"\n\n\t\t\tEnter Your Choice: ";
cin>>choice;

switch(choice)
{

case 1:	add();
break;

case 2: display();
break;

case 3: rooms();
break;

case 4:	edit();
break;

case 5: break;

default:
{

cout<<"\n\n\t\t\tWrong choice.....!!!";
cout<<"\n\t\t\tPress any key to   continue....!!";
getch();

}

}

}

}


//END OF MENU FUNCTION


//FUNCTION FOR BOOKING OF ROOM


void hotel::add()
{

  system("cls");
int r,flag;
ofstream fout("Record.dat",ios::app);

cout<<"\n Enter Customer Detalis";
cout<<"\n -----------------------";
cout<<"\n\n Room no: ";
cout<<"\n Total no. of Rooms - 50";
cout<<"\n Ordinary Rooms from 1 - 30";
cout<<"\n Luxury Rooms from 31 - 45";
cout<<"\n Royal Rooms from 46 - 50";
cout <<"\n Enter The Room no. you want to stay in :- "<<'\n';
cin>>r;

flag=check(r);

if(flag)
cout<<"\n Sorry..!!!Room is already booked";

else
{

room_no=r;
cout<<" Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone No: ";
cin>>phone;

fout.write((char*)this,sizeof(hotel));
cout<<"\n Room is booked...!!!";

}

cout<<"\n Press any key to continue.....!!";

getch();
fout.close();

}


//END OF BOOKING FUNCTION


//FUNCTION FOR DISPLAYING A PURTICULAR CUSTOMER`S RECORD





void hotel::display()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
int r,flag;

cout<<"\n Enter room No. for a particular customer`s details :- "<<'\n';
cin>>r;

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

  system("cls");
cout<<"\n Customer Details";
cout<<"\n -----------------";
cout<<"\n\n Room no: "<<room_no;
cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Phone no: "<<phone;
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room no. not found or vacant....!!";
cout<<"\n\n Press any key to continue....!!";

getch();
fin.close();
}


//END OF DISPLAY FUNCTION

//FUNCTION TO DISPLAY ALL ROOMS OCCUPIED


void hotel::rooms()
{

  system("cls");

ifstream fin("Record.dat",ios::in);
cout<<"\n\t\t\t    List Of Rooms Allotted";
cout<<"\n\t\t\t    -----------------------";
cout<<"\n\n Room No.\tName\t\tAddress\t\t\t\tPhone No.\n";

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
cout<<"\n\n "<<room_no<<"\t\t"<<name;
cout<<"\t\t"<<address<<"\t\t"<<phone;

}

cout<<"\n\n\n\t\t\tPress any key to continue.....!!";
getch();
fin.close();

}


//FUNCTION FOR EDITING RECORDS AND FOR BILL


void hotel::edit()
{

  system("cls");

int choice,r;
cout<<"\n EDIT MENU";
cout<<"\n ----------";
cout<<"\n\n 1. Modify Customer Record";
cout<<"\n 2. Delete Customer Record";
cout<<"\n 3. Bill Of Customer";
cout<<"\n Enter your choice: ";

cin>>choice;
  system("cls");

cout<<"\n Enter room no: " ;
cin>>r;

switch(choice)
{

case 1:	modify(r);
break;

case 2:	delete_rec(r);
break;

case 3: bill(r);
break;

default: cout<<"\n Wrong Choice.....!!";

}
cout<<"\n Press any key to continue....!!!";

getch();
}


int hotel::check(int r)
{

int flag=0;

ifstream fin("Record.dat",ios::in);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)
{

flag=1;
break;

}

}

fin.close();
return(flag);

}


//FUNCTION TO MODIFY CUSTOMERS RECORD


void hotel::modify(int r)
{

long pos,flag=0;

fstream file("Record.dat",ios::in|ios::out|ios::binary);

while(!file.eof())
{

pos=file.tellg();
file.read((char*)this,sizeof(hotel));

if(room_no==r)
{

cout<<"\n Enter New Details";
cout<<"\n ------------------";
cout<<"\n Name: ";
cin>>name;
cout<<" Address: ";
cin>>address;
cout<<" Phone no: ";
cin>>phone;
file.seekg(pos);
file.write((char*)this,sizeof(hotel));
cout<<"\n Record is modified....!!";
flag=1;
break;

}

}

if(flag==0)
cout<<"\n Sorry Room No. not found or vacant...!!";
file.close();

}


//END OF MODIFY FUNCTION


//FUNCTION FOR DELETING RECORD


void hotel::delete_rec(int r)
{

int flag=0;
char ch;
ifstream fin("Record.dat",ios::in);
ofstream fout("temp.dat",ios::out);

while(!fin.eof())
{

fin.read((char*)this,sizeof(hotel));
if(room_no==r)

{

cout<<"\n Name: "<<name;
cout<<"\n Address: "<<address;
cout<<"\n Pone No: "<<phone;
cout<<"\n\n Do you want to delete this record(y/n): ";
cin>>ch;

if(ch=='n')
fout.write((char*)this,sizeof(hotel));
flag=1;

}

else
fout.write((char*)this,sizeof(hotel));

}

fin.close();
fout.close();

if(flag==0)
cout<<"\n Sorry room No. not found or vacant...!!";

else
{

remove("Record.dat");
rename("temp.dat","Record.dat");

}

}


//END OF DELETE FUNCTION


//FUNCTION FOR CUSTOMER`S BILL

void hotel::bill(int r)
{

hotel h1;
ifstream f1;
 f1.open("record.dat",ios::in|ios::binary);

if(!f1)
 cout<<"cannot open";

 else
 {

  f1.read((char*)&h1,sizeof (hotel));
  while(f1)

  {

  f1.read((char*)&h1,sizeof(hotel));

  }

  if (h1.room_no == r)
  {

  if(h1.room_no>=1&&h1.room_no<=30)
  cout<<"your bill = 2000";

  else if (h1.room_no>=35&&h1.room_no<=45)
  cout<<"your bill = 5000" ;

  else
  cout<<"your bill = 7000";

  }

  else
  { cout<<"room no. not found";}

  }

  f1.close();
  getch();

}

//END OF BILLING FUNCTION

//START OF MAIN PROGARM


int main()
{

hotel h;

  system("cls");

cout<<"\n\t\t\t*****************************";
cout<<"\n\t\t\t* HOTEL MANAGEMENT PROJECT  *";
cout<<"\n\t\t\t*****************************";
cout<<"\n\n\t\tDeveloped By:";
cout<<"\t\t Nemonet";
cout<<"\n\t\t\t\t The Young Programmer (TYP)";
cout<<"\n\n\n\n\n\n\n\t\t\t\t\tPress any key to continue....!!";

getch();

h.main_menu();
return 0;
}

//END OF MAIN PROGRAM





#include <iostream>
using namespace std;
int main()
{
    char str[100];
   
   
    cout<<"Enter some text or numbers and see magic:-"<<endl<<endl;
    cout<<"______________________________________"<<endl<<endl;
    cin.getline(str,100);
    cout<<str;
    cout<<"\n______________________________________"<<endl<<endl;
   
    
    for(int b=0;str[b]!='\0';b++){
        
        switch(str[b])
    {
    case 'a':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'b':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'c':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'd':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'e':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'f':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'g':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'h':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'i':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'j':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'k':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'l':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'm':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'n':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'o':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'p':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'r':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 's':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 't':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'u':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'v':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #    ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'w':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'x':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'A':
        {
        cout<<"\n    #     ";    
        cout<<"\n   # #    ";
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n#       #  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'B':
        {
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n #     # ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    
    case 'C':
        {
        cout<<"\n #### ";
        cout<<"\n#    ";
        cout<<"\n#    ";
        cout<<"\n#    #";
        cout<<"\n #### ";
        cout<<"\n \n  ";
        break;
        }
    case 'D':
        {
        cout<<"\n #####   ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n \n ";
        break;
        }
    case 'E':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####   ";
        cout<<"\n #      ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
    case 'F':
        {
        cout<<"\n ######  ";
        cout<<"\n #      ";
        cout<<"\n #####    ";
        cout<<"\n #      ";
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'G':
        {
        cout<<"\n  ##### "; 
        cout<<"\n #      "; 
        cout<<"\n #  ### ";
        cout<<"\n #  # # ";
        cout<<"\n  ### # ";
        cout<<"\n \n ";
        break;
        }
    case 'H':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #######";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'I':
        {
        cout<<"\n ####### ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    "; 
        cout<<"\n ####### "; 
        cout<<"\n \n ";
        break;
        }
    case 'J':
        {
        cout<<"\n ########";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n     #   ";
        cout<<"\n #####    ";  
        cout<<"\n \n ";
        break;
        }
    case 'K':
        {
        cout<<"\n #    #  ";      
        cout<<"\n #   #   ";      
        cout<<"\n # ##    ";      
        cout<<"\n #   #   ";    
        cout<<"\n #    #  ";   
        cout<<"\n \n ";
        break;
        }
    case 'L':
        {
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n #       ";
        cout<<"\n ####### ";
        cout<<"\n \n ";
        break;
        }
    case 'M':
        {
        cout<<"\n ##    ##  ";
        cout<<"\n # #  # #  ";
        cout<<"\n #  #   #  ";
        cout<<"\n #      #  ";
        cout<<"\n #      #  ";
        cout<<"\n \n ";
        break;
        }
    case 'N':
        {
        cout<<"\n #     #  ";
        cout<<"\n # #   #  ";
        cout<<"\n #  #  #  ";
        cout<<"\n #   # #  ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'O':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
    case 'P':
        {
        cout<<"\n ######  ";
        cout<<"\n #    #  ";
        cout<<"\n #####   ";
        cout<<"\n #       "; 
        cout<<"\n #      ";
        cout<<"\n \n ";
        break;
        }
    case 'Q':
        {
        cout<<"\n  #####   ";
        cout<<"\n #     #  ";
        cout<<"\n #     #  ";  
        cout<<"\n #  #  #  ";
        cout<<"\n  #####  ";
        cout<<"\n       #  ";   
        cout<<"\n \n ";
        break;
    case 'R':
        {
        cout<<"\n #####   ";  
        cout<<"\n #    #  ";  
        cout<<"\n #    #  ";
        cout<<"\n # ###   ";
        cout<<"\n #    #  ";
        cout<<"\n #     # ";
        cout<<"\n \n ";
        break;
        }
    case 'S':
        {
        cout<<"\n  ###### ";
        cout<<"\n #     ";
        cout<<"\n  #####  ";
        cout<<"\n       # ";
        cout<<"\n ###### ";
        cout<<"\n \n ";
        break;
        }
    case 'T':
        {
        cout<<"\n ########  ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n     #     ";
        cout<<"\n \n ";
        break;
        }
    case 'U':
        {
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n #     # ";
        cout<<"\n  #####  ";
        cout<<"\n \n ";
        break;
        }
    case 'V':
        {
        cout<<"\n #       #";
        cout<<"\n  #     # ";
        cout<<"\n   #   #  "; 
        cout<<"\n    # #   ";
        cout<<"\n     #    ";
        cout<<"\n \n ";
        break;
        }
    case 'W':
        {
        cout<<"\n #         #  ";
        cout<<"\n  #   #   #   ";
        cout<<"\n   # # # #    ";
        cout<<"\n    #   #      ";
        cout<<"\n \n ";
        break;
        }
    case 'X':
        {
        cout<<"\n #     #  ";
        cout<<"\n  #   #   ";
        cout<<"\n   # #    ";
        cout<<"\n  #   #   ";
        cout<<"\n #     #  ";
        cout<<"\n \n ";
        break;
        }
    case 'Y':
        {
        cout<<"\n #     # ";
        cout<<"\n  #   #  ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n    #    ";
        cout<<"\n \n ";
        break;
        }
    case 'Z':
        {
        cout<<"\n ######  ";
        cout<<"\n     #   ";
        cout<<"\n    #    ";
        cout<<"\n  #     ";
        cout<<"\n ######  ";
        cout<<"\n \n ";
        break;
        }
        case '0':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n #    # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }

    case '1':
        {
        cout<<"\n   #  ";
        cout<<"\n  ##  ";
        cout<<"\n   #  ";
        cout<<"\n   #  ";
        cout<<"\n #####";
        cout<<"\n \n   ";
        break;
        }
    case '2':
        {
        cout<<"\n  ###  ";
        cout<<"\n #   # ";
        cout<<"\n    #  ";
        cout<<"\n  #    ";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '3':
        {
        cout<<"\n ##### ";
        cout<<"\n    #  ";
        cout<<"\n   ##  ";
        cout<<"\n    #  ";
        cout<<"\n#####  ";
        cout<<"\n \n    ";
        break;
        }
    case '4':
        {
        cout<<"\n     # ";
        cout<<"\n   # # ";
        cout<<"\n  #  # ";
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n \n    ";
        break;
        }
    case '5':
        {
        cout<<"\n ######";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n      #";
        cout<<"\n ##### ";
        cout<<"\n \n    ";
        break;
        }
    case '6':
        {
        cout<<"\n  #####";
        cout<<"\n #     ";
        cout<<"\n ##### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '7':
        {
        cout<<"\n ######";
        cout<<"\n     # ";
        cout<<"\n    #  ";
        cout<<"\n   #   ";
        cout<<"\n  #    ";
        cout<<"\n \n    ";
        break;
        }
    case '8':
        {
        cout<<"\n  #####";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n #    #";
        cout<<"\n  #### ";
        cout<<"\n \n    ";
        break;
        }
    case '9':
        {
        cout<<"\n  #### ";
        cout<<"\n #    # ";
        cout<<"\n  ##### ";
        cout<<"\n      # ";
        cout<<"\n  ####  ";
        cout<<"\n \n     ";
        break;
        }
     
   case '.':
        {
        cout<<"\n  ## ";
        cout<<"\n #  # ";
        cout<<"\n  ## ";
        cout<<"\n \n     ";
        break;
        }
    default:
        {
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n ";
        cout<<"\n \n ";
        break;
        }
    }    
    
    return 0;

    }
  }
 }
}

}
    cout<<"\t______________________________________"<<endl;
    cout << "\n\t       And if you liked it,        " << endl;
    cout << " \t   give a star on GitHub !   " << endl;
    cout << "  \t           Thank you!               " << endl;
    cout<<"\t______________________________________"<<endl<<endl;
}


//created by The Young Programmer 🏅aka NemoNet 🖥

#include <iostream>
using namespace std;
int main()
{
    int attemp = 1,ans,guess=0,_won=0,h=100,l=0;
    srand(time(0));
    ans = rand() % 100;
    cout<<"**** PLEASE READ INSTRUCTION ****"<<endl<<endl;
    cout << "NemoNet will generate"<<endl<<"any random number between 0-100"<<endl;
    cout<<"you have to guess the number"<<endl<<"you have 5 attempts / chanses to guess"<<endl<<endl;
    cout<<"After each wrong guess NemoNet will tell you"<<endl<<"Your guess is HIGH or LOW"<<endl;
    cout<<" BEST OF LUCK"<<endl;
while(attemp <= 5)
{
cout<<endl<<"attempts no. :- "<<attemp<<endl;
cout<<"enter the guess between 0 - 100 "<<endl;
cin>>guess;
if(guess < 0 || guess > 100){
  cout<<"INVALID GUESS!!"<<endl;
  continue;
}
else if(guess == ans){
   cout<<"CONGRATULATIONS YOU WON!! your guess "<<guess<<" is correct"<<endl;
   _won = 1;
   break;
   }
else if(guess < ans){
  cout<<"*** Your guess "<<guess<<" * LOW * "<<endl;
  l = guess;
}
else{
  cout<<"*** Your guess "<<guess<<"  * HIGH * "<<endl;
  h = guess;
}
cout<<"*Number is between "<<l<<" ---to---> "<<h<<endl;
attemp++;
}//loop end
cout<<"\n";
if(_won){
  cout<<"THANKS FOR PLAYING!! PLESE GIVE A STAR"<<endl;
}
else{
  cout<<"Sorry you lost! correct answer is: "<<ans<<endl<<"please play again and give A STAR"<<endl;
}
cout<<"\n\n";
cout<<"You can Contact NemoNet for more programming Games :-) \n";
cout<<"https://github.com/The-Young-Programmer";
}


/*-------------------------------------------------------------------------

          GUI Calculator

Programmer           : Nemonet TYP


Software Details
====================
Developed in   : C++
Compiler used  : CodeBlocks
OS             : Windows OS


License   : Protected (Please give the credit of programming to author.)


-------------------------------------------------------------------------------------*/



#include <iostream.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <string.h>
#include <dos.h>

// Window
#define TITLEBARHEIGHT 21
#define BORDERWIDTH 1


#define ADD 1
#define SUBTRACT 2
#define MULTIPLY 3
#define DIVIDE 4

/*--------------------- Global Data ---------------------*/

int ButtonId;
enum bool{false,true};
enum BUTTON{MOUSE_NORMAL = 0,MOUSE_LBUTTON=1,MOUSE_RBUTTON=2,MOUSE_MBUTTON=4};
enum BUTTON_STATUS
{
   BUTTON_STATUS_NORMAL,
   BUTTON_STATUS_DOWN
};

/*------------------------------------------------------
       Mouse Class
------------------------------------------------------*/
class Mouse

{
  private:

   int MouseXpos, MouseYpos;
   BUTTON MouseBtn;
   union REGS in,out;

  public:

   int InstallMouse();
   int ShowMouse();
   int HideMouse();
   void GetMouseStatus();
   BUTTON GetButton();
   int GetPosX();
   int GetPosY();
   void SetMousePosi(int &xpos, int &ypos);
   int MouseInside(int x1, int y1, int x2, int y2);
   void RestrictMousePtr(int x1, int y1, int x2, int y2);

};


 int Mouse::InstallMouse()
 {

  in.x.ax = 0;
  int86(51,&in,&out);
  return out.x.ax;

 }
 int Mouse::ShowMouse()
 {

  in.x.ax = 1;
  int86(51,&in,&out);
  return 1;

 }
 int Mouse::HideMouse()
 {

  in.x.ax = 2;
  int86(51,&in,&out);
  return 1;

 }
 void Mouse::GetMouseStatus()
 {

  in.x.ax = 3;
  int86(51,&in,&out);
  MouseXpos = out.x.cx;
  MouseYpos = out.x.dx;
  MouseBtn = out.x.bx;

 }
 BUTTON Mouse::GetButton()
 {
  return MouseBtn;
 }

 int Mouse::GetPosX()
 {
  return MouseXpos;
 }

 int Mouse::GetPosY()
 {
  return MouseYpos;
 }

 void Mouse::SetMousePosi(int &xpos, int &ypos)
 {
  in.x.ax = 4;
  in.x.cx = xpos;
  in.x.dx = ypos;
  int86(51,&in,&out);
 }
 int Mouse::MouseInside(int x1, int y1, int x2, int y2)
 {
  int x_pos, y_pos;
  in.x.ax = 3;
  int86(51,&in,&out);
  x_pos = out.x.cx;
  y_pos = out.x.dx;

  if(x_pos >= x1 && y_pos >= y1 && x_pos <= x2 && y_pos <= y2)
   return 1;
  else
   return 0;

 }
 void Mouse::RestrictMousePtr(int x1, int y1, int x2, int y2)
 {

  in.x.ax = 7;
  in.x.cx = x1;
  in.x.dx = x2;
  int86(51,&in,&out);

  in.x.ax = 8;
  in.x.cx = y1;
  in.x.dx = y2;
  int86(51,&in,&out);

 }


/*------------------------------------------------------
       End of Mouse Class
------------------------------------------------------*/


/*------------------------------------------------------
       TextBox Class
------------------------------------------------------*/

class TextBox
{

 private:

 int Alignment;

 int Left,Top,Width,Height;
 char Caption[50];

 public:

 TextBox(int left, int top, int width, int height, char caption[],int Align);
 void Draw();
 void SetText(char text[]);
 char *GetText();
 void Clear();
};

 TextBox::TextBox(int left, int top, int width, int height, char caption[],int Align)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  Alignment = Align;
    }


    void TextBox::Draw()
   {
  setfillstyle(SOLID_FILL,WHITE);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(DARKGRAY);
  rectangle(Left,Top,Left+Width,Top+Height);

  setcolor(BLACK);

  settextjustify(Alignment,TOP_TEXT);
  if(Alignment==LEFT_TEXT)
   outtextxy(Left+2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   if(Alignment==RIGHT_TEXT)
    outtextxy(Left+Width-2,Top+1+((Height/2)-(textheight(Caption)/2)),Caption);
  else
   outtextxy(Left+(Width/2),Top+1+((Height/2)-(textheight(Caption)/2)),Caption);


   }


 void TextBox::SetText(char text[])
 {
  if (Left + textwidth(Caption) <= Left + Width - textwidth(" "))
  {
   strcat(Caption,text);
   Draw();
  }
 }

 char *TextBox::GetText()
 {
  return Caption;
 }

 void TextBox::Clear()
 {
  strcpy(Caption,"");
  Draw();
 }


/*------------------------------------------------------
       End of TextBox Class
------------------------------------------------------*/

/*-------------------Mouse Object---------------------*/

static Mouse mouse;

/*------------------------------------------------------
       Button Class
------------------------------------------------------*/

class Button
{

 private:

 int Left,Top,Width,Height,ID;
 char Caption[50];
 BUTTON_STATUS btnStatus;
 void MouseDown();
 void MouseUp();
 bool State;

 public:

 Button(int left, int top, int width, int height, char caption[], int Id);
 void Draw();
 void EnableClickHandler();

};

 Button::Button(int left, int top, int width, int height, char caption[], int Id)
    {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
  ID = Id;
  btnStatus = BUTTON_STATUS_NORMAL;
  State = false;
    }


   void Button::Draw()
   {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left+Width,Top,Left+Width,Top+Height);
  line(Left,Top+Height,Left+Width,Top+Height);

  settextjustify(LEFT_TEXT,TOP_TEXT);
  setcolor(BLACK);
  outtextxy(Left + (Width/2) - textwidth(Caption)/2 + 1,
  Top + (Height/2) - textheight(Caption)/2 + 1, Caption);

   }

   void Button::MouseDown()
   {




    mouse.HideMouse();

    setcolor(BLACK);
    line(Left,Top,Left+Width,Top);
    line(Left,Top,Left,Top+Height);

    setcolor(WHITE);
    line(Left+Width,Top,Left+Width,Top+Height);
    line(Left,Top+Height,Left+Width,Top+Height);

    mouse.ShowMouse();




   }

   void Button::MouseUp()
   {



     mouse.HideMouse();

     setcolor(WHITE);
     line(Left,Top,Left+Width,Top);
     line(Left,Top,Left,Top+Height);

     setcolor(BLACK);
     line(Left+Width,Top,Left+Width,Top+Height);
     line(Left,Top+Height,Left+Width,Top+Height);

     mouse.ShowMouse();

   }

   void Button::EnableClickHandler()
   {

  if(State)
  {
   ButtonId = 0;
   State = false;
   return;
  }

  if( mouse.MouseInside(Left,Top,Left+Width,Top+Height) == 1)
  {

   if( mouse.GetButton() == MOUSE_LBUTTON)
   {
    MouseDown();
    btnStatus = BUTTON_STATUS_DOWN;
   }

   else if(btnStatus == BUTTON_STATUS_DOWN &&  mouse.GetButton() == MOUSE_NORMAL)
   {
    MouseUp();
    ButtonId = ID;
    btnStatus = BUTTON_STATUS_NORMAL;
    State = true;

   }

  }

 }

/*------------------------------------------------------
                     End of Button Class
------------------------------------------------------*/

/*------------------------------------------------------
                     Window Class
------------------------------------------------------*/

class Window
{

 private:

 int Left,Top,Width,Height;
 char Caption[50];
 Button *CloseBtn;
 public:

 Window(int left, int top, int width, int height, char caption[]);
 void JCLogo();
 void Draw();
 void EnableClickHandler();
};


 Window::Window(int left, int top, int width, int height, char caption[])
 {
  Left = left;
  Top = top;
  Width = width;
  Height = height;
  strcpy(Caption,caption);
 }
 void Window::JCLogo()
 {
    /*********** Logo ************/

  setcolor(3);
  setfillstyle(SOLID_FILL,3);
  fillellipse(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-1,TITLEBARHEIGHT/2-1);
  setcolor(15);
  setfillstyle(SOLID_FILL,15);
  circle(Left+(BORDERWIDTH)+TITLEBARHEIGHT/2,Top+TITLEBARHEIGHT/2,TITLEBARHEIGHT/2-3);
  settextstyle(SMALL_FONT,0,0);
  outtextxy(Left+6,Top+4,"JC");
  settextstyle(0,0,0);
 }
 void Window::Draw()
 {
  setfillstyle(SOLID_FILL,LIGHTGRAY);
  bar(Left,Top,Left+Width,Top+Height);

  setcolor(WHITE);
  line(Left,Top,Left+Width,Top);
  line(Left,Top,Left,Top+Height);

  setcolor(BLACK);
  line(Left,Top+Height,Left+Width,Top+Height);
  line(Left+Width,Top,Left+Width,Top+Height);

  setfillstyle(SOLID_FILL,BLUE);
  bar(Left+BORDERWIDTH,Top+BORDERWIDTH,
  Left+Width-(BORDERWIDTH*2),Top+TITLEBARHEIGHT);

  setcolor(WHITE);
  settextjustify(LEFT_TEXT,TOP_TEXT);
  outtextxy(Left+(BORDERWIDTH*2)+TITLEBARHEIGHT+2,Top+(BORDERWIDTH*2)+(TITLEBARHEIGHT/2)-(textheight(Caption)/2),Caption);
  CloseBtn = new Button(Left+Width-TITLEBARHEIGHT-1, Top+2,TITLEBARHEIGHT-2, TITLEBARHEIGHT-2, "X", 9809);
  CloseBtn->Draw();

  JCLogo();

 }
 void Window::EnableClickHandler()
 {
  CloseBtn->EnableClickHandler();
  if (ButtonId == 9809)
  exit(0);

 }


/*------------------------------------------------------
       End of Window Class
------------------------------------------------------*/


/*------------------------------------------------------
       Main Function
------------------------------------------------------*/

void main()
{
 int gd=DETECT,gm,ch,errorcode;
 double opr1 = 0,opr2 = 0,result = 0,d=0;
 int Operation=0;
 double temp;
 char *chr,str[30];
 int len;
 int x = 160,y = 130;
 int w = 50, h = 40;
 char deci[]={"."};

 char btn[][3]={"AC","/","X","<-","7","8","9","-",
 "4","5","6","+","1","2","3","=","0",".","+/-"};


  // initialize graphics and local variables
  initgraph(&gd,&gm,"c://turboc3//bgi");

  // read result of initialization
  errorcode = graphresult();

  if (errorcode != grOk)// an error occurred
  {
   cout<<"Graphics error :: "<<grapherrormsg(errorcode);
   cout <<"\n press any key to halt: ";
   getch();
   exit(1);// terminate with an error code
  }

 mouse.InstallMouse();

 /* Drawing a Calculator Window */

 Window *pWindow = new Window(150,50,265,340,"Calculator");
 pWindow->Draw();

 /* Drawing Textbox */

 TextBox *pTextBox = new TextBox(160,80,243,30,"",RIGHT_TEXT);
 pTextBox->Draw();

 /* Drawing Buttons */

 Button *pButton[19];
 for (int i = 0;i<19;i++)
 {
    if(i == 15)
  h = 90;
    else
  h=40;
    pButton[i] = new Button(x,y,w,h,btn[i],i+1);
    pButton[i]->Draw();
    x = x+65;
    if(i == 3 || i == 7 || i==11 || i== 15)
    {
      y = y+50;
      x = 160;
    }
 }

 while(1){

   mouse.ShowMouse(); // To show mouse
   mouse.GetMouseStatus(); // To get position of mouse

  // Enabling click event on close button in window
  pWindow->EnableClickHandler();
  // Enabling click event on buttons
  for(int k = 0;k<19;k++)
  pButton[k]->EnableClickHandler();


  switch(ButtonId)
  {
    case 1: //AC
      pTextBox->Clear();
      d = 0;
      opr1=0;
      opr2=0;
      result = 0;
      Operation = 0;

    break;
    case 2: //Divide
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = DIVIDE;
      d = 0;

    break;
    case 3: //Multiply
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = MULTIPLY;
      d=0;

    break;
    case 4: //Backspace
      strcpy(chr,pTextBox->GetText());
      len=strlen(chr);
      if(chr[len-2] == deci[0])
      {
         chr[len-1]=0;
         chr[len-2]=0;
      }
      else
         chr[len-1] = 0;
      pTextBox->Clear();
      pTextBox->SetText(chr);

    break;
    case 5: //7
      pTextBox->SetText("7");

    break;
    case 6: //8
      pTextBox->SetText("8");

    break;
    case 7: //9
      pTextBox->SetText("9");

    break;
    case 8: // Subtraction
      opr1 = atoi(pTextBox->GetText());
      pTextBox->Clear();
      Operation = SUBTRACT;
      d=0;

    break;
    case 9: //4
      pTextBox->SetText("4");

    break;
    case 10: //5
      pTextBox->SetText("5");

    break;
    case 11: //6
      pTextBox->SetText("6");

    break;
    case 12: //Addition
      opr1 = atof(pTextBox->GetText());
      pTextBox->Clear();
      Operation = ADD;
      d=0;

    break;
    case 13: //1
      pTextBox->SetText("1");

    break;
    case 14: //2
      pTextBox->SetText("2");

    break;
    case 15: //3
      pTextBox->SetText("3");

    break;
    case 16: // Equal(=)
      opr2 = atof(pTextBox->GetText());

      switch(Operation)
      {
   case ADD:
   result = opr1+opr2;
   break;
   case SUBTRACT:
   result = opr1-opr2;
   break;
   case MULTIPLY:
   result = opr1*opr2;
   break;
   case DIVIDE:
   result = opr1/opr2;
   break;
      }

      pTextBox->Clear();
      pTextBox->SetText(gcvt(result,10,str));
      opr1=0;
      opr2=0;
      result = 0;
      Operation=0;

    break;
    case 17: //0
      pTextBox->SetText("0");

    break;
    case 18: // Decimal(.)
      if(d == 0)
      {
       d = 1;
       pTextBox->SetText(".");
      }

    break;
    case 19: //Plus & Minus (+/-)



   temp = atof(pTextBox->GetText());
   temp = temp* -1;
   pTextBox->Clear();
   pTextBox->SetText(gcvt(temp,10,str));


    break;
  }


       while(kbhit()){
  ch = getch();
  if (ch == 27)  //ESC key pressed
  exit(0);
    } }

}




#include <stdio.h> 
#include <stdlib.h> 


void enter_string(char* message, char* s, size_t s_size) 
{
  printf("%s", message);
  fgets(s, s_size, stdin);   
}

int get_score(char* s) 
{
  char *end;
  for (end = s; *end != '\0'; ++end);
  --end;

  if (end == s) 
  {
      printf("wrong Input\n");
      return -1;
  }

  int score = 0;
  char c;
  for(char* p = s; p != end; ++p)
  {
    c = *p;
    if(c == ' ') continue;

    c &= ~0x20;

    if(c >= 'A' && c <= 'Z')
    {
      score += c - '@';
    }  
    else
    {
      printf("wrong Input\n");
      return -1;
    }
  }
  return score * 5 / (end - s);
}

int main()
{
  int p,s1,s2;
  char name[1000];

  while(1)
  {
    do 
    {
      enter_string("Enter The First Name: ", name, sizeof(name));
      s1 = get_score(name);
    } while (s1 == -1);

    do 
    {
      enter_string("Enter The Second Name: ", name, sizeof(name));
      s2 = get_score(name);
    } while (s2 == -1);

    if(s2 > s1)
    {
      p = (s1 * 100) / s2;
    }
    else
    {
      p = (s2 * 100) / s1;
    }

    printf("The love Percentage is : %d %% \n",p);
    printf("\n pls Follow me  🌟 if you like this code 😊\n");
  } 
  return 0;
}


/* created by NemoNet aka The Young Programmer 🏅
in collaboration with tigertv 🐯 
pls kindly follow me on github OR
give me a star 🌟  */


//Arcade Spaceship Game
 /*
 * © 2021 Junwoo Yeom 
 * © 2022 Nemonet TYP
 */
 #define MAX_COL 120
 #define MAX_ROW 30
 #include <Windows.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
 #include <math.h>
 #include <conio.h>
 struct Ship_Location {//player
 int health; // current health
 int x;
 int y;
 }ship;

 const int max_health = 3;
 int score = 0; // current score
 int max_score = 0;//highest score
 int** background; // save object position obstacle item
 int bottom_size = 5;//Size occupied by the bottom display window
 int level = 1; // level

 int bottom_explain = 0; //temp variable

 void init(); //initialization function
 void gotoxy(int x, int y); // function to move coordinates
 void color(int code);//color change function

 void ship_move(); // make the player ship move
 void obstacle(int difficulty); //Function to save the missile's position
 void cure(int dif); // Function to store the health recovery item position
 void object_down(); //Function to move missiles and items
 void print_game(); // Function to print the game screen
 void bottom(); // Function to display bottom health, score, and highest score

 void clearbottom();
 void reset_arr_1(int* arr, int size, int value);//1 dimensional array initialization function
 void reset_arr_2(int** arr, int row, int column, int value); // 2D array initialization function
 void print_arr(); // function for debug
 int gameover(); // screen when game is over
 void load(); //Load the all-time high score
 void save(); // Save the highest score
 void mainmenu(); // main menu function

 int main(void) {
 int delay = 20;
 mainmenu();
 do {//do ~ while statement to confirm whether to continue the game
 init(); // initial setting
 delay = 20;
 while (ship.health >= 1) {

 ship_move(); // move the ship

 obstacle(level);//assign and move
 cure(2);
 object_down();

 print_game();
 score++;
 level = score / 100 + 1; // Level related expressions so that every 100 points rise by one level

 {
 if (score >= max_score) {//specify max score
 max_score = score;
 }
 if (20 - score / 100 > 0) { // Decrease the delay
 delay = 20 - score / 100;
 }
 else { // If less than 0, change to delay 1
 delay = 1;
 }
 Sleep(delay); // speed control
 }
 }
 save();
 system("cls");
 } while (gameover() == 1);

 return 0;
 }

 void mainmenu() {
 system("mode con:cols=100 lines=20");
 system("title main menu");
 gotoxy(50 - 13, 15);
 color(7);
 printf("Press any key to start the game");
 while (1) {
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 color(14);
 printf("★Dodge Missile★\n");

 Sleep(100);
 color(3);
 gotoxy(50 - 10, MAX_ROW / 2 - 9);
 printf("★Dodge Missile★\n");
 Sleep(100);
 if (_kbhit()) break; //check if key is pressed
 }
 }

 void init() {
 load(); //Load the highest score
 score = 0; // Initialize score
 srand(time(NULL)); // set random seed according to time
 background = (int**)malloc(sizeof(int*) * MAX_ROW);//background row (save objects in the background except player spaceship)
 for (int i = 0; i < MAX_ROW; i++) {
 background[i] = (int*)malloc(sizeof(int) * MAX_COL); // background column
 }

 ship.health = max_health;//set the ship's initial health
 reset_arr_2(background, MAX_ROW, MAX_COL, 0); // reset to 0
 ship.x = (MAX_COL - bottom_size) / 2; // Initial x-coordinate of the ship
 ship.y = MAX_ROW / 2;//Set the initial y-coordinate of the ship

 char* temp[30];
 sprintf_s(temp, sizeof(temp), "mode con:cols=%d lines=%d", MAX_COL, MAX_ROW); // Function to print string format
 system(temp);//Set window size
 system("title avoid missile");


 gotoxy(0, MAX_ROW - 5);//underscore
 color(7);
 for (int i = 0; i < MAX_COL; i++) {
 printf("─");
 }
 bottom();
 clearbottom();
 }
 void ship_move() {
 if (GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(0x41)) { // left or a key
 if (ship.x > 0) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Delete the previous afterimage
 ship.x--;//move to the left

 }
 }
 if (GetAsyncKeyState(VK_RIGHT) || GetAsyncKeyState(0x44)) { // right or d key
 if (ship.x < MAX_COL - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.x++;
 }
 }
 if (GetAsyncKeyState(VK_UP) || GetAsyncKeyState(0x57)) { // up or w key
 if (ship.y > 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");
 ship.y--;
 }
 }
 if (GetAsyncKeyState(VK_DOWN) || GetAsyncKeyState(0x53)) { // up or s-key
 if (ship.y < MAX_ROW - bottom_size - 1) {
 gotoxy(ship.x, ship.y);
 printf(" ");//Clear previous afterimage
 ship.y++;
 }
 }
 gotoxy(ship.x, ship.y);
 color(11);
 printf("A");
 color(7);
 }

 void obstacle(int dif) {
 if (100 / dif > 0) { // Since it is not divisible by 0
 if (score % (100 / dif) == 0) { // more and more obstacles
 background[0][ship.x] = -1; // an obstacle that reduces health by -1
 }
 }
 else {
 background[0][ship.x] = -1;
 }
 }
 void cure(int dif) {
 static int prv_dif = 0; // keep the original shape even when the function is off
 int random = 0; // obstacle location
 if (level != prv_dif) {//every time the level changes
 for (int i = 0; i < dif; i++) {
 random = rand() % MAX_COL;
 if (background[0][random] == 0) {
 background[0][random] = 1; // cure
 }
 else i--;
 }
 }
 prv_dif = level;
 }
 void object_down() {

 /* Problem occurs when moving from row to column
 If you read one line and go down, the object will be on the next line as well.
 By the time the for statement is finished, it will eventually go down all at once.
 */

 // So, use the method of descending one row at a time
 int* temp;
 for (int i = MAX_ROW - 1; i >= 1; i--) { // all background objects down
 reset_arr_1(background[MAX_ROW - 1], MAX_COL, 0); // Initialize the last line to 0
 temp = background[i ​​- 1];
 background[i ​​- 1] = background[i];
 background[i] = temp;
 }

 if (background[ship.y][ship.x] != 0) {//if missile and ship collide or eat health recovery item
 gotoxy(ship.x, ship.y - 1);//Go to the y-coordinate one space above and delete the missile
 printf(" ");

 ship.health += background[ship.y][ship.x];//Recover health or take damage.
 background[ship.y][ship.x] = 0;//Delete the object at that location from the array.
 }

 }

 void print_game() {
 gotoxy(0, 0); // move to position 0, 0
 for (int i = 0; i < MAX_ROW - bottom_size; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] < 0) {/missile if less than 0 heal if greater than 0
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" ");//Delete the previous position of the missile
 }
 gotoxy(j, i);
 printf("M");//missile
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//delete previous position of missile
 }

 }
 else if (background[i][j] > 0) {
 if (i - 1 >= 0 && background[i ​​- 1][j] == 0) {
 gotoxy(j, i - 1);
 printf(" "); // delete previous position
 }
 gotoxy(j, i);
 color(12);
 printf("+");//HealPack
 color(7);
 if (i == MAX_ROW - bottom_size - 1) { // also clear from the bottom
 gotoxy(j, i);
 printf(" ");//Delete previous missile position
 }
 }
 }
 }

 bottom();
 }
 void bottom() {
 static int prev_health = 0; // place to store previous health
 static int prev_level = 0;

 if (prev_health != ship.health) {// Only when health information is updated, delete the display at the bottom and update
 clearbottom();
 }prev_health = ship.health;

 if (prev_level != level) {//only when the level information is updated
 gotoxy(0, MAX_ROW - 4);
 printf("level %d", level);
 }

 if (bottom_explain <= 1) {
 printf(" (Move with the arrow keys, avoid the white color. Red is the healing potion.)");
 }bottom_explain++;


 gotoxy(0, MAX_ROW - 2);
 printf("Health: ");
 color(4); // dark red
 for (int i = 0; i < ship.health; i++) {
 printf("♥");
 }
 for (int i = 0; i < max_health - ship.health; i++) {
 printf("♡");
 }


 color(7); // white
 int a = 0;
 if (ship.health - max_health > 0) {
 a = ship.health - max_health;
 }
 else a = 0;
 gotoxy(20 + a * 2, MAX_ROW - 2);
 printf("Score: ");
 color(14); // light yellow
 printf("%d", score);

 gotoxy(40 + a * 2, MAX_ROW - 2);
 color(7); // white
 printf("Highest score: ");
 color(14); // light yellow

 printf("%d", max_score);
 color(7); // white


 }

 int gameover() {
 int i = 0;
 while (1) {
 color(12);
 printf(" _____ _____ _\n");
 printf("| __ \\ | _ | | |\n");
 printf("| | \\/ __ _ _ __ ___ ___ | | |__ __ ___ _ __ | |\n");
 printf("| | __ / _` || '_ ` _ \\ / _ \\ | | |\\ \\ / / / _ \\| '__| | |\n");
 printf("| |_\\ \\| (_| || | | | | | __/ \\ \\_/ / \\ V / | __/| | |_|\n");
 printf(" \\____/ \\__,_||_| |_| |_| \\___| \\___/ \\_/ \\___||_| (_)\n");
 printf("\n");
 color(7);
 printf("Current score: ");
 color(14);
 printf("%d\n", score);
 color(7);
 printf("Highest score: ");
 color(14);
 printf("%d\n", max_score);
 color(7);

 printf("\nDo you want to do this again?\n");
 printf("1. Yes\n");
 printf("2. no\n");
 system("pause");
 printf("\nInput:");

 if (scanf_s("%d", &i) == 0) {
 rewind(stdin);
 i = 0;
 printf("Character input is not allowed.\n");
 Sleep(1000);
 }
 else if (!(i >= 1 && i <= 2)) { // If any number other than 1 and 2
 i = 0;
 printf("Please enter a number between 1 and 2.\n");
 Sleep(1000);
 }
 else {
 break;
 }
 system("cls");
 }
 return i;
 }


 void color(int code) {
 SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), code); // Function defined in windows.h, standard output handle, set color to number
 }
 void gotoxy(int x, int y) {
 COORD Pos; // Coordinate structure
 Pos.X = x;
 Pos.Y = y;
 SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos); // Function defined in windows.h, standard output handle, coordinates as a structure
 }

 void clearbottom() {
 gotoxy(0, MAX_ROW - 4);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 gotoxy(0, MAX_ROW - 2);
 for (int i = 0; i < MAX_COL; i++) {
 printf(" ");
 }
 }
 void reset_arr_2(int** arr, int row, int column, int value) {
 for (int i = 0; i < row; i++) {
 for (int j = 0; j < column; j++) {
 arr[i][j] = value;
 }
 }
 }
 void reset_arr_1(int* arr, int size, int value) {
 for (int i = 0; i < size; i++) {
 arr[i] = value;
 }
 }
 void load() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "a+");//read and append mode
 if (fp != NULL) {
 fscanf_s(fp, "%d", &max_score);
 fclose(fp);
 }
 else printf("\nFailed to read file\n");
 }
 void save() {
 FILE* fp;
 fopen_s(&fp, ".Game_Info.txt", "w");
 if (fp != NULL) {
 fprintf(fp, "%d\n", max_score); // Save the highest score
 fclose(fp);
 }
 else printf("\nFailed to write file\n");
 }
 void print_arr() {//for debug
 printf("--------------------------------------");
 for (int i = 0; i < MAX_ROW; i++) {
 for (int j = 0; j < MAX_COL; j++) {
 if (background[i][j] != 0) {
 printf("%d", background[i][j]);
 }
 else {
 printf(" ");
 }
 }
 printf("\n");
 }
 }


// Autor : Nemonet TYP
// Title: Tic Tac Toe Game project in C
// PROJECT FOR C/C++ PROGRAMMING TUTORIAL


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <windows.h>

int board[10] = {2,2,2,2,2,2,2,2,2,2};
int turn = 1,flag = 0;
int player,comp;

void menu();
void go(int n);
void start_game();
void check_draw();
void draw_board();
void player_first();
void put_X_O(char ch,int pos);
COORD coord= {0,0}; // this is global variable
//center of axis is set to the top left cornor of the screen
void gotoxy(int x,int y)
{
    coord.X=x;
    coord.Y=y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}

void main()
{
    system("cls");
    menu();
    getch();

}

void menu()
{
    int choice;
    system("cls");
    printf("\n--------MENU--------");
    printf("\n1 : Play with X");
    printf("\n2 : Play with O");
    printf("\n3 : Exit");
    printf("\nEnter your choice:>");
    scanf("%d",&choice);
    turn = 1;
    switch (choice)
    {
    case 1:
        player = 1;
        comp = 0;
        player_first();
        break;
    case 2:
        player = 0;
        comp = 1;
        start_game();
        break;
    case 3:
        exit(1);
    default:
        menu();
    }
}

int make2()
{
    if(board[5] == 2)
        return 5;
    if(board[2] == 2)
        return 2;
    if(board[4] == 2)
        return 4;
    if(board[6] == 2)
        return 6;
    if(board[8] == 2)
        return 8;
    return 0;
}

int make4()
{
    if(board[1] == 2)
        return 1;
    if(board[3] == 2)
        return 3;
    if(board[7] == 2)
        return 7;
    if(board[9] == 2)
        return 9;
    return 0;
}

int posswin(int p)
{
// p==1 then X   p==0  then  O
    int i;
    int check_val,pos;

    if(p == 1)
        check_val = 18;
    else
        check_val = 50;

    i = 1;
    while(i<=9)//row check
    {
        if(board[i] * board[i+1] * board[i+2] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+1] == 2)
                return i+1;
            if(board[i+2] == 2)
                return i+2;
        }
        i+=3;
    }

    i = 1;
    while(i<=3)//column check
    {
        if(board[i] * board[i+3] * board[i+6] == check_val)
        {
            if(board[i] == 2)
                return i;
            if(board[i+3] == 2)
                return i+3;
            if(board[i+6] == 2)
                return i+6;
        }
        i++;
    }

    if(board[1] * board[5] * board[9] == check_val)
    {
        if(board[1] == 2)
            return 1;
        if(board[5] == 2)
            return 5;
        if(board[9] == 2)
            return 9;
    }

    if(board[3] * board[5] * board[7] == check_val)
    {
        if(board[3] == 2)
            return 3;
        if(board[5] == 2)
            return 5;
        if(board[7] == 2)
            return 7;
    }
    return 0;
}

void go(int n)
{
    if(turn % 2)
        board[n] = 3;
    else
        board[n] = 5;
    turn++;
}

void player_first()
{
    int pos;

    check_draw();
    draw_board();
    gotoxy(30,18);
    printf("Your Turn :> ");
    scanf("%d",&pos);

    if(board[pos] != 2)
        player_first();

    if(pos == posswin(player))
    {
        go(pos);
        draw_board();
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Player Wins");
        getch();
        exit(0);
    }

    go(pos);
    draw_board();
    start_game();
}

void start_game()
{
// p==1 then X   p==0  then  O
    if(posswin(comp))
    {
        go(posswin(comp));
        flag = 1;
    }
    else if(posswin(player))
        go(posswin(player));
    else if(make2())
        go(make2());
    else
        go(make4());
    draw_board();

    if(flag)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Computer wins");
        getch();
    }
    else
        player_first();
}

void check_draw()
{
    if(turn > 9)
    {
        gotoxy(30,20);
        //textcolor(128+RED);
        printf("Game Draw");
        getch();
        exit(0);
    }
}

void draw_board()
{
    int j;

    for(j=9; j<17; j++)
    {
        gotoxy(35,j);
        printf("|       |");
    }
    gotoxy(28,11);
    printf("-----------------------");
    gotoxy(28,14);
    printf("-----------------------");

    for(j=1; j<10; j++)
    {
        if(board[j] == 3)
            put_X_O('X',j);
        else if(board[j] == 5)
            put_X_O('O',j);
    }
}

void put_X_O(char ch,int pos)
{
    int m;
    int x = 31, y = 10;

    m = pos;

    if(m > 3)
    {
        while(m > 3)
        {
            y += 3;
            m -= 3;
        }
    }
    if(pos % 3 == 0)
        x += 16;
    else
    {
        pos %= 3;
        pos--;
        while(pos)
        {
            x+=8;
            pos--;
        }
    }
    gotoxy(x,y);
    printf("%c",ch);
}


/*-------------------------------------------------------------------------

          GUI Scientific Calculator 

Programmer     : Nemonet
                 The Young Programmer 💻


Software Details
====================
Developed in   : C
Compiler used  : Turbo C++ 3.0
Date           : 20/05/2022 -- 31/05/2022

Licence   : MIT Licence
(Please give the credit of programming to author.)


NOTE:


---------------------------------------------------------------------------*/






//Please change BGI directory accouding to your TC Directory
//By default it is "E:\tc\bgi"

#include <stdio.h>
#include <conio.h>
#include <process.h>
#include <dos.h>
#include <stdlib.h>
#include <iostream.h>
#include <graphics.h>
#include <math.h>
#include <string.h>

float * mem;
int X = 0, Y = 0;
int row = 17, col = 5;
char dummy;
char flag = 'd', flagp = '0';
char bflag = 'u', bflagp = 'u';
int mflag = 0;
char ch, ch1, ch2;
int sflag = 0;
int midx, midy;
#define UNCLICKED 0
#define CLICKED 1
#define PI 3.14159

char str1[] = {
  "Nemo TYP Roll# CIS 34"
};
char str2[] = {
  "Nemonet TYP Roll# CIS 50"
};

void typeit(int x, int y, int spacing, char string[]) {
  char temp[2];
  for (int i = 0; i < strlen(string); i++) {
    delay(100);
    temp[0] = string[i];
    temp[1] = '\0';
    outtextxy(x + (i + 1) * spacing, y, temp);
  } //endfor

}
void front() {
  int x, y, h;
  for (x = 0; x <= 100; x++) {
    settextjustify(CENTER_TEXT, CENTER_TEXT);
    setcolor(1);
    settextstyle(1, 0, 4);
    setusercharsize(x, 6, x, 3);
    setcolor(14);
    moveto(310, 135);
    outtext("..");
    setcolor(6);
    moveto(310, 130);
    outtext("I I");
    if (x < 50)
      delay(30);
    else
      delay(20);
  }
  for (y = 0; y <= 100; y++) {
    setcolor(0);
    settextstyle(1, 0, 4);
    setusercharsize(y, 6, y, 3);
    moveto(310, 135);
    outtext("..");
    moveto(310, 130);
    outtext("I I");
    if (y > 20) {
      settextstyle(7, 0, 3);
      setusercharsize(y - 20, 35, y - 20, 30);
      setcolor(9);
      outtext("CALCULATOR");
      setcolor(2);
      outtext("___________");
      delay(15);
      if (y < 100) {
        settextstyle(7, 0, 3);
        setusercharsize(y - 20, 35, y - 20, 30);
        setcolor(0);
        outtext("CALCULATOR");
      }
    }
  }
  //delay(1000);
  settextstyle(3, 0, 2);
  delay(50);
  outtextxy(midx - 200, midy, "Group Members:-");
  //x=10,y=10;
  setcolor(6);
  settextstyle(4, 0, 4);
  typeit(midx - 200, midy + 50, 15, str1);
  typeit(midx - 200, midy + 75, 15, str2);
  getch();
  //closegraph();

}

char input();
double add(double, double, char);
double angle_conv(double);
void basecng(double, double);

//***********************************************************
// *
// THIS FUNCTION DRAWS THE BUTTONS OF THE CALCULATOR *
// *
//***********************************************************

void button_3d(int x1, int y1, int x2, int y2, int check, char * text, int color) {
  int up, low;
  setfillstyle(1, 7);
  bar(x1, y1, x2, y2);
  if (check == 0) //Unclicked
    up = 15, low = 8;
  else
    up = 8, low = 15; //Clicked
  setcolor(low);
  line(x2, y1, x2, y2);
  line(x2 - 1, y1, x2 - 1, y2);
  line(x1, y2, x2, y2);
  line(x1 + 1, y2 - 1, x2, y2 - 1);

  setcolor(up);
  line(x1, y1, x2, y1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1, y1, x1, y2);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  setcolor(color);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  outtextxy(x1 + (x2 - x1) / 2, (y1 + (y2 - y1) / 2) - 2, text);

}
//********************************************************************
// *
// This function makes the opening screen *
// *
//********************************************************************

void frontpage(void) {
  int mx, my;

  mx = (getmaxx() / 2);
  my = (getmaxy() / 2);

  //SET baqckground color
  setfillstyle(9, 1);
  bar(0, 0, getmaxx(), getmaxy());

  //DRAW a bar, and make it look like a 3d bar
  setfillstyle(1, 7);
  bar(50, 20, 600, 400);

  //DRAW lines for the top and left side
  setcolor(15);
  line(50, 20, 600, 20);
  line(51, 21, 599, 21);
  line(50, 20, 50, 400);
  line(51, 21, 51, 399);

  //DRAW lines for the bottom and right side
  setcolor(8);
  line(600, 20, 600, 400);
  line(599, 21, 599, 400);
  line(50, 400, 600, 400);
  line(51, 399, 600, 399);

  //DRAW two 3D bars for the left and right side

  setfillstyle(9, 8);
  bar(70, 40, 100, 380);
  //getch();
  bar(545, 40, 575, 380);
  setcolor(8);
  rectangle(70, 40, 100, 380);
  rectangle(545, 40, 575, 380);
  setcolor(15);
  line(100, 40, 100, 380);
  line(70, 380, 100, 380);
  line(575, 40, 575, 380);
  line(545, 380, 575, 380);

  //DRAW two 3D divider lines on both sides
  setcolor(8);
  line(110, 40, 110, 380);
  line(535, 40, 535, 380);
  setcolor(15);
  line(111, 40, 111, 380);
  line(536, 40, 536, 380);

  //PRINT 3D text CALENDAR 
  settextstyle(1, 0, 4);
  settextjustify(1, 1);
  setcolor(15);
  outtextxy(mx + 2, my - 46, "MY CALCULATOR");
  setcolor(7);
  outtextxy(mx + 1, my - 45, "MY CALCULATOR");
  setcolor(8);
  outtextxy(mx + 2, my - 44, "MY CALCULATOR");

  //PRINT 3D text 
  setcolor(15);
  outtextxy(mx, my + 10, "2022");
  setcolor(7);
  outtextxy(mx + 1, my + 11, "2022");
  setcolor(8);
  outtextxy(mx + 2, my + 12, "2022");

  //PRINT copyright notice
  settextstyle(2, 0, 5);
  setcolor(1);
  outtextxy(mx + 1, my + 85, "@ 2022 by TYP 💻");

  getch(); //PAUSE for a while
}

//********************************************************************
// *
// This function makes the claculating screen *
// *
//********************************************************************

void screen(int x1, int y1, int x2, int y2) {
  setlinestyle(0, 0, 1);
  setfillstyle(SOLID_FILL, 8);
  bar(x1, y1, x2, y2);
  setfillstyle(SOLID_FILL, BLACK);
  bar(x1 + 1, y1 + 1, x2 - 1, y2 - 1);

  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(15);
  line(x1 + 1, y1 + 1, x1 + 1, y2 - 1);
  line(x1 + 1, y1 + 1, x2 - 1, y1 + 1);
  line(x1 + 2, y1 + 2, x1 + 2, y2 - 2);
  line(x1 + 2, y1 + 2, x2 - 2, y1 + 2);
  setcolor(8);
  line(x1 + 1, y2 - 1, x2 - 1, y2 - 1);
  line(x2 - 1, y1 + 1, x2 - 1, y2 - 1);
  line(x1 + 2, y2 - 2, x2 - 2, y2 - 2);
  line(x2 - 2, y1 + 2, x2 - 2, y2 - 2);

}

//***********************************************************************
// *
// Mouse Related Functions *
// *
//***********************************************************************

void init_mouse() {
  union REGS iregs, oregs;

  iregs.x.ax = 0;
  int86(0x33, & iregs, & oregs);

  if (oregs.x.ax == 0) {
    cleardevice();
    printf("mouse not installed\n");
    getch();
    exit(1);
  }
  iregs.x.ax = 1;
  int86(0x33, & iregs, & oregs);
}
//*************************************************************

void mouse() {
  int button, x1, y1;
  union REGS iregs, oregs;

  iregs.x.ax = 3;
  int86(0x33, & iregs, & oregs);

  button = oregs.x.bx & 3;
  x1 = oregs.x.cx;
  y1 = oregs.x.dx;

  if (oregs.x.bx & 1) {
    X = x1;
    Y = y1;
  }

  if (button == 3)
    exit(0);
}

//*************************************************************

void hide_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 2;
  int86(0x33, & ioRegs, & ioRegs);
}

//*************************************************************
void show_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 1;
  int86(0x33, & ioRegs, & ioRegs);
}

/*************************************************************/void remove_mouse() {
  union REGS ioRegs;
  ioRegs.x.ax = 0;
  int86(0x33, & ioRegs, & ioRegs);
}

//************************************************************************
// *
// THIS FUNCTION DRAWS THE CALCULATOR ON THE SCREEN *
// *
//************************************************************************
void structure() {
  init_mouse();
  setbkcolor(0);
  cleardevice();
  hide_mouse();
  //**********************************************************
  // Buttons Making

  front();
  frontpage();
  settextstyle(2, 0, 4);
  button_3d(50, 20, 600, 400, UNCLICKED, "", 1); // main box
  screen(100, 50, 545, 120); // screen

  setfillstyle(1, 8);
  bar(52, 22, 598, 42);
  button_3d(575, 23, 595, 40, UNCLICKED, "x", 0);
  setcolor(0);
  outtextxy(120, 30, "CALCULATOR v1.0");
  button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15); // box of decimal
  button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0); // box of octal
  button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0); // box of hexal
  button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0); // box of binary

  button_3d(350, 205, 380, 225, UNCLICKED, "7", 0); // Box Of 7
  button_3d(390, 205, 420, 225, UNCLICKED, "8", 0); // Box Of 8
  button_3d(430, 205, 460, 225, UNCLICKED, "9", 0); // Box Of 9

  button_3d(350, 230, 380, 250, UNCLICKED, "4", 0); // Box Of 4
  button_3d(390, 230, 420, 250, UNCLICKED, "5", 0); // Box Of 5
  button_3d(430, 230, 460, 250, UNCLICKED, "6", 0); // Box Of 6

  button_3d(480, 230, 510, 250, UNCLICKED, "*", 0); // Box Of *
  button_3d(515, 230, 545, 250, UNCLICKED, "/", 0); // Box Of \
  button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4); //Box Of AllClear (AC)
  button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4); //Box Of Clear (C)

  button_3d(350, 255, 380, 275, UNCLICKED, "1", 0); // Box Of 1
  button_3d(390, 255, 420, 275, UNCLICKED, "2", 0); // Box Of 2
  button_3d(430, 255, 460, 275, UNCLICKED, "3", 0); // Box Of 3

  button_3d(350, 280, 380, 300, UNCLICKED, "0", 0); // Box Of Zero (0)
  button_3d(390, 280, 420, 300, UNCLICKED, ".", 0); // Box Of Period (.)
  button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0); // Box Of PhiFunction

  button_3d(480, 255, 510, 275, UNCLICKED, "-", 0); // Box Of -
  button_3d(515, 255, 545, 275, UNCLICKED, "+", 0); // Box Of +
  button_3d(350, 305, 460, 325, UNCLICKED, "=", 0); // Box Of Equality
  button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE); // Box Of shift

  button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0); //Box of x^n
  button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0); //box of 1/x

  button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0); // Box OfSin Function
  button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0); // Box Of CosFunction
  button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0); // Box Of Tan Function

  button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0); // Box Of sin^-1
  button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0); // Box Of cos^-1
  button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0); // Box Of tan^-1

  button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0); // Box Of ln
  settextjustify(CENTER_TEXT, CENTER_TEXT);
  setcolor(BLUE);
  settextstyle(2, 0, 4);
  outtextxy(125, 290, "e");
  outtextxy(185, 290, "10^x");
  outtextxy(245, 290, "x^3");
  button_3d(160, 300, 210, 325, UNCLICKED, "log", 0); // Box Of log
  button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0); // Box Of x^2

  button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
  button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
  button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
  button_3d(480, 350, 545, 370, UNCLICKED, "Off", 4);

  button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
  button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
  button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);

}
//********************************************************
// *
// Main starts *
// *
//********************************************************
void main() {
  clrscr();

  double y = 0, z = 0, pnt, pnt1 = 0, x = 0, r = 0;

  int gdriver = DETECT, gmode, errorcode;
  int i;
  initgraph( & gdriver, & gmode, "C:\\TURBOC3\\BGI");
  midx = getmaxx() / 2;
  midy = getmaxy() / 2;
  structure();
  gotoxy(row, col);
  printf("\t\t\t\t\t");
  gotoxy(row, col);
  printf("0");
  mem = (float * ) malloc(y * sizeof(float));
  while (ch != 27 && ch1 != 27) //While Escape is not pressed
  { //and if base is not 10
    pnt1 = 0; //no doubleing point entered Yet
    ch2 = '0';
    // for(int a=0;ch!=27;a++)//a indicates whether a no. has been entered or not
    while (ch2 != 27)
    //a=0 means that no no. has been entered yet
    {
      if (bflagp != 'u') {
        //gotoxy(row,col);
        dummy = input();
 if (dummy != 'o') {
          gotoxy(row, col);
          printf("The trail version does not support this feature");
          input();
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          // ch='0';
        }
        y = 0;
        z = 0;
        ch = '0';
        gotoxy(row, col);
        printf("\t\t\t\t\t\t");
        gotoxy(row, col);
        printf("0");

        // bflagp='u';
      }

      ch = input();
      if (ch == '>' || ch == '<' || ch == '?') {
        sflag = 0;
        if (ch == '>') //M+
          *
          mem += y;
        if (ch == '<') //M-
          *
          mem -= y;
        if (ch == '?') //MR
        {
          y = * mem;
          gotoxy(row, col);
          printf("\t\t\t\t\t\t");
          gotoxy(row, col);
          printf("%g", y);
        }
        if ( * mem == 0)
          mflag = 0;
        if ( * mem != 0)
          mflag = 1;
      }
      if (mflag == 0) {
        gotoxy(row, 7);

        printf(" ");

      }
      if (mflag != 0) {
        gotoxy(row, 7);

        printf("M");
      }
      gotoxy(row, col);

      if (ch == 'a') {
        sflag = 0;
        y = 0;
        gotoxy(row, col);
        printf("\t\t\t\t\t");
        gotoxy(row, col);
 printf("0");
      }

      if (ch == 'o')
      //for clearing the screen of the CALCULATOR
      {
        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }

      if (ch == 'q') {
        sflag = 0;
        y = sqrt(y);
 gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == 'm') {
        sflag = 0;
        y = 1 / y;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
      }
      if (ch == '+' || ch == '-' || ch == '/' || ch == '\\' || ch == '=' || ch == '*') {
        sflag = 0;
        break;
      }
      if (ch == '.') //case for a decimal point
      {
        sflag = 0;
 if (pnt1 == 0) //ie no decimal has been entered yet
        {
          gotoxy(row, col);
          printf("\t\t\t\t "); // double
          gotoxy(row, col);
          printf("%g.", y);
          pnt1 = .1; //ie one decimal point no has been entered
          continue; //go back to the begining and get the next number
        } else //decimal point has alredy been entered and thus no change in the screen
        {
          sflag = 0;
          continue; //go back to the begining
        }
      } //out of the '.' condition

      if (pnt1 != 0) //ie we have a doubleing point
      {
        sflag = 0;
        if (ch <= '9' && ch >= '0') //input integer
        {
   // printf("%c",ch);
          x = (double) ch; //type cast the character into double to perforn further operations
          x -= 48; //since character digit indoubleing -48 gives the corresponding ASCII
          x = x * pnt1; //make it a decimal
          y = x + y; //add it in result
          pnt1 *= .1; //shift to the second doubleing point
          gotoxy(row, col);
          printf("%g", y);
          gotoxy(row, col);
          continue; //back to the top
        }
      }
      //if no decimal point number then proceed

      if (ch <= '9' && ch >= '0') {
        sflag = 0;
        x = (double) ch; //typecast to double
        x -= 48; //get corresponding ASCII
        y = (y * 10) + x; //add to right of result
        gotoxy(row, col); //go back to start of the calc screen
 printf("\t\t\t\t "); //clear the screen
        gotoxy(row, col);
        printf("%g", y); //print the number
      }
      if (ch == 'u' || ch == 'v' || ch == 'w' || ch == 'x') {
        sflag = 0;
        if (bflagp == bflag && bflag == 'u')
          continue;
        else
          basecng(y, pnt1);
      }
      if (ch == 'd' || ch == 'r' || ch == 'g') {
        sflag = 0;
        y = angle_conv(y);
        gotoxy(row, col);
        printf("\t\t\t\t ");
        gotoxy(row, col);
        printf("%g", y);
        // gotoxy(row,col);
        // printf("%g",y);
 // continue;
      }
      if (ch == 's' || ch == 'c' || ch == 't' || ch == 'i' || ch == 'j' || ch == 'k' || ch == 'n' || ch == 'l' || ch == 'p' || ch == 'h')
      //ie the user opted for a function
      {
        if (ch == 's' || ch == 'c' || ch == 't') //sin /cos/tan
        {
          sflag = 0;
          if (flag != 'r') {
            flagp = flag;
            flag = 'r';
            y = angle_conv(y);
            flag = flagp;
          }
          // gotoxy(row,col);
          // printf("%g",y);getch();
          switch (ch) {

          case 's':
            y = sin(y);
     break;
          case 'c':
            y = cos(y);
            break;
          case 't':
            y = tan(y);
            break;
          }
        }
        if (ch == 'i' || ch == 'j' || ch == 'k') {
          sflag = 0;
          if (flag != 'r') {
            // flagp=flag;
            flagp = 'r';
            //y=angle_conv(y);
          }
          switch (ch) {
          case 'i':
            y = asin(y);
            break;
   case 'j':
            y = acos(y);
            break;
          case 'k':
            y = atan(y);
            break;
          }
          if (flag != 'r')
            y = angle_conv(y);
        } else if (ch == 'n') {
          if (sflag == 1) {
            y = exp(y);
            sflag = 0;
          } else
            y = log(y); //ln
        } else if (ch == 'l') {
          if (sflag == 1) {
            y = pow(10, y);
            sflag = 0;
          } else
     y = log10(y); //log
        } else if (ch == 'p') {
          if (sflag == 1) {
            y = pow(y, 3);
            sflag = 0;
          } else
            y = pow(y, 2); //square
        } else if (ch == 'h') {
          sflag = 0;
          y = PI; //pi
        }

        gotoxy(row, col);
        printf("\t\t\t\t "); //Clear the screen
        gotoxy(row, col);
        printf("%g", y);
      } //else condition

    } //out of second condition ie we now have the first no. or function or operater

    for (; ch != 27 && ch1 != '=' && ch != '=';) //ie the characters input are not ESCAPE or Equal to

    {
      pnt1 = 0;
      z = 0;
      if (ch == 'o' || ch1 == 'o') // For Clear The Screen
      {

        sflag = 0;
        y = 0;
        z = 0;
        gotoxy(row, col);
        printf("\t\t\t\t ");
        // gotoxy(col,row);
        gotoxy(row, col);
        printf("0");
        gotoxy(row, col);
        break;
      }
      for (; ch1 != 27;) {
 gotoxy(row, col);
        // printf("%g",z);
        // z=0;
        ch1 = input();

        if (ch1 == '>' || ch1 == '<' || ch1 == '?') {
          if (ch1 == '>') //M+
            *
            mem += z;
          if (ch1 == '<') //M-
            *
            mem -= z;
          if (ch1 == '?') //MR
          {
            z = * mem;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
          }
   if ( * mem == 0)
            mflag = 0;
          if ( * mem != 0)
            mflag = 1;
        }
        if (mflag == 0) {
          gotoxy(row, 7);
          printf(" ");
        }
        if (mflag != 0) {
          gotoxy(row, 7);
          printf("M");
        }
        gotoxy(row, col);

        if (ch1 == 'a') {
          z = 0;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
        }

        if (ch == 'o' || ch1 == 'o') // For Clear The Screen
        {
          y = 0;
          z = 0;
          gotoxy(row, col);
          //cout<<" ";
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("0");
          gotoxy(row, col);
          break;
        }
        if (ch1 == 'q') {
          z = sqrt(z);
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }
        if (ch1 == 'm') {
          z = 1 / z;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
        }

        if (ch1 == '.') {
          if (pnt1 == 0) {
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            //cout<<z<<".";
            printf("%g.", z);
            pnt1 = .1;
            continue;
          } else {
            continue;
          }
        }
        if (pnt1 != 0) {
          if (ch1 <= '9' && ch1 >= '0') {
            // printf("%c",ch1);
            x = (double) ch1;
            x -= 48;
            x = x * pnt1;
            z = x + z;
            pnt1 = pnt1 * .1;
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            continue;
          }
        }

        if (ch1 == '+' || ch1 == '-' || ch1 == '*' || ch1 == '/' || ch1 == '=')
          break;
        if (ch1 >= '0' && ch1 <= '9') {
          x = (double) ch1;
          x = x - 48;
          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          z = (z * 10) + x;
          printf("%g", z);
        }
        if (ch == 'u')
          if (ch == 'd' || ch == 'r' || ch == 'g') {
            z = angle_conv(z);
            gotoxy(row, col);
            printf("\t\t\t\t ");
            gotoxy(row, col);
            printf("%g", z);
            // continue;
          }
        if (ch1 == 's' || ch1 == 'c' || ch1 == 't' || ch1 == 'i' || ch1 == 'j' || ch1 == 'k' || ch1 == 'n' || ch1 == 'l' || ch1 == 'p' || ch1 == 'h')
        //ie the user opted for a function
        {
          if (ch1 == 's' || ch1 == 'c' || ch1 == 't') //sin
          {
            if (flag != 'r') {
              flagp = flag;
              flag = 'r';
              angle_conv(z);
              flag = flagp;
            }
            switch (ch1) {
            case 's':
              z = sin(z);
              break;
            case 'c':
              z = cos(z);
              break;
            case 't':
              z = tan(z);
              break;
            }
          }
          if (ch1 == 'i' || ch1 == 'j' || ch1 == 'k') {
            if (flag != 'r') {
              flagp = 'r';
            }
            switch (ch1) {
            case 'i':
              z = asin(z);
              break;
            case 'j':
              z = acos(z);
              break;
            case 'k':
              z = atan(z);
              break;
            }
            z = angle_conv(z);
          } else if (ch1 == 'l') {
            z = log10(z); //log
          } else if (ch1 == 'p') {
            z = pow(z, 2); //square
          } else if (ch1 == 'h') {
            z = PI; //pi
          }

          gotoxy(row, col);
          printf("\t\t\t\t ");
          gotoxy(row, col);
          printf("%g", z);
          gotoxy(row, col);
        }
      }

      if (ch1 == '+' || ch1 == '-' || ch1 == '=') {
        y = add(y, z, ch);
        if (ch2 != '0') {
          y = add(r, y, ch2);
          ch2 = '0';
        }
      } else {
        if (ch == '*' || ch == '/')
          y = add(y, z, ch);
        else {
          ch2 = ch;
          r = y;
          y = z;
        }
      }
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("%g", y);
      ch = ch1;
      ch1 = '0';
      if (ch == '=' || ch1 == '=')
        break;
    }
    if (ch == 'o' || ch1 == 'o') // For Clear The Screen
    {
      y = 0;
      z = 0;
      gotoxy(row, col);
      printf("\t\t\t\t ");
      gotoxy(row, col);
      printf("0");
      gotoxy(row, col);
      continue;
    }
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%g", y);
    z = 0;
  }

  // getch();
  closegraph();
  remove_mouse();
  exit(0);

}

//************************************************************
// *
// This function gets the user's Input *
// *
//************************************************************

char input() {
  X = 0;
  Y = 0;
  char ch;
  show_mouse();
  if (bflag != 'u') {
    button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
    button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
    button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
    button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
    bflag = 'u';
  }
  do {
    mouse();
    if (X >= 350 && X <= 380 && Y >= 205 && Y <= 225) // Condition For 7
    {
      hide_mouse();
      button_3d(350, 205, 380, 225, CLICKED, "7", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 205, 380, 225, UNCLICKED, "7", 0);
      show_mouse();
      ch = '7';
      return ch;
    }

    //**********************************************

    if (X >= 390 && X <= 420 && Y >= 205 && Y <= 225) // Condition For 8
    {

      hide_mouse();
      button_3d(390, 205, 420, 225, CLICKED, "8", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 205, 420, 225, UNCLICKED, "8", 0);
      show_mouse();
      ch = '8';
      return ch;
    }

    //*****************************************

    if (X >= 430 && X <= 460 && Y >= 205 && Y <= 225) // Condition For 9
    {
      hide_mouse();
      button_3d(430, 205, 460, 225, CLICKED, "9", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 205, 460, 225, UNCLICKED, "9", 0);
      show_mouse();
      ch = '9';
      return ch;
    }

    //***********************************

    if (X >= 350 && X <= 380 && Y >= 230 && Y <= 250) // Condition For 4
    {
      hide_mouse();
      button_3d(350, 230, 380, 250, CLICKED, "4", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 230, 380, 250, UNCLICKED, "4", 0);
      show_mouse();
      ch = '4';
      return ch;
    }

    //***********************************

    if (X >= 390 && X <= 420 && Y >= 230 && Y <= 250) // Condition For 5
    {
      hide_mouse();
      button_3d(390, 230, 420, 250, CLICKED, "5", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 230, 420, 250, UNCLICKED, "5", 0);
      show_mouse();
      ch = '5';
      return ch;
    }

    //***********************************

    if (X >= 430 && X <= 460 && Y >= 230 && Y <= 250) // Condition For 6
    {
      hide_mouse();
      button_3d(430, 230, 460, 250, CLICKED, "6", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 230, 460, 250, UNCLICKED, "6", 0);
      show_mouse();
      ch = '6';
      return ch;
    }

    //***********************************

    if (X >= 480 && X <= 510 && Y >= 230 && Y <= 250) // Condition For *
    {
      hide_mouse();
      button_3d(480, 230, 510, 250, CLICKED, "*", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 230, 510, 250, UNCLICKED, "*", 0);
      show_mouse();
      ch = '*';
      return ch;
    }
    //***********************************

    if (X >= 515 && X <= 545 && Y >= 230 && Y <= 250) // Condition For /
    {
      hide_mouse();
      button_3d(515, 230, 545, 250, CLICKED, "/", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 230, 545, 250, UNCLICKED, "/", 0);
      show_mouse();
      ch = '/';
      return ch;
    }

    //***********************************
    int a, b;
    if (X >= 350 && X <= 380 && Y >= 255 && Y <= 275) // Condition For 1
    {
      hide_mouse();
      button_3d(350, 255, 380, 275, CLICKED, "1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 255, 380, 275, UNCLICKED, "1", 0);
      show_mouse();
      ch = '1';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 255 && Y <= 275) // Condition For 2
    {
      hide_mouse();
      button_3d(390, 255, 420, 275, CLICKED, "2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 255, 420, 275, UNCLICKED, "2", 0);
      show_mouse();
      ch = '2';
      return ch;
    }

    // *************************************

    if (X >= 430 && X <= 460 && Y >= 255 && Y <= 275) // Condition For 3
    {
      hide_mouse();
      button_3d(430, 255, 460, 275, CLICKED, "3", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 255, 460, 275, UNCLICKED, "3", 0);
      show_mouse();
      ch = '3';
      return ch;
    }

    // *************************************

    if (X >= 350 && X <= 380 && Y >= 280 && Y <= 300) // Condition For 0
    {
      hide_mouse();
      button_3d(350, 280, 380, 300, CLICKED, "0", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 280, 380, 300, UNCLICKED, "0", 0);
      show_mouse();
      ch = '0';
      return ch;
    }

    // *************************************

    if (X >= 390 && X <= 420 && Y >= 280 && Y <= 300) // Condition For .
    {
      hide_mouse();
      button_3d(390, 280, 420, 300, CLICKED, ".", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 280, 420, 300, UNCLICKED, ".", 0);
      show_mouse();
      ch = '.';
      return ch;
    }

    //**********************************************

    if (X >= 430 && X <= 460 && Y >= 280 && Y <= 300) // Condition For pi
    {
      hide_mouse();
      button_3d(430, 280, 460, 300, CLICKED, "pi", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 280, 460, 300, UNCLICKED, "pi", 0);
      show_mouse();
      ch = 'h';
      return ch;
    }

    //***********************************************

    if (X >= 480 && X <= 510 && Y >= 255 && Y <= 275) // Condition For -
    {
      hide_mouse();
      button_3d(480, 255, 510, 275, CLICKED, "-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 255, 510, 275, UNCLICKED, "-", 0);
      show_mouse();
      ch = '-';
      return ch;
    }

    //**************************************************

    if (X >= 515 && X <= 545 && Y >= 255 && Y <= 275) // Condition For +
    {
      hide_mouse();
      button_3d(515, 255, 545, 275, CLICKED, "+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 255, 545, 275, UNCLICKED, "+", 0);
      show_mouse();
      ch = '+';
      return ch;
    }

    //*****************************************************

    if (X >= 350 && X <= 460 && Y >= 305 && Y <= 325) // Condition For =
    {
      hide_mouse();
      button_3d(350, 305, 460, 325, CLICKED, "=", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 305, 460, 325, UNCLICKED, "=", 0);
      show_mouse();
      ch = '=';
      return ch;
    }

    //*****************************************************

    if (X >= 480 && X <= 545 && Y >= 305 && Y <= 325) // Condition For shift
    {
      hide_mouse();
      button_3d(480, 305, 545, 325, CLICKED, "shift", BLUE);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 305, 545, 325, UNCLICKED, "shift", BLUE);
      show_mouse();
      ch = '~';
      sflag = 1;
      return ch;
    }

    //*************************************

    if (X >= 480 && X <= 510 && Y >= 205 && Y <= 225) // Condition For AC
    {
      hide_mouse();
      button_3d(480, 205, 510, 225, CLICKED, "AC", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 205, 510, 225, UNCLICKED, "AC", 4);
      show_mouse();
      ch = 'o';
      return ch;
    }
    /********************C*/    if (X >= 515 && X <= 545 && Y >= 205 && Y <= 225) // Condition For C
    {
      hide_mouse();
      button_3d(515, 205, 545, 225, CLICKED, "CE", 4);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 205, 545, 225, UNCLICKED, "CE", 4);
      show_mouse();
      ch = 'a';
      return ch;
    }

    // ****************************************

    if (X >= 100 && X <= 150 && Y >= 205 && Y <= 230) // Condition For Sin
    {
      hide_mouse();
      button_3d(100, 205, 150, 230, CLICKED, "Sin", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 205, 150, 230, UNCLICKED, "Sin", 0);
      show_mouse();
      ch = 's';
      return ch;
    }

    //***********************************

    if (X >= 160 && X <= 210 && Y >= 205 && Y <= 230) // Condition For Cos
    {
      hide_mouse();
      button_3d(160, 205, 210, 230, CLICKED, "Cos", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 205, 210, 230, UNCLICKED, "Cos", 0);
      show_mouse();
      ch = 'c';
      return ch;
    }

    //***********************************

    if (X >= 515 && X <= 545 && Y >= 280 && Y <= 300) //inverse
    {
      hide_mouse();
      button_3d(515, 280, 545, 300, CLICKED, "inv", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(515, 280, 545, 300, UNCLICKED, "inv", 0);
      show_mouse();
      ch = 'm';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 205 && Y <= 230) // Condition For Tan
    {
      hide_mouse();
      button_3d(220, 205, 270, 230, CLICKED, "Tan", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 205, 270, 230, UNCLICKED, "Tan", 0);
      show_mouse();
      ch = 't';
      return ch;
    }

    //*********************************** */
    if (X >= 100 && X <= 150 && Y >= 250 && Y <= 275) // Condition For sin^-1
    {
      hide_mouse();
      button_3d(100, 250, 150, 275, CLICKED, "sin^-1", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(100, 250, 150, 275, UNCLICKED, "sin^-1", 0);
      show_mouse();
      ch = 'i';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 250 && Y <= 275) // Condition For cos^-1
    {
      hide_mouse();
      button_3d(160, 250, 210, 275, CLICKED, "cos^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 250, 210, 275, UNCLICKED, "cos^-1", 0);
      show_mouse();
      ch = 'j';
      return ch;
    }
    //**************************

    if (X >= 430 && X <= 460 && Y >= 350 && Y <= 370) // Condition For MR
    {
      hide_mouse();
      button_3d(430, 350, 460, 370, CLICKED, "MR", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(430, 350, 460, 370, UNCLICKED, "MR", 0);
      show_mouse();
      ch = '?';
      return ch;
    }
    if (X >= 390 && X <= 420 && Y >= 350 && Y <= 370) // Condition For M-
    {
      hide_mouse();
      button_3d(390, 350, 420, 370, CLICKED, "M-", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(390, 350, 420, 370, UNCLICKED, "M-", 0);
      show_mouse();
      ch = '<';
      return ch;
    }
    if (X >= 350 && X <= 380 && Y >= 350 && Y <= 370) // Condition For M+
    {
      hide_mouse();
      button_3d(350, 350, 380, 370, CLICKED, "M+", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(350, 350, 380, 370, UNCLICKED, "M+", 0);
      show_mouse();
      ch = '>';
      return ch;
    }

    if (X >= 220 && X <= 270 && Y >= 250 && Y <= 275) // Condition For tan^-1
    {
      hide_mouse();
      button_3d(220, 250, 270, 275, CLICKED, "tan^-1", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 250, 270, 275, UNCLICKED, "tan^-1", 0);
      show_mouse();
      ch = 'k';
      return ch;
    }
    //**************************

    if (X >= 100 && X <= 150 && Y >= 300 && Y <= 325) // Condition For ln
    {
      hide_mouse();
      button_3d(100, 300, 150, 325, CLICKED, "ln", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 300, 150, 325, UNCLICKED, "ln", 0);
      show_mouse();
      ch = 'n';
      return ch;
    }
    //**************************

    if (X >= 160 && X <= 210 && Y >= 300 && Y <= 325) // Condition For log
    {
      hide_mouse();
      button_3d(160, 300, 210, 325, CLICKED, "log", 0);
      show_mouse();
      delay(150);
      hide_mouse();
      button_3d(160, 300, 210, 325, UNCLICKED, "log", 0);
      show_mouse();
      ch = 'l';
      return ch;
    }
    //**************************

    if (X >= 220 && X <= 270 && Y >= 300 && Y <= 325) // Condition For X^2
    {
      hide_mouse();
      button_3d(220, 300, 270, 325, CLICKED, "x^2", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 300, 270, 325, UNCLICKED, "x^2", 0);
      show_mouse();
      ch = 'p';
      return ch;
    }
    if (X >= 100 && X <= 150 && Y >= 350 && Y <= 370) // Condition For deg
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, CLICKED, "deg", 15);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 15);
      show_mouse();
      ch = 'd';
      flagp = flag;
      flag = ch;
      return ch;
    } 
//**************************
    if (X >= 160 && X <= 210 && Y >= 350 && Y <= 370) // Condition For rad
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, CLICKED, "rad", 15);
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 15);
      show_mouse();
      ch = 'r';
      flagp = flag;
      flag = ch;

      return ch;
    }
    if (X >= 220 && X <= 270 && Y >= 350 && Y <= 370) // Condition For gra
    {
      hide_mouse();
      button_3d(100, 350, 150, 370, UNCLICKED, "deg", 0);
      button_3d(160, 350, 210, 370, UNCLICKED, "rad", 0);
      button_3d(220, 350, 270, 370, CLICKED, "gra", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(220, 350, 270, 370, UNCLICKED, "gra", 15);
      show_mouse();
      ch = 'g';
      flagp = flag;
      flag = ch;
      return ch;

    }
    if ((X >= 480 && X <= 545 && Y >= 350 && Y <= 370) || (X >= 575 && X <= 595 && Y >= 23 && Y <= 40)) //OFF
    {
      free(mem);
      exit(0);
    }
    if (X >= 108 && X <= 208 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, CLICKED, "DEC", 15);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 15);
      show_mouse();
      ch = 'u';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 218 && X <= 318 && Y >= 140 && Y <= 160) // Condition For oct
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, CLICKED, "OCT", 15);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 15);
      show_mouse();
      ch = 'v';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 328 && X <= 428 && Y >= 140 && Y <= 160) // Condition For hex
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, CLICKED, "HEX", 15);
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 15);
      show_mouse();
      ch = 'w';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 438 && X <= 538 && Y >= 140 && Y <= 160) // Condition For dec
    {
      hide_mouse();
      button_3d(108, 140, 208, 160, UNCLICKED, "DEC", 0);
      button_3d(218, 140, 318, 160, UNCLICKED, "OCT", 0);
      button_3d(328, 140, 428, 160, UNCLICKED, "HEX", 0);
      button_3d(438, 140, 538, 160, CLICKED, "BIN", 15);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(438, 140, 538, 160, UNCLICKED, "BIN", 15);
      show_mouse();
      ch = 'x';
      bflagp = bflag;
      bflag = ch;
      return ch;
    }
    if (X >= 480 && X <= 510 && Y >= 280 && Y <= 300) {
      hide_mouse();
      button_3d(480, 280, 510, 300, CLICKED, "sqrt", 0);
      show_mouse();
      delay(250);
      hide_mouse();
      button_3d(480, 280, 510, 300, UNCLICKED, "sqrt", 0);
      show_mouse();
      ch = 'q';
      return ch;
    }

  } while (kbhit() == 0);
  ch = getch();
  return ch;
}

//***********************************************
// *
// This function performs the Calculations *
// *
//***********************************************
double add(double x, double y, char ch) {
  switch (ch) {
  case '+':
    y = x + y;
    break;
  case '-':
    y = x - y;
    break;
  case '*':
    y = x * y;
    break;
  case '/':
    y = x / y;
  }
  return y;
}

double angle_conv(double no) {
  if (flagp == 'd') {
    if (flag == 'r') {
      no = no * PI / 180;
    }
    if (flag == 'g') {
      no = no * 1.1111111;
    }
  } else if (flagp == 'r') {
    if (flag == 'd') {
      no = no * 180 / PI;
    }
    if (flag == 'g') {
      no = no * 180 / PI * 1.1111111;
    }
  } else if (flagp == 'g') {
    if (flag == 'r') {
      no = no / (180 * 1.1111111) * PI;
    }
    if (flag == 'd') {
      no = no / 1.1111111;
    }
  }
  return (no);
}

void basecng(double y, double pnt1) {
  char str[17];
  if (pnt1 != 0) {
    gotoxy(row, col);
    printf("The trial version does not support this feature");
    getch();
    bflag = 'u';
    bflagp = '0';
    main();
  }
  if (bflagp != 'u') {
    gotoxy(row, col);
    printf("The trial version does not support this feature ");
    getch();
    bflagp = '0';
    bflag = 'u';
    main();
  }
  switch (bflag) {
  case 'v':
    itoa(y, str, 8);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    break;

  case 'w':
    itoa(y, str, 16);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    bflagp = '0';
    // getch();
    break;

  case 'x':
    itoa(y, str, 2);
    gotoxy(row, col);
    printf("\t\t\t\t ");
    gotoxy(row, col);
    printf("%s", str);
    // getch();
    bflagp = '0';
    break;
  }
  bflag = 'u';
}
 




